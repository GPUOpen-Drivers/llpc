; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool cross-module-inline --version 3
; RUN: cross-module-inline %s %S/inc/link-struct-ptr-argument.ll --link inline_fun --link inline_fun_struct | FileCheck %s
;
; Inline a function with struct arguemtnt passed as pointer. Check that return is loaded from pointer.

%struct.MyClass = type { i32 }

declare !pointeetys !0 i32 @inline_fun(ptr)
declare i32 @inline_fun_struct(%struct.MyClass)

define i32 @main() {
; CHECK-LABEL: define i32 @main() {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca [[STRUCT_MYCLASS:%.*]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_MYCLASS]], ptr [[TMP1]], i32 0, i32 0
; CHECK-NEXT:    store i32 5, ptr [[TMP2]], align 4
; CHECK-NEXT:    [[RESULT_I:%.*]] = load i32, ptr [[TMP1]], align 4
; CHECK-NEXT:    [[S:%.*]] = load %struct.MyClass, ptr [[TMP1]], align 4
; CHECK-NEXT:    [[RESULT_I1:%.*]] = extractvalue %struct.MyClass [[S]], 0
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[RESULT_I]], [[RESULT_I1]]
; CHECK-NEXT:    ret i32 [[ADD]]
;
  %1 = alloca %struct.MyClass, align 4
  %2 = getelementptr inbounds %struct.MyClass, ptr %1, i32 0, i32 0
  store i32 5, ptr %2, align 4
  %result = call i32 @inline_fun(ptr nonnull %1)
  %s = load %struct.MyClass, ptr %1
  %result2 = call i32 @inline_fun_struct(%struct.MyClass %s)
  %add = add i32 %result, %result2
  ret i32 %add
}

!0 = !{%struct.MyClass poison}
