; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --check-globals
; RUN: opt -passes="dxil-to-llvm,lint" --verify-each --lint-abort-on-error -S %s | FileCheck %s
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

declare void @use32(i32)
declare i32 @def32()
declare void @use1(i1)
declare i1 @def1()

%simple.struct = type { <2 x i1> }
; Check that <2 x i1> is replaced by <2 x i32> in the struct:
; CHECK-NOT: %simple.struct = type { <2 x i1> }
; CHECK: %simple.struct.0 = type { <2 x i32> }
; CHECK-NOT: %simple.struct = type { <2 x i1> }

define void @test_vec_alloca() {
; CHECK-LABEL: define {{[^@]+}}@test_vec_alloca() {
; CHECK-NEXT:    [[VEC_ALLOCA:%.*]] = alloca <2 x i32>, align 8
; CHECK-NEXT:    [[I1_1:%.*]] = call i1 @def1()
; CHECK-NEXT:    [[I1_2:%.*]] = call i1 @def1()
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[I1_1]] to i32
; CHECK-NEXT:    [[VEC1:%.*]] = insertelement <2 x i32> undef, i32 [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = zext i1 [[I1_2]] to i32
; CHECK-NEXT:    [[VEC_12:%.*]] = insertelement <2 x i32> [[VEC1]], i32 [[TMP2]], i32 1
; CHECK-NEXT:    store <2 x i32> [[VEC_12]], ptr [[VEC_ALLOCA]], align 8
; CHECK-NEXT:    [[VEC_I32_LOAD:%.*]] = load i32, ptr [[VEC_ALLOCA]], align 4
; CHECK-NEXT:    call void @use32(i32 [[VEC_I32_LOAD]])
; CHECK-NEXT:    ret void
;
  %vec.alloca = alloca <2 x i1>, align 1
  %i1.1 = call i1 @def1()
  %i1.2 = call i1 @def1()
  %vec = insertelement <2 x i1> undef, i1 %i1.1, i32 0
  %vec.1 = insertelement <2 x i1> %vec, i1 %i1.2, i32 1
  store <2 x i1> %vec.1, ptr %vec.alloca
  %vec.i32.load = load i32, ptr %vec.alloca, align 4
  call void @use32(i32 %vec.i32.load)
  ret void
}


define void @test_vec_struct_alloca() {
; CHECK-LABEL: define {{[^@]+}}@test_vec_struct_alloca() {
; CHECK-NEXT:    [[VEC_ALLOCA:%.*]] = alloca [[SIMPLE_STRUCT_0:%.*]], align 8
; CHECK-NEXT:    [[I1_1:%.*]] = call i1 @def1()
; CHECK-NEXT:    [[I1_2:%.*]] = call i1 @def1()
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[I1_1]] to i32
; CHECK-NEXT:    [[VEC1:%.*]] = insertelement <2 x i32> undef, i32 [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = zext i1 [[I1_2]] to i32
; CHECK-NEXT:    [[VEC_12:%.*]] = insertelement <2 x i32> [[VEC1]], i32 [[TMP2]], i32 1
; CHECK-NEXT:    [[STRUCT:%.*]] = insertvalue [[SIMPLE_STRUCT_0]] poison, <2 x i32> [[VEC_12]], 0
; CHECK-NEXT:    store [[SIMPLE_STRUCT_0]] [[STRUCT]], ptr [[VEC_ALLOCA]], align 8
; CHECK-NEXT:    [[VEC_I32_LOAD:%.*]] = load i32, ptr [[VEC_ALLOCA]], align 4
; CHECK-NEXT:    call void @use32(i32 [[VEC_I32_LOAD]])
; CHECK-NEXT:    ret void
;
  %vec.alloca = alloca %simple.struct, align 1
  %i1.1 = call i1 @def1()
  %i1.2 = call i1 @def1()
  %vec = insertelement <2 x i1> undef, i1 %i1.1, i32 0
  %vec.1 = insertelement <2 x i1> %vec, i1 %i1.2, i32 1
  %struct = insertvalue %simple.struct poison, <2 x i1> %vec.1, 0
  store %simple.struct %struct, ptr %vec.alloca
  %vec.i32.load = load i32, ptr %vec.alloca, align 4
  call void @use32(i32 %vec.i32.load)
  ret void
}

; Only check mutating function arguments. Mutating return types is not yet supported and isn't required for now.
define i1 @test_argument(<7 x i1> %arg) {
; CHECK-LABEL: define {{[^@]+}}@test_argument
; CHECK-SAME: (<7 x i32> [[ARG:%.*]]) {
; CHECK-NEXT:    [[VAL1:%.*]] = extractelement <7 x i32> [[ARG]], i32 3
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 [[VAL1]] to i1
; CHECK-NEXT:    ret i1 [[TMP1]]
;
  %val = extractelement <7 x i1> %arg, i32 3
  ret i1 %val
}

define i1 @test_struct_gep(ptr %arg, i32 %index) {
; CHECK-LABEL: define {{[^@]+}}@test_struct_gep
; CHECK-SAME: (ptr [[ARG:%.*]], i32 [[INDEX:%.*]]) {
; CHECK-NEXT:    [[PTR1:%.*]] = getelementptr [[SIMPLE_STRUCT_0:%.*]], ptr [[ARG]], i32 [[INDEX]], i32 0
; CHECK-NEXT:    [[VEC:%.*]] = load <2 x i32>, ptr [[PTR1]], align 8
; CHECK-NEXT:    [[RES2:%.*]] = extractelement <2 x i32> [[VEC]], i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 [[RES2]] to i1
; CHECK-NEXT:    ret i1 [[TMP1]]
;
  %ptr = getelementptr %simple.struct, ptr %arg, i32 %index, i32 0
  %vec = load <2 x i1>, ptr %ptr
  %res = extractelement <2 x i1> %vec, i32 1
  ret i1 %res
}

define void @test_pointee_metadata(<7 x i1>, ptr) !types !1 {
; CHECK-LABEL: define {{[^@]+}}@test_pointee_metadata
; CHECK-SAME: (<7 x i32> [[TMP0:%.*]], ptr [[TMP1:%.*]]) !types [[META2:![0-9]+]] {
; CHECK-NEXT:    ret void
;
  ret void
}

!named = !{!10, !11}

!1 = !{!"function", !"void", <7 x i1> poison, !2}
!2 = !{i32 0, %simple.struct poison}
!10 = !{<1 x i1> undef}
!11 = !{<3 x i1> poison}
;.
; CHECK: [[META0:![0-9]+]] = !{<1 x i32> undef}
; CHECK: [[META1:![0-9]+]] = !{<3 x i32> poison}
; CHECK: [[META2]] = !{!"function", !"void", <7 x i32> poison, [[META3:![0-9]+]]}
; CHECK: [[META3]] = !{i32 0, %simple.struct.0 poison}
;.
