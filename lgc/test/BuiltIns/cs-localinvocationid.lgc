; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -mcpu=gfx1010 - < %s | FileCheck --check-prefixes=GFX10 %s
; RUN: lgc -mcpu=gfx1100 - < %s | FileCheck --check-prefixes=GFX11 %s

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !0 {
.entry:
  %0 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 2)
  %1 = call <3 x i32> (...) @lgc.create.read.builtin.input.v3i32(i32 27, i32 0, i32 undef, i32 undef)
  %2 = bitcast i8 addrspace(7)* %0 to <3 x i32> addrspace(7)*
  store <3 x i32> %1, <3 x i32> addrspace(7)* %2, align 4
  ret void
}

declare <3 x i32> @lgc.create.read.builtin.input.v3i32(...) local_unnamed_addr #0
declare ptr addrspace(7) @lgc.load.buffer.desc(i64, i32, i32, i32) local_unnamed_addr #0

attributes #0 = { nounwind }

!lgc.user.data.nodes = !{!1, !2}
!llpc.compute.mode = !{!3}

; ShaderStage::Compute
!0 = !{i32 7}
; type, offset, size, count
!1 = !{!"DescriptorTableVaPtr", i32 0, i32 0, i32 2, i32 1, i32 1}
; type, offset, size, set, binding, stride
!2 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i32 0, i32 0, i32 4}
; Compute mode, containing workgroup size
!3 = !{i32 5, i32 6, i32 7}

; GFX10-LABEL: amdgpu_cs_main:
; GFX10:         s_getpc_b64 s[2:3]
; GFX10-NEXT:    s_mov_b32 s0, s1
; GFX10-NEXT:    s_mov_b32 s1, s3
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; GFX10-NEXT:    s_waitcnt lgkmcnt(0)
; GFX10-NEXT:    buffer_store_dwordx3 v[0:2], off, s[0:3], 0
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: amdgpu_cs_main:
; GFX11:         s_getpc_b64 s[2:3]
; GFX11-NEXT:    s_mov_b32 s0, s1
; GFX11-NEXT:    s_mov_b32 s1, s3
; GFX11-NEXT:    v_and_b32_e32 v1, 0x3ff, v0
; GFX11-NEXT:    s_load_b128 s[0:3], s[0:1], 0x0
; GFX11-NEXT:    v_bfe_u32 v2, v0, 10, 10
; GFX11-NEXT:    v_lshrrev_b32_e32 v3, 20, v0
; GFX11-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-NEXT:    buffer_store_b96 v[1:3], off, s[0:3], 0
; GFX11-NEXT:    s_nop 0
; GFX11-NEXT:    s_sendmsg sendmsg(MSG_DEALLOC_VGPRS)
; GFX11-NEXT:    s_endpgm
