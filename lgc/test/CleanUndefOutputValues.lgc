
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
; Check the case that undef output value cannot be removed since the location may be re-written with valid value later.

; RUN: lgc -mcpu=gfx1010 -passes=lgc-collect-resource-usage -o - %s -o - | FileCheck --check-prefixes=CHECK1 %s

; Function Attrs: alwaysinline nounwind
define dllexport spir_func void @lgc.shader.VS.main() local_unnamed_addr #0 !spirv.ExecutionModel !23 !lgc.shaderstage !19 {
; CHECK1-LABEL: define dllexport spir_func void @lgc.shader.VS.main(
; CHECK1-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META21:![0-9]+]] !lgc.shaderstage [[META18:![0-9]+]] {
; CHECK1-NEXT:  [[_ENTRY:.*:]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.f32(i32 2, i32 0, float 2.000000e+00) #[[ATTR1:[0-9]+]]
; CHECK1-NEXT:    ret void
;
.entry:
  call void @lgc.output.export.generic.i32.i32.f32(i32 1, i32 0, float undef) #1
  call void @lgc.output.export.generic.i32.i32.f32(i32 2, i32 0, float 2.000000e+00) #1
  ret void
}

; Function Attrs: alwaysinline nounwind
define dllexport spir_func void @lgc.shader.TCS.main() local_unnamed_addr #0 !spirv.ExecutionModel !19 !lgc.shaderstage !24 {
; CHECK1-LABEL: define dllexport spir_func void @lgc.shader.TCS.main(
; CHECK1-SAME: ) local_unnamed_addr #[[ATTR0]] !spirv.ExecutionModel [[META18]] !lgc.shaderstage [[META22:![0-9]+]] {
; CHECK1-NEXT:  [[_ENTRY:.*:]]
; CHECK1-NEXT:    [[POSITION:%.*]] = call <4 x float> @lgc.input.import.builtin.Position.v4f32.i32.i32.i32(i32 0, i32 -1, i32 0) #[[ATTR2:[0-9]+]]
; CHECK1-NEXT:    [[INVOCATIONID:%.*]] = call i32 @lgc.input.import.builtin.InvocationId.i32.i32.i32.i32(i32 8, i32 -1, i32 -1) #[[ATTR2]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.v4f32(i32 0, i32 0, i32 0, i32 [[INVOCATIONID]], <4 x float> [[POSITION]]) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 0, i32 -1, float 2.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 1, i32 -1, float undef) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 0, i32 -1, float 2.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 1, i32 -1, float 1.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 1, i32 -1, float 2.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 1, i32 -1, float undef) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 1, i32 -1, float 2.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 1, i32 -1, float 3.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 2, i32 -1, float 4.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 2, i32 -1, float undef) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 2, i32 -1, float 4.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 2, i32 -1, float 3.000000e+00) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 3, i32 -1, float 1.000000e+01) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 3, i32 -1, float 1.000000e+01) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 3, i32 -1, float 1.200000e+01) #[[ATTR1]]
; CHECK1-NEXT:    call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 3, i32 -1, float undef) #[[ATTR1]]
; CHECK1-NEXT:    ret void
;
.entry:
  %Position = call <4 x float> @lgc.input.import.builtin.Position.v4f32.i32.i32.i32(i32 0, i32 -1, i32 0) #2
  %InvocationId = call i32 @lgc.input.import.builtin.InvocationId.i32.i32.i32.i32(i32 8, i32 -1, i32 -1) #2
  call void @lgc.output.export.generic.i32.i32.i32.i32.v4f32(i32 0, i32 0, i32 0, i32 %InvocationId, <4 x float> %Position) #1
  call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 0, i32 -1, float 2.000000e+00) #1
  call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 1, i32 -1, float undef) #1
  call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 0, i32 -1, float 2.000000e+00) #1
  call void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 11, i32 1, i32 -1, float 1.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 1, i32 -1, float 2.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 1, i32 -1, float undef) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 1, i32 -1, float 2.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 1, i32 -1, float 3.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 2, i32 -1, float 4.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 2, i32 -1, float undef) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 2, i32 -1, float 4.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 2, i32 -1, float 3.000000e+00) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 3, i32 -1, float 1.000000e+01) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 1, i32 0, i32 3, i32 -1, float 1.000000e+01) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 3, i32 -1, float 1.200000e+01) #1
  call void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 2, i32 0, i32 3, i32 -1, float undef) #1
  ret void
}

; Function Attrs: nounwind
declare void @lgc.output.export.generic.i32.i32.f32(i32 %0, i32 %1, float %2) #1

; Function Attrs: nounwind
declare void @lgc.output.export.builtin.Position.i32.v4f32(i32 %0, <4 x float> %1) #1

; Function Attrs: nounwind
declare void @lgc.output.export.builtin.TessLevelOuter.i32.i32.i32.f32(i32 %0, i32 %1, i32 %2, float %3) #1

; Function Attrs: nounwind willreturn memory(read)
declare <4 x float> @lgc.input.import.builtin.Position.v4f32.i32.i32.i32(i32 %0, i32 %1, i32 %2) #2

; Function Attrs: nounwind willreturn memory(read)
declare i32 @lgc.input.import.builtin.InvocationId.i32.i32.i32.i32(i32 %0, i32 %1, i32 %2) #2

; Function Attrs: nounwind
declare void @lgc.output.export.generic.i32.i32.v4f32(i32 %0, i32 %1, <4 x float> %2) #1

; Function Attrs: nounwind
declare void @lgc.output.export.generic.i32.i32.i32.i32.f32(i32 %0, i32 %1, i32 %2, i32 %3, float %4) #1

; Function Attrs: nounwind
declare void @lgc.output.export.generic.i32.i32.i32.i32.v4f32(i32 %0, i32 %1, i32 %2, i32 %3, <4 x float> %4) #1

; Function Attrs: nounwind willreturn memory(read)
declare float @lgc.input.import.builtin.TessLevelOuter.f32.i32.i32.i32(i32 %0, i32 %1, i32 %2) #2

attributes #0 = { alwaysinline nounwind "denormal-fp-math-f32"="preserve-sign" "target-features"=",+wavefrontsize64" }
attributes #1 = { nounwind }
attributes #2 = { nounwind willreturn memory(read) }
attributes #3 = { nounwind willreturn memory(none) }
attributes #4 = { "target-features"=",+wavefrontsize64" }

!lgc.client = !{!0}
!lgc.options = !{!1}
!lgc.options.VS = !{!2}
!lgc.options.TCS = !{!3}
!lgc.user.data.nodes = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17}
!lgc.input.assembly.state = !{!18}
!lgc.rasterizer.state = !{!19}
!amdgpu.pal.metadata.msgpack = !{!20}
!llpc.tcs.mode = !{!21}

!0 = !{!"Vulkan"}
!1 = !{i32 508543144, i32 -1032098044, i32 896427787, i32 -948777858, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 256, i32 256, i32 -1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16777216, i32 0, i32 0, i32 0, i32 65536, i32 0, i32 0, i32 0, i32 0, i32 256, i32 256}
!2 = !{i32 -1243396572, i32 -1672945329, i32 -1993252358, i32 -718371714, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!3 = !{i32 -310777470, i32 1140270792, i32 -1043142173, i32 -627491623, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!4 = !{i32 -825390044, i32 1262025594, i32 -412777296, i32 1953628532, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!5 = !{!"IndirectUserDataVaPtr", i32 8, i32 2, i32 0, i32 1, i32 0}
!6 = !{!"DescriptorTableVaPtr", i32 7, i32 14, i32 9, i32 1, i32 3}
!7 = !{!"DescriptorBufferCompact", i32 10, i32 14, i32 0, i32 2, i64 93, i32 17, i32 2}
!8 = !{!"DescriptorBuffer", i32 6, i32 14, i32 2, i32 8, i64 93, i32 0, i32 4}
!9 = !{!"DescriptorBuffer", i32 6, i32 14, i32 10, i32 8, i64 93, i32 1, i32 4}
!10 = !{!"StreamOutTableVaPtr", i32 11, i32 16, i32 2, i32 1, i32 0}
!11 = !{!"DescriptorTableVaPtr", i32 7, i32 14, i32 6, i32 1, i32 1}
!12 = !{!"DescriptorSampler", i32 2, i32 14, i32 0, i32 8192, i64 0, i32 0, i32 4}
!13 = !{!"DescriptorTableVaPtr", i32 7, i32 14, i32 7, i32 1, i32 2}
!14 = !{!"DescriptorBuffer", i32 6, i32 14, i32 0, i32 16, i64 1, i32 0, i32 4}
!15 = !{!"DescriptorMutable", i32 17, i32 14, i32 16, i32 8000000, i64 1, i32 1, i32 8}
!16 = !{!"DescriptorTableVaPtr", i32 7, i32 14, i32 8, i32 1, i32 1}
!17 = !{!"DescriptorMutable", i32 17, i32 14, i32 0, i32 8000000, i64 2, i32 0, i32 8}
!18 = !{i32 10}
!19 = !{i32 1}
!20 = !{!"\82\B0amdpal.pipelines\91\83\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CFS\9C]\90\16\8B\C8\FD\CF\C9\BE\A9g\07\B7\8B\B2\AD.llpc_version\A475.4\AEamdpal.version\92\03\00"}
!21 = !{i32 1, i32 0, i32 3, i32 0, i32 1, i32 1}
!22 = !{i32 0, i32 0, i32 3}
!23 = !{i32 0}
!24 = !{i32 2}

;.
; CHECK1: [[META18]] = !{i32 1}
; CHECK1: [[META21]] = !{i32 0}
; CHECK1: [[META22]] = !{i32 2}
;.
