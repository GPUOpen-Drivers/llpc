; Define a compute library that can be called from a compute shader.

; RUN: lgc -mcpu=gfx1010 -print-after=lgc-patch-entry-point-mutate -print-after=lgc-patch-prepare-pipeline-abi -print-after=lgc-patch-setup-target-features -o /dev/null 2>&1 - <%s | FileCheck --check-prefixes=CHECK %s
; CHECK: IR Dump After Patch LLVM for entry-point mutation
; CHECK: define amdgpu_gfx void @func(i32 inreg noundef %globalTable, ptr addrspace(4) inreg noundef %numWorkgroupsPtr, i32 inreg noundef %userdata0, i32 inreg noundef %userdata1, i32 inreg noundef %userdata2, i32 inreg noundef %userdata3, i32 inreg noundef %userdata4, i32 inreg noundef %userdata5, i32 inreg noundef %userdata6, i32 inreg noundef %userdata7, i32 inreg noundef %userdata8, i32 inreg noundef %userdata9, i32 inreg noundef %userdata10, i32 inreg noundef %userdata11, i32 inreg noundef %spillTable, <3 x i32> inreg noundef %WorkgroupId, i32 inreg noundef %MultiDispatchInfo, <3 x i32> noundef %LocalInvocationId) #0 !lgc.shaderstage !7 {
; CHECK: !7 = !{i32 7}
; CHECK: IR Dump After Patch LLVM for preparing pipeline ABI
; CHECK: define amdgpu_gfx void @func(i32 inreg noundef %globalTable, ptr addrspace(4) inreg noundef %numWorkgroupsPtr, i32 inreg noundef %userdata0, i32 inreg noundef %userdata1, i32 inreg noundef %userdata2, i32 inreg noundef %userdata3, i32 inreg noundef %userdata4, i32 inreg noundef %userdata5, i32 inreg noundef %userdata6, i32 inreg noundef %userdata7, i32 inreg noundef %userdata8, i32 inreg noundef %userdata9, i32 inreg noundef %userdata10, i32 inreg noundef %userdata11, i32 inreg noundef %spillTable, <3 x i32> inreg noundef %WorkgroupId, i32 inreg noundef %MultiDispatchInfo, <3 x i32> noundef %LocalInvocationId) #0 !lgc.shaderstage !7 {

; CHECK: IR Dump After Patch LLVM to set up target features
; CHECK: attributes #0 = { nounwind {{.*}}"amdgpu-flat-work-group-size"="6,6"

; ModuleID = 'lgcPipeline'
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn--amdpal"

; Function Attrs: nounwind
define spir_func void @func() local_unnamed_addr #0 !lgc.shaderstage !7 {
.entry:
  %0 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 2, i32 0, i32 2)
  %1 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 2)
  %2 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 1, i32 0, i32 2)
  %3 = load <4 x i32>, ptr addrspace(7) %2, align 16
  %4 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 1, i32 1, i32 2)
  %5 = load <4 x i32>, ptr addrspace(7) %4, align 16
  %6 = add <4 x i32> %3, %5
  %7 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 1, i32 2, i32 2)
  %8 = load <4 x i32>, ptr addrspace(7) %7, align 16
  %9 = add <4 x i32> %6, %8
  %10 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 1, i32 3, i32 2)
  %11 = load <4 x i32>, ptr addrspace(7) %10, align 16
  %12 = add <4 x i32> %9, %11
  %13 = load <4 x i32>, ptr addrspace(7) %0, align 16
  %14 = add <4 x i32> %12, %13
  store <4 x i32> %14, ptr addrspace(7) %1, align 16
  ret void
}

; Function Attrs: nounwind readonly
declare ptr addrspace(7) @lgc.load.buffer.desc(i64, i32, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly }

!llpc.compute.mode = !{!0}
!lgc.options = !{!1}
!lgc.options.CS = !{!2}
!lgc.user.data.nodes = !{!3, !4, !5, !6}

!0 = !{i32 2, i32 3, i32 1}
!1 = !{i32 2113342239, i32 1385488414, i32 -1007072744, i32 -815526592, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2}
!2 = !{i32 1792639877, i32 1348715323, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3}
!3 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i32 0, i32 0, i32 4}
!4 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 16, i32 0, i32 1, i32 4}
!5 = !{!"DescriptorTableVaPtr", i32 0, i32 0, i32 20, i32 1, i32 1}
!6 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i32 0, i32 2, i32 4}
!7 = !{i32 7}
