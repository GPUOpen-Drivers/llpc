; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -mcpu=gfx1010 -o - -passes=lgc-lower-debug-printf %s | FileCheck --check-prefixes=CHECK %s

; ModuleID = 'lgcPipeline'
source_filename = "llpc_compute_8"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn--amdpal"

@str.1 = internal addrspace(4) constant [10 x i8] c"Output:%d\0A"

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !spirv.ExecutionModel !7 !lgc.shaderstage !8 {
.entry:
  %0 = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #1
  %1 = mul <3 x i32> %0, <i32 1, i32 1, i32 1>
  %2 = call <3 x i32> @lgc.shader.input.LocalInvocationId(i32 47) #1
  %3 = insertelement <3 x i32> %2, i32 0, i64 1
  %4 = insertelement <3 x i32> %3, i32 0, i64 2
  %5 = call <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32> %4, i32 0) #1
  %6 = add <3 x i32> %1, %5
  %__llpc_input_proxy_gl_GlobalInvocationID.0.vec.extract = extractelement <3 x i32> %6, i64 0
  %7 = call ptr addrspace(4) @lgc.descriptor.table.addr(i32 6, i32 6, i32 -1, i32 6, i32 -1) #1
  %8 = getelementptr i8, ptr addrspace(4) %7, i32 0
  %9 = load <4 x i32>, ptr addrspace(4) %8, align 16
  %10 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %9)
  %11 = insertelement <2 x i32> poison, i32 0, i64 0
  %12 = insertelement <2 x i32> %11, i32 0, i64 1
  %13 = bitcast <2 x i32> %12 to i64
  call void (...) @lgc.debug.printf(ptr addrspace(7) %10, ptr addrspace(4) @str.1, i32 %__llpc_input_proxy_gl_GlobalInvocationID.0.vec.extract, i64 %13)
  ret void
}

; Function Attrs: nounwind
declare void @lgc.debug.printf(...) #0

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.shader.input.WorkgroupId(i32) #1

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.shader.input.LocalInvocationId(i32) #1

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32>, i32) #1

; Function Attrs: nounwind memory(none)
declare ptr addrspace(4) @lgc.descriptor.table.addr(i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind memory(none) }
attributes #2 = { nounwind willreturn memory(none) }

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}
!lgc.user.data.nodes = !{!4, !5}
!amdgpu.pal.metadata.msgpack = !{!6}

!0 = !{i32 1, i32 1, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 -158142355, i32 1527082450, i32 -1021507957, i32 -258612566, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2}
!3 = !{i32 -297365566, i32 -915288882, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!4 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 0, i32 1, i32 1}
!5 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i32 -1, i32 6, i32 4}
!6 = !{!"\82\B0amdpal.pipelines\91\84\AA.registers\80\B0.spill_threshold\CE\FF\FF\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CFIv3\E9\C4\9B\CEd\CF31\1AG\C6\99\D0\DE\AD.llpc_version\A461.0\AEamdpal.version\92\02\06"}
!7 = !{i32 5}
!8 = !{i32 7}
; CHECK-LABEL: @lgc.shader.CS.main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = mul <3 x i32> [[TMP0]], <i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP2:%.*]] = call <3 x i32> @lgc.shader.input.LocalInvocationId(i32 47) #[[ATTR1]]
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <3 x i32> [[TMP2]], i32 0, i64 1
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <3 x i32> [[TMP3]], i32 0, i64 2
; CHECK-NEXT:    [[TMP5:%.*]] = call <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32> [[TMP4]], i32 0) #[[ATTR1]]
; CHECK-NEXT:    [[TMP6:%.*]] = add <3 x i32> [[TMP1]], [[TMP5]]
; CHECK-NEXT:    [[__LLPC_INPUT_PROXY_GL_GLOBALINVOCATIONID_0_VEC_EXTRACT:%.*]] = extractelement <3 x i32> [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = call ptr addrspace(4) @lgc.descriptor.table.addr(i32 6, i32 6, i32 -1, i32 6, i32 -1) #[[ATTR1]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP7]], i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP8]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP9]])
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <2 x i32> poison, i32 0, i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i32> [[TMP11]], i32 0, i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <2 x i32> [[TMP12]] to i64
; CHECK-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i32
; CHECK-NEXT:    [[TMP15:%.*]] = lshr i64 [[TMP13]], 32
; CHECK-NEXT:    [[TMP16:%.*]] = trunc i64 [[TMP15]] to i32
; CHECK-NEXT:    [[TMP17:%.*]] = atomicrmw add ptr addrspace(7) [[TMP10]], i64 5 monotonic, align 8
; CHECK-NEXT:    [[TMP18:%.*]] = call i64 @llvm.umin.i64(i64 [[TMP17]], i64 536870912)
; CHECK-NEXT:    [[TMP19:%.*]] = trunc i64 [[TMP18]] to i32
; CHECK-NEXT:    [[TMP20:%.*]] = add i32 [[TMP19]], 4
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP10]], i32 [[TMP20]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP21]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = add i32 [[TMP20]], 1
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP10]], i32 [[TMP22]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP23]], align 4
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP22]], 1
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP10]], i32 [[TMP24]]
; CHECK-NEXT:    store i32 [[__LLPC_INPUT_PROXY_GL_GLOBALINVOCATIONID_0_VEC_EXTRACT]], ptr addrspace(7) [[TMP25]], align 4
; CHECK-NEXT:    [[TMP26:%.*]] = add i32 [[TMP24]], 1
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP10]], i32 [[TMP26]]
; CHECK-NEXT:    store i32 [[TMP14]], ptr addrspace(7) [[TMP27]], align 4
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP26]], 1
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP10]], i32 [[TMP28]]
; CHECK-NEXT:    store i32 [[TMP16]], ptr addrspace(7) [[TMP29]], align 4
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP28]], 1
; CHECK-NEXT:    ret void
;
