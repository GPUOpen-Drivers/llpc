; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -mcpu=gfx1010 -o - -passes=lgc-lower-debug-printf %s | FileCheck --check-prefixes=CHECK %s

; ModuleID = 'lgcPipeline'
source_filename = "llpc_compute_8"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn--amdpal"

@0 = private unnamed_addr constant [11 x i8] c"Output:%d\0A\00", align 1
@1 = private unnamed_addr constant [22 x i8] c"workgroup size:%f,%f\0A\00", align 1

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !spirv.ExecutionModel !7 !lgc.shaderstage !8 {
.entry:
  %0 = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #2
  %1 = mul <3 x i32> %0, <i32 1, i32 1, i32 1>
  %2 = call i32 @lgc.shader.input.LocalInvocationId(i32 49) #2
  %3 = and i32 %2, 1023
  %4 = insertelement <3 x i32> poison, i32 %3, i64 0
  %5 = lshr i32 %2, 10
  %6 = and i32 %5, 1023
  %7 = insertelement <3 x i32> %4, i32 %6, i64 1
  %8 = lshr i32 %5, 10
  %9 = insertelement <3 x i32> %7, i32 %8, i64 2
  %10 = insertelement <3 x i32> %9, i32 0, i64 1
  %11 = insertelement <3 x i32> %10, i32 0, i64 2
  %12 = call <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32> %11, i32 0) #2
  %13 = add <3 x i32> %1, %12
  %__llpc_input_proxy_gl_GlobalInvocationID.0.vec.extract = extractelement <3 x i32> %13, i64 0
  call void (...) @lgc.debug.printf(ptr nonnull @0, i32 %__llpc_input_proxy_gl_GlobalInvocationID.0.vec.extract)
  call void (...) @lgc.debug.printf(ptr nonnull @1, double 1.000000e+00, double 1.000000e+00)
  ret void
}

; Function Attrs: nounwind
declare void @lgc.debug.printf(...) #0

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.shader.input.WorkgroupId(i32) #1

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.shader.input.LocalInvocationId(i32) #1

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32>, i32) #1

; Function Attrs: nounwind memory(none)
declare ptr addrspace(4) @lgc.descriptor.table.addr(i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind memory(none) }
attributes #2 = { nounwind willreturn memory(none) }

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}
!lgc.user.data.nodes = !{!4, !5}
!amdgpu.pal.metadata.msgpack = !{!6}

!0 = !{i32 1, i32 1, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 -158142355, i32 1527082450, i32 -1021507957, i32 -258612566, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2}
!3 = !{i32 -297365566, i32 -915288882, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!4 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 0, i32 1, i32 1}
!5 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i32 -1, i32 6, i32 4}
!6 = !{!"\82\B0amdpal.pipelines\91\84\AA.registers\80\B0.spill_threshold\CE\FF\FF\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CFIv3\E9\C4\9B\CEd\CF31\1AG\C6\99\D0\DE\AD.llpc_version\A461.0\AEamdpal.version\92\02\06"}
!7 = !{i32 5}
!8 = !{i32 7}
; CHECK-LABEL: @lgc.shader.CS.main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP2]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <2 x i32> [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = inttoptr i64 [[TMP4]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP5]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP5]], i32 -1) ]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP5]], i32 0
; CHECK-NEXT:    [[TMP7:%.*]] = call ptr addrspace(7) @lgc.buffer.load.desc.to.ptr(ptr addrspace(4) [[TMP6]], i1 false, i1 false)
; CHECK-NEXT:    [[TMP8:%.*]] = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    [[TMP9:%.*]] = mul <3 x i32> [[TMP8]], <i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @lgc.shader.input.LocalInvocationId(i32 49) #[[ATTR2]]
; CHECK-NEXT:    [[TMP11:%.*]] = and i32 [[TMP10]], 1023
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <3 x i32> poison, i32 [[TMP11]], i64 0
; CHECK-NEXT:    [[TMP13:%.*]] = lshr i32 [[TMP10]], 10
; CHECK-NEXT:    [[TMP14:%.*]] = and i32 [[TMP13]], 1023
; CHECK-NEXT:    [[TMP15:%.*]] = insertelement <3 x i32> [[TMP12]], i32 [[TMP14]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = lshr i32 [[TMP13]], 10
; CHECK-NEXT:    [[TMP17:%.*]] = insertelement <3 x i32> [[TMP15]], i32 [[TMP16]], i64 2
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <3 x i32> [[TMP17]], i32 0, i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = insertelement <3 x i32> [[TMP18]], i32 0, i64 2
; CHECK-NEXT:    [[TMP20:%.*]] = call <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32> [[TMP19]], i32 0) #[[ATTR2]]
; CHECK-NEXT:    [[TMP21:%.*]] = add <3 x i32> [[TMP9]], [[TMP20]]
; CHECK-NEXT:    [[__LLPC_INPUT_PROXY_GL_GLOBALINVOCATIONID_0_VEC_EXTRACT:%.*]] = extractelement <3 x i32> [[TMP21]], i64 0
; CHECK-NEXT:    [[TMP22:%.*]] = atomicrmw add ptr addrspace(7) [[TMP7]], i64 3 monotonic, align 8
; CHECK-NEXT:    [[TMP23:%.*]] = call i64 @llvm.umin.i64(i64 [[TMP22]], i64 536870912)
; CHECK-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP23]] to i32
; CHECK-NEXT:    [[TMP25:%.*]] = add i32 [[TMP24]], 4
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP25]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP26]], align 4
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP25]], 1
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP27]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP28]], align 4
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP27]], 1
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP29]]
; CHECK-NEXT:    store i32 [[__LLPC_INPUT_PROXY_GL_GLOBALINVOCATIONID_0_VEC_EXTRACT]], ptr addrspace(7) [[TMP30]], align 4
; CHECK-NEXT:    [[TMP31:%.*]] = add i32 [[TMP29]], 1
; CHECK-NEXT:    [[TMP32:%.*]] = atomicrmw add ptr addrspace(7) [[TMP7]], i64 6 monotonic, align 8
; CHECK-NEXT:    [[TMP33:%.*]] = call i64 @llvm.umin.i64(i64 [[TMP32]], i64 536870912)
; CHECK-NEXT:    [[TMP34:%.*]] = trunc i64 [[TMP33]] to i32
; CHECK-NEXT:    [[TMP35:%.*]] = add i32 [[TMP34]], 4
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP35]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP36]], align 4
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP35]], 1
; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP37]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP38]], align 4
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[TMP37]], 1
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP39]]
; CHECK-NEXT:    store i32 0, ptr addrspace(7) [[TMP40]], align 4
; CHECK-NEXT:    [[TMP41:%.*]] = add i32 [[TMP39]], 1
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP41]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP42]], align 4
; CHECK-NEXT:    [[TMP43:%.*]] = add i32 [[TMP41]], 1
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP43]]
; CHECK-NEXT:    store i32 0, ptr addrspace(7) [[TMP44]], align 4
; CHECK-NEXT:    [[TMP45:%.*]] = add i32 [[TMP43]], 1
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr i32, ptr addrspace(7) [[TMP7]], i32 [[TMP45]]
; CHECK-NEXT:    store i32 {{-?[0-9]+}}, ptr addrspace(7) [[TMP46]], align 4
; CHECK-NEXT:    [[TMP47:%.*]] = add i32 [[TMP45]], 1
; CHECK-NEXT:    ret void
;
