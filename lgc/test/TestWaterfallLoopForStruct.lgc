; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -mcpu=gfx1010 -print-after=lgc-builder-replayer -o - %s 2>&1 | FileCheck --check-prefixes=CHECK %s
; ModuleID = 'lgcPipeline'
source_filename = "llpc_vertex_2"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8-p32:32:32"
target triple = "amdgcn--amdpal"

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.VS.main() local_unnamed_addr #0 !spirv.ExecutionModel !11 !lgc.shaderstage !1 {
.entry:
  %0 = call i32 (...) @lgc.create.read.generic.input__i32(i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
  %1 = call ptr addrspace(4) (...) @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 0)
  %2 = call i32 (...) @lgc.create.get.desc.stride__i32(i32 1, i32 1, i64 0, i32 0)
  %3 = insertvalue { ptr addrspace(4), i32, i32, i32 } poison, i32 %2, 1
  %4 = insertvalue { ptr addrspace(4), i32, i32, i32 } %3, i32 32, 2
  %5 = insertvalue { ptr addrspace(4), i32, i32, i32 } %4, i32 1, 3
  %6 = mul i32 %0, %2
  %7 = sext i32 %6 to i64
  %8 = getelementptr i8, ptr addrspace(4) %1, i64 %7
  %12 = call { <4 x float>, i32 } (...) @"lgc.create.image.load.s[v4f32,i32]"(i32 1, i32 8, ptr addrspace(4) %8, <2 x i32> <i32 1, i32 1>)
  %13 = extractvalue { <4 x float>, i32 } %12, 1
  %14 = extractvalue { <4 x float>, i32 } %12, 0
  %15 = icmp sgt i32 %13, 0
  %16 = select i1 %15, <4 x float> %14, <4 x float> zeroinitializer
  call void (...) @lgc.create.write.generic.output(<4 x float> %16, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
  ret void
}

declare spir_func void @spirv.NonUniform.i32(i32) local_unnamed_addr

; Function Attrs: nounwind memory(none)
declare ptr addrspace(4) @lgc.create.get.desc.ptr.p4(...) local_unnamed_addr #1

; Function Attrs: nounwind memory(none)
declare i32 @lgc.create.get.desc.stride__i32(...) local_unnamed_addr #1

declare spir_func void @"spirv.NonUniform.s[p4,i32,i32,i32]"({ ptr addrspace(4), i32, i32, i32 }) local_unnamed_addr

declare spir_func void @spirv.NonUniform.a3v8i32([3 x <8 x i32>]) local_unnamed_addr

; Function Attrs: nounwind willreturn memory(read)
declare { <4 x float>, i32 } @"lgc.create.image.load.s[v4f32,i32]"(...) local_unnamed_addr #2

; Function Attrs: nounwind willreturn memory(read)
declare i32 @lgc.create.read.generic.input__i32(...) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @lgc.create.write.generic.output(...) local_unnamed_addr #0

attributes #0 = { nounwind }
attributes #1 = { nounwind memory(none) }
attributes #2 = { nounwind willreturn memory(read) }

!lgc.client = !{!0}
!lgc.unlinked = !{!1}
!lgc.options = !{!2}
!lgc.options.VS = !{!3}
!lgc.user.data.nodes = !{!4, !5, !6, !7}
!lgc.vertex.inputs = !{!8}
!lgc.input.assembly.state = !{!9}
!amdgpu.pal.metadata.msgpack = !{!10}

!0 = !{!"Vulkan"}
!1 = !{i32 1}
!2 = !{i32 -1631706765, i32 -1916588938, i32 -1773735133, i32 -934651961, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 272, i32 0, i32 0, i32 1, i32 256, i32 256, i32 2, i32 1}
!3 = !{i32 40339196, i32 -259027446, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!4 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 0, i32 1, i32 1}
!5 = !{!"DescriptorResource", i32 1, i32 0, i32 0, i32 32, i64 0, i32 0, i32 8}
!6 = !{!"IndirectUserDataVaPtr", i32 8, i32 0, i32 1, i32 1, i32 256}
!7 = !{!"StreamOutTableVaPtr", i32 11, i32 0, i32 2, i32 1, i32 0}
!8 = !{i32 0, i32 0, i32 0, i32 16, i32 14, i32 5, i32 -1}
!9 = !{i32 3}
!10 = !{!"\82\B0amdpal.pipelines\91\83\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CF\B33?+-\ABJ6\CF\11\1E\AB\BB\05z\B9\B5\AD.llpc_version\A468.0\AEamdpal.version\92\03\00"}
!11 = !{i32 0}
!12 = !{}
; CHECK-LABEL: @lgc.shader.VS.main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @lgc.input.import.generic__i32(i1 false, i32 0, i32 0, i32 0, i32 poison)
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP3]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i32> [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP6]], i32 0
; CHECK-NEXT:    [[TMP8:%.*]] = insertvalue { ptr addrspace(4), i32, i32, i32 } poison, i32 32, 1
; CHECK-NEXT:    [[TMP9:%.*]] = insertvalue { ptr addrspace(4), i32, i32, i32 } [[TMP8]], i32 32, 2
; CHECK-NEXT:    [[TMP10:%.*]] = insertvalue { ptr addrspace(4), i32, i32, i32 } [[TMP9]], i32 1, 3
; CHECK-NEXT:    [[TMP11:%.*]] = mul i32 [[TMP2]], 32
; CHECK-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP7]], i64 [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP13]], align 32, !invariant.load !12
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP11]])
; CHECK-NEXT:    [[TMP16:%.*]] = call <8 x i32> @llvm.amdgcn.waterfall.readfirstlane.v8i32.v8i32(i32 [[TMP15]], <8 x i32> [[TMP14]])
; CHECK-NEXT:    [[TMP17:%.*]] = call { <4 x float>, i32 } @llvm.amdgcn.image.load.2d.sl_v4f32i32s.i32(i32 15, i32 1, i32 1, <8 x i32> [[TMP16]], i32 1, i32 0)
; CHECK-NEXT:    [[TMP18:%.*]] = extractvalue { <4 x float>, i32 } [[TMP17]], 0
; CHECK-NEXT:    [[TMP19:%.*]] = call <4 x float> @llvm.amdgcn.waterfall.end.v4f32(i32 [[TMP15]], <4 x float> [[TMP18]])
; CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { <4 x float>, i32 } [[TMP17]], 1
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.amdgcn.waterfall.end.i32(i32 [[TMP15]], i32 [[TMP20]])
; CHECK-NEXT:    [[TMP22:%.*]] = insertvalue { <4 x float>, i32 } poison, <4 x float> [[TMP19]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = insertvalue { <4 x float>, i32 } [[TMP22]], i32 [[TMP21]], 1
; CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { <4 x float>, i32 } [[TMP23]], 1
; CHECK-NEXT:    [[TMP25:%.*]] = extractvalue { <4 x float>, i32 } [[TMP23]], 0
; CHECK-NEXT:    [[TMP26:%.*]] = icmp sgt i32 [[TMP24]], 0
; CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], <4 x float> [[TMP25]], <4 x float> zeroinitializer
; CHECK-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP27]]) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    ret void
;
