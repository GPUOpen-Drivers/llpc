
; RUN: lgc %s -print-after=lgc-lower-desc -o /dev/null 2>&1 - <%s | FileCheck --check-prefixes=CHECK %s

; CHECK: call <2 x i32> @lgc.load.user.data__v2i32(i32 24)
; CHECK: call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>
; CHECK: [[varindex0:%[0-9]+]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>
; CHECK: [[varindex1:%[0-9]+]] = load i32, ptr addrspace(7) [[varindex0]], align 4
; CHECK-NEXT: [[varindex2:%[0-9]+]] = sext i32 [[varindex1]] to i64
; CHECK-NEXT: getelementptr <{ [4294967295 x float] }>, ptr addrspace(7) %{{.*}}, i64 0, i32 0, i64 [[varindex2]]
; CHECK: [[desc1lo:%[0-9]+]] = call i32 @lgc.load.user.data__i32(i32 4
; CHECK-NEXT: [[desc1vec:%[0-9]+]] = insertelement <2 x i32> %{{[^,]+}}, i32 [[desc1lo]], i64 0
; CHECK-NEXT: [[desc1lohi:%[0-9]+]] = bitcast <2 x i32> [[desc1vec]] to i64
; CHECK-NEXT: [[desc1:%[0-9]+]] = inttoptr i64 [[desc1lohi]] to ptr addrspace(4)
; CHECK-NEXT: %{{.*}} = getelementptr i8, ptr addrspace(4) [[desc1]], i32 32

; RUN: lgc -mcpu=gfx1030 -o - - <%s | FileCheck --check-prefixes=SHADER_TEST %s
; SHADER_TEST: s_and_b32 {{.*}}, s4, 0xffff
; SHADER_TEST: s_mov_b32 {{.*}}, 0x21014fac
; SHADER_TEST: s_mov_b32 {{.*}}, -1
; SHADER_TEST: s_load_dwordx8 [[desc:.*]], {{.*}}, 0x20
; SHADER_TEST: buffer_load_dword {{.*}}, {{.*}}, {{.*}}, 0 offen
; SHADER_TEST: image_sample {{.*}}, {{.*}}, [[desc]], {{.*}} dmask:0xf
; SHADER_TEST: s_load_dwordx4 {{.*}}, {{.*}}, 0x10
; SHADER_TEST: .hardware_stages:
; SHADER_TEST:  .ps:
; SHADER_TEST:   .user_data_reg_map:
; SHADER_TEST:     - 0x10000000
; SHADER_TEST:     - 0
; SHADER_TEST:     - 0x1
; SHADER_TEST:     - 0x6
; SHADER_TEST:     - 0x7
; SHADER_TEST:     - 0x10000002
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff
; SHADER_TEST:     - 0xffffffff

; ModuleID = 'lgcPipeline'
source_filename = "lgcPipeline"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn--amdpal"

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.VS.VSMain() local_unnamed_addr #0 !spirv.ExecutionModel !16 !lgc.shaderstage !17 {
.entry:
  ret void
}

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.FS.PSMain() local_unnamed_addr #0 !spirv.ExecutionModel !18 !lgc.shaderstage !19 {
.entry:
  %0 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 2684354560, i32 1, i32 0, i32 0)
  %1 = call {}* @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) %0)
  %2 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 3758096384, i32 1, i32 0, i32 2)
  %3 = bitcast i8 addrspace(7)* %2 to <{ [4294967295 x float] }> addrspace(7)*
  %4 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 2684354560, i32 3, i32 0, i32 0)
  %5 = call {}* @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) %4)
  %6 = call <2 x float> (...) @lgc.create.read.generic.input__v2f32(i32 0, i32 0, i32 0, i32 0, i32 16, i32 poison)
  %7 = load i32, ptr addrspace(7) %4, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr <{ [4294967295 x float] }>, ptr addrspace(7) %2, i64 0, i32 0, i64 %8
  %10 = load float, float addrspace(7)* %9, align 4
  %11 = getelementptr inbounds i8, ptr addrspace(7) %0, i64 64
  %12 = load float, ptr addrspace(7) %11, align 4
  %13 = fmul reassoc nnan nsz arcp contract afn float %10, %12
  %14 = call ptr addrspace(4) (...) @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 3221225472, i32 1)
  %15 = call i32 (...) @lgc.create.get.desc.stride__i32(i32 1, i32 1, i64 3221225472, i32 1)
  %17 = call ptr addrspace(4) (...) @lgc.create.get.desc.ptr.p4(i32 2, i32 2, i64 2147483648, i32 0)
  %18 = call i32 (...) @lgc.create.get.desc.stride__i32(i32 2, i32 2, i64 2147483648, i32 0)
  %20 = call reassoc nnan nsz arcp contract afn <4 x float> (...) @lgc.create.image.sample__v4f32(i32 1, i32 512, ptr addrspace(4) %14, ptr addrspace(4) %17, i32 1, <2 x float> %6)
  %.splatinsert = insertelement <4 x float> poison, float %13, i64 0
  %21 = shufflevector <4 x float> %.splatinsert, <4 x float> poison, <4 x i32> zeroinitializer
  %scale = fmul reassoc nnan nsz arcp contract afn <4 x float> %20, %21
  call void (...) @lgc.create.write.generic.output(<4 x float> %scale, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare ptr addrspace(7) @lgc.load.buffer.desc(i64, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare {}* @llvm.invariant.start.p7(i64 immarg, ptr addrspace(7) nocapture) #2

; Function Attrs: nounwind readonly willreturn
declare <2 x float> @lgc.create.read.generic.input__v2f32(...) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare ptr addrspace(4) @lgc.create.get.desc.ptr.p4(...) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32 @lgc.create.get.desc.stride__i32(...) local_unnamed_addr #3

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @lgc.create.image.sample__v4f32(...) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @lgc.create.write.generic.output(...) local_unnamed_addr #0

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly willreturn }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { nounwind readnone }

!lgc.client = !{!0}
!lgc.options = !{!1}
!lgc.options.VS = !{!2}
!lgc.options.FS = !{!3}
!lgc.user.data.nodes = !{!4, !5, !6, !7, !8, !9, !10, !11, !12}
!lgc.color.export.formats = !{!13}
!lgc.input.assembly.state = !{!14}
!amdgpu.pal.metadata.msgpack = !{!15}

!0 = !{!"Vulkan"}
!1 = !{i32 477725446, i32 -860388617, i32 -1158977777, i32 1830480465, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1}
!2 = !{i32 -64684466, i32 1801624907, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!3 = !{i32 -1829766609, i32 -657263028, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!4 = !{!"DescriptorTableVaPtr", i32 0, i32 0, i32 0, i32 1, i32 1}
!5 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 8, i64 2684354560, i32 0, i32 4}
!6 = !{!"DescriptorTableVaPtr", i32 0, i32 0, i32 1, i32 1, i32 2}
!7 = !{!"DescriptorResource", i32 1, i32 0, i32 0, i32 16, i64 3221225472, i32 0, i32 8}
!8 = !{!"DescriptorSampler", i32 2, i32 0, i32 16, i32 4, i64 2147483648, i32 0, i32 4}
!9 = !{!"InlineBuffer", i32 14, i32 0, i32 2, i32 1, i64 2684354560, i32 3, i32 4}
!10 = !{!"InlineBuffer", i32 14, i32 0, i32 3, i32 1, i64 2684354560, i32 4, i32 4}
!11 = !{!"DescriptorBufferCompact", i32 10, i32 0, i32 4, i32 4, i64 3758096384, i32 0, i32 2}
!12 = !{!"IndirectUserDataVaPtr", i32 0, i32 0, i32 7, i32 1, i32 0}
!13 = !{i32 16, i32 0, i32 0, i32 0, i32 15}
!14 = !{i32 3, i32 3}
!15 = !{!"\82\B0amdpal.pipelines\91\84\AA.registers\80\B0.spill_threshold\CE\FF\FF\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CF\9B\97\D5d\9F\E5\B7\11\CF\E9#\B4W\05\EA\C6\A7\AD.llpc_version\A453.5\AEamdpal.version\92\02\03"}
!16 = !{i32 0}
!17 = !{i32 1}
!18 = !{i32 4}
!19 = !{i32 6}
