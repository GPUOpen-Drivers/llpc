; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes='require<lgc-pipeline-state>,function(lgc-combine-cooperative-matrix)' %s | FileCheck --check-prefixes=CHECK %s

define <8 x float> @transpose_undef() {
; CHECK-LABEL: @transpose_undef(
; CHECK-NEXT:    ret <8 x float> undef
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> undef, i32 1, i32 0)
  ret <8 x float> %r
}

define <8 x float> @transpose_poison() {
; CHECK-LABEL: @transpose_poison(
; CHECK-NEXT:    ret <8 x float> poison
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> poison, i32 1, i32 0)
  ret <8 x float> %r
}

define <8 x float> @transpose_zero() {
; CHECK-LABEL: @transpose_zero(
; CHECK-NEXT:    ret <8 x float> zeroinitializer
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> zeroinitializer, i32 1, i32 0)
  ret <8 x float> %r
}

define <8 x float> @relayout_undef() {
; CHECK-LABEL: @relayout_undef(
; CHECK-NEXT:    ret <8 x float> undef
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> undef, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %r
}

define <8 x float> @relayout_poison() {
; CHECK-LABEL: @relayout_poison(
; CHECK-NEXT:    ret <8 x float> poison
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> poison, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %r
}

define <8 x float> @relayout_zero() {
; CHECK-LABEL: @relayout_zero(
; CHECK-NEXT:    ret <8 x float> zeroinitializer
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> zeroinitializer, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %r
}

define <8 x float> @fptrunc_undef() {
; CHECK-LABEL: @fptrunc_undef(
; CHECK-NEXT:    [[R:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 45, <8 x float> undef, i32 2, i32 1, i32 0, i32 0)
; CHECK-NEXT:    ret <8 x float> [[R]]
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 45, <8 x float> undef, i32 2, i32 1, i32 0, i32 0)
  ret <8 x float> %r
}

define <8 x float> @fptrunc_poison() {
; CHECK-LABEL: @fptrunc_poison(
; CHECK-NEXT:    ret <8 x float> poison
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 45, <8 x float> poison, i32 2, i32 1, i32 0, i32 0)
  ret <8 x float> %r
}

define <8 x float> @fptrunc_zero() {
; CHECK-LABEL: @fptrunc_zero(
; CHECK-NEXT:    ret <8 x float> zeroinitializer
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 45, <8 x float> zeroinitializer, i32 2, i32 1, i32 0, i32 0)
  ret <8 x float> %r
}

define <8 x float> @fpext_undef() {
; CHECK-LABEL: @fpext_undef(
; CHECK-NEXT:    [[R:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 46, <8 x float> undef, i32 1, i32 2, i32 0, i32 0)
; CHECK-NEXT:    ret <8 x float> [[R]]
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 46, <8 x float> undef, i32 1, i32 2, i32 0, i32 0)
  ret <8 x float> %r
}

define <8 x float> @fpext_poison() {
; CHECK-LABEL: @fpext_poison(
; CHECK-NEXT:    ret <8 x float> poison
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 46, <8 x float> poison, i32 1, i32 2, i32 0, i32 0)
  ret <8 x float> %r
}

define <8 x float> @fpext_zero() {
; CHECK-LABEL: @fpext_zero(
; CHECK-NEXT:    ret <8 x float> zeroinitializer
;
  %r = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 46, <8 x float> zeroinitializer, i32 1, i32 2, i32 0, i32 0)
  ret <8 x float> %r
}

define <8 x i32> @trunc_undef() {
; CHECK-LABEL: @trunc_undef(
; CHECK-NEXT:    [[R:%.*]] = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 38, <8 x i32> undef, i32 5, i32 4, i32 0, i32 0)
; CHECK-NEXT:    ret <8 x i32> [[R]]
;
  %r = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 38, <8 x i32> undef, i32 5, i32 4, i32 0, i32 0)
  ret <8 x i32> %r
}

define <8 x i32> @trunc_poison() {
; CHECK-LABEL: @trunc_poison(
; CHECK-NEXT:    ret <8 x i32> poison
;
  %r = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 38, <8 x i32> poison, i32 5, i32 4, i32 0, i32 0)
  ret <8 x i32> %r
}

define <8 x i32> @trunc_zero() {
; CHECK-LABEL: @trunc_zero(
; CHECK-NEXT:    ret <8 x i32> zeroinitializer
;
  %r = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 38, <8 x i32> zeroinitializer, i32 5, i32 4, i32 0, i32 0)
  ret <8 x i32> %r
}

define <8 x i32> @zext_undef() {
; CHECK-LABEL: @zext_undef(
; CHECK-NEXT:    [[R:%.*]] = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 39, <8 x i32> undef, i32 4, i32 5, i32 0, i32 0)
; CHECK-NEXT:    ret <8 x i32> [[R]]
;
  %r = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 39, <8 x i32> undef, i32 4, i32 5, i32 0, i32 0)
  ret <8 x i32> %r
}

define <8 x i32> @zext_poison() {
; CHECK-LABEL: @zext_poison(
; CHECK-NEXT:    ret <8 x i32> poison
;
  %r = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 39, <8 x i32> poison, i32 4, i32 5, i32 0, i32 0)
  ret <8 x i32> %r
}

define <8 x i32> @zext_zero() {
; CHECK-LABEL: @zext_zero(
; CHECK-NEXT:    ret <8 x i32> zeroinitializer
;
  %r = call <8 x i32> (...) @lgc.cooperative.matrix.convert__v8i32(i32 39, <8 x i32> zeroinitializer, i32 4, i32 5, i32 0, i32 0)
  ret <8 x i32> %r
}

declare <8 x float> @lgc.cooperative.matrix.transpose__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.convert__v8f32(...)
declare <8 x i32> @lgc.cooperative.matrix.convert__v8i32(...)
