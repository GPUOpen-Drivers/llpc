; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes='require<lgc-pipeline-state>,function(lgc-combine-cooperative-matrix)' %s | FileCheck --check-prefixes=CHECK %s

define <8 x float> @noop_transpose(<8 x float> %x) {
; CHECK-LABEL: @noop_transpose(
; CHECK-NEXT:    [[T:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> [[X:%.*]], i32 1, i32 0)
; CHECK-NEXT:    ret <8 x float> [[T]]
;

  %t = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %x, i32 1, i32 0)
  ret <8 x float> %t
}

define <8 x float> @collapse_transpose(<8 x float> %x) {
; CHECK-LABEL: @collapse_transpose(
; CHECK-NEXT:    ret <8 x float> [[X:%.*]]
;

  %t1 = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %x, i32 1, i32 0)
  %t2 = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %t1, i32 1, i32 0)
  ret <8 x float> %t2
}

define <8 x float> @test_load_transpose(ptr addrspace(3) %ptr) {
; CHECK-LABEL: @test_load_transpose(
; CHECK-NEXT:    [[A:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(3) [[PTR:%.*]], i32 4, i1 false, i32 1, i32 0, i32 0)
; CHECK-NEXT:    ret <8 x float> [[A]]
;

  %a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(3) %ptr, i32 4, i1 true, i32 1, i32 0, i32 0)
  %t = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %a, i32 1, i32 0)
  ret <8 x float> %t
}

define void @test_store_transpose(ptr addrspace(3) %ptr, <8 x float> %a) {
; CHECK-LABEL: @test_store_transpose(
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr addrspace(3) [[PTR:%.*]], i32 4, i1 false, i32 1, i32 0, i32 0, i32 16, <8 x float> [[A:%.*]])
; CHECK-NEXT:    ret void
;

  %t = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %a, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(3) %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %t)
  ret void
}

define void @test_phi_transpose(ptr addrspace(7) %ptr, <8 x float> %init) {
; CHECK-LABEL: @test_phi_transpose(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> [[INIT:%.*]], i32 1, i32 0)
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[MATRIX:%.*]] = phi <8 x float> [ [[TMP0]], [[ENTRY:%.*]] ], [ [[TMP:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[TMP]] = call <8 x float> @process1(<8 x float> [[MATRIX]])
; CHECK-NEXT:    [[CC:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[CC]], label [[LOOP]], label [[END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) [[PTR:%.*]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[TMP]])
; CHECK-NEXT:    ret void
;
entry:
  br label %loop

loop:
  %matrix = phi <8 x float> [ %init, %entry ], [ %matrix.new, %loop ]
  %t1 = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %matrix, i32 1, i32 0)
  %tmp = call <8 x float> @process1(<8 x float> %t1)
  %matrix.new = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %tmp, i32 1, i32 0)

  %cc = call i1 @getcc()
  br i1 %cc, label %loop, label %end

end:
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 4, i1 false, i32 1, i32 0, i32 0, i32 16, <8 x float> %matrix.new)
  ret void
}

define <8 x float> @test_relayout_simple(<8 x float> %ab) {
; CHECK-LABEL: @test_relayout_simple(
; CHECK-NEXT:    ret <8 x float> [[AB:%.*]]
;
  %b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %ab, i32 1, i32 1, i32 0, i32 1)
  %c = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %b, i32 1, i32 1, i32 1, i32 0)
  ret <8 x float> %c
}

define <8 x float> @test_relayout_simple_reverse(<8 x float> %cd) {
; CHECK-LABEL: @test_relayout_simple_reverse(
; CHECK-NEXT:    ret <8 x float> [[CD:%.*]]
;
  %b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %cd, i32 1, i32 1, i32 1, i32 0)
  %c = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %b, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %c
}

define <8 x float> @test_relayout_load(ptr addrspace(3) %ptr) {
; CHECK-LABEL: @test_relayout_load(
; CHECK-NEXT:    [[A:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(3) [[PTR:%.*]], i32 4, i1 true, i32 1, i32 1, i32 0)
; CHECK-NEXT:    ret <8 x float> [[A]]
;
  %a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(3) %ptr, i32 4, i1 true, i32 1, i32 0, i32 0)
  %b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %a, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %b
}

define <8 x float> @test_relayout_load2(ptr addrspace(3) %ptr) {
; CHECK-LABEL: @test_relayout_load2(
; CHECK-NEXT:    [[A:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(3) [[PTR:%.*]], i32 4, i1 true, i32 1, i32 0, i32 0)
; CHECK-NEXT:    ret <8 x float> [[A]]
;
  %a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(3) %ptr, i32 4, i1 true, i32 1, i32 1, i32 0)
  %b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %a, i32 1, i32 1, i32 1, i32 0)
  ret <8 x float> %b
}

define void @test_relayout_store(ptr addrspace(3) %ptr, <8 x float> %a) {
; CHECK-LABEL: @test_relayout_store(
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr addrspace(3) [[PTR:%.*]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[A:%.*]])
; CHECK-NEXT:    ret void
;
  %b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %a, i32 1, i32 1, i32 0, i32 1)
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(3) %ptr, i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> %b)
  ret void
}

define void @test_relayout_store2(ptr addrspace(3) %ptr, <8 x float> %a) {
; CHECK-LABEL: @test_relayout_store2(
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr addrspace(3) [[PTR:%.*]], i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> [[A:%.*]])
; CHECK-NEXT:    ret void
;
  %b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %a, i32 1, i32 1, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(3) %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %b)
  ret void
}

declare i1 @getcc()
declare <8 x float> @process1(<8 x float>)

declare <8 x float> @lgc.cooperative.matrix.load__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.transpose__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.convert__v8f32(...)
declare void @lgc.cooperative.matrix.store(...)
