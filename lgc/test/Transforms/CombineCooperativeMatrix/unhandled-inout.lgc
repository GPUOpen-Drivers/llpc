; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
; RUN: lgc -o - -passes='require<lgc-pipeline-state>,function(lgc-combine-cooperative-matrix)' %s | FileCheck --check-prefixes=CHECK %s

define <8 x float> @insert_transpose(<8 x float> %x) {
; CHECK-LABEL: define <8 x float> @insert_transpose
; CHECK-SAME: (<8 x float> [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GUARD:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[GUARD]], label [[LOOP:%.*]], label [[END:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[V_LOOP:%.*]] = phi <8 x float> [ [[X]], [[ENTRY:%.*]] ], [ [[MULADD:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[F:%.*]] = call <8 x float> @getmat1()
; CHECK-NEXT:    [[MULADD]] = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> [[F]], <8 x float> [[F]], <8 x float> [[V_LOOP]], i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
; CHECK-NEXT:    [[CC:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[CC]], label [[LOOP]], label [[END]]
; CHECK:       end:
; CHECK-NEXT:    [[R:%.*]] = phi <8 x float> [ [[MULADD]], [[LOOP]] ], [ [[X]], [[ENTRY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> [[R]], i32 1, i32 0)
; CHECK-NEXT:    ret <8 x float> [[TMP0]]
;
entry:
  %in.t = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %x, i32 1, i32 0)
  %guard = call i1 @getcc()
  br i1 %guard, label %loop, label %end

loop:
  %v.loop = phi <8 x float> [ %in.t, %entry ], [ %v.next, %loop ]

  %f = call <8 x float> @getmat1()
  %pre.t = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %v.loop, i32 1, i32 0)
  %muladd = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> %f, <8 x float> %f, <8 x float> %pre.t, i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
  %v.next = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %muladd, i32 1, i32 0)

  %cc = call i1 @getcc()
  br i1 %cc, label %loop, label %end

end:
  %r = phi <8 x float> [ %v.next, %loop ], [ %in.t, %entry ]
  ret <8 x float> %r
}

define <8 x float> @reuse_transpose(<8 x float> %x) {
; CHECK-LABEL: define <8 x float> @reuse_transpose
; CHECK-SAME: (<8 x float> [[X:%.*]]) {
; CHECK-NEXT:    [[T1:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> [[X]], i32 1, i32 0)
; CHECK-NEXT:    [[R:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> [[T1]], <8 x float> [[X]], <8 x float> zeroinitializer, i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
; CHECK-NEXT:    ret <8 x float> [[R]]
;
  %t1 = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %x, i32 1, i32 0)
  %t2 = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %t1, i32 1, i32 0)
  %r = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> %t1, <8 x float> %t2, <8 x float> zeroinitializer, i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
  ret <8 x float> %r
}

; NOTE: This test leaves a convert inside the loop. Rely on other passes to sink it out.
define <8 x float> @insert_convert(ptr %ptr) {
; CHECK-LABEL: define <8 x float> @insert_convert
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 false, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[GUARD:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[GUARD]], label [[LOOP:%.*]], label [[END:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[V_LOOP:%.*]] = phi <8 x float> [ [[LOAD]], [[ENTRY:%.*]] ], [ [[MULADD:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[F:%.*]] = call <8 x float> @getmat1()
; CHECK-NEXT:    [[MULADD]] = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> [[F]], <8 x float> [[F]], <8 x float> [[V_LOOP]], i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
; CHECK-NEXT:    [[CC:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[CC]], label [[LOOP]], label [[END]]
; CHECK:       end:
; CHECK-NEXT:    [[R:%.*]] = phi <8 x float> [ [[MULADD]], [[LOOP]] ], [ [[LOAD]], [[ENTRY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> [[R]], i32 1, i32 1, i32 1, i32 0)
; CHECK-NEXT:    ret <8 x float> [[TMP0]]
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 0, i32 0)
  %guard = call i1 @getcc()
  br i1 %guard, label %loop, label %end

loop:
  %v.loop = phi <8 x float> [ %load, %entry ], [ %v.next, %loop ]

  %f = call <8 x float> @getmat1()
  %pre = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %v.loop, i32 1, i32 1, i32 0, i32 1)
  %muladd = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> %f, <8 x float> %f, <8 x float> %pre, i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
  %v.next = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %muladd, i32 1, i32 1, i32 1, i32 0)

  %cc = call i1 @getcc()
  br i1 %cc, label %loop, label %end

end:
  %r = phi <8 x float> [ %v.next, %loop ], [ %load, %entry ]
  ret <8 x float> %r
}

define <8 x float> @reuse_convert(<8 x float> %x) {
; CHECK-LABEL: define <8 x float> @reuse_convert
; CHECK-SAME: (<8 x float> [[X:%.*]]) {
; CHECK-NEXT:    [[CVT1:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> [[X]], i32 1, i32 1, i32 0, i32 1)
; CHECK-NEXT:    [[R:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> [[X]], <8 x float> [[X]], <8 x float> [[CVT1]], i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
; CHECK-NEXT:    ret <8 x float> [[R]]
;
  %cvt1 = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %x, i32 1, i32 1, i32 0, i32 1)
  %cvt2 = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %cvt1, i32 1, i32 1, i32 1, i32 0)
  %r = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> %cvt2, <8 x float> %cvt2, <8 x float> %cvt1, i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
  ret <8 x float> %r
}

define void @convert_to_acc_inner_binop(ptr %ptr0, ptr %ptr1) {
; CHECK-LABEL: define void @convert_to_acc_inner_binop
; CHECK-SAME: (ptr [[PTR0:%.*]], ptr [[PTR1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD_A:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR0]], i32 4, i1 false, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[LOAD_B:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR1]], i32 4, i1 false, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[LOAD_A]], <8 x float> [[LOAD_B]], i32 1, i32 1)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR0]], i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> [[BINOP]])
; CHECK-NEXT:    ret void
;
entry:
  %load.a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr0, i32 4, i1 false, i32 1, i32 0, i32 0)
  %load.b = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr1, i32 4, i1 false, i32 1, i32 0, i32 0)
  %conv.a = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %load.a, i32 1, i32 1, i32 0, i32 1)
  %conv.b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %load.b, i32 1, i32 1, i32 0, i32 1)
  %binop =  call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %conv.a, <8 x float> %conv.b, i32 1, i32 1)
  %conv.post = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %binop, i32 1, i32 1, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr0, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %conv.post)
  ret void
}

define void @convert_to_acc_inner_times_scalar(ptr %ptr) {
; CHECK-LABEL: define void @convert_to_acc_inner_times_scalar
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 false, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[SCALAR:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[LOAD]], half 0xH310F, i32 1, i32 0)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[SCALAR]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 0, i32 0)
  %conv.pre = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %load, i32 1, i32 1, i32 0, i32 1)
  %scalar =  call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %conv.pre, half 0xH310F, i32 1, i32 1)
  %conv.post = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %scalar, i32 1, i32 1, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %conv.post)
  ret void
}

define void @convert_to_fact_inner_binop(ptr %ptr0, ptr %ptr1) {
; CHECK-LABEL: define void @convert_to_fact_inner_binop
; CHECK-SAME: (ptr [[PTR0:%.*]], ptr [[PTR1:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD_A:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR0]], i32 4, i1 false, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[LOAD_B:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR1]], i32 4, i1 false, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[LOAD_A]], <8 x float> [[LOAD_B]], i32 1, i32 0)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR0]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[BINOP]])
; CHECK-NEXT:    ret void
;
entry:
  %load.a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr0, i32 4, i1 false, i32 1, i32 1, i32 0)
  %load.b = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr1, i32 4, i1 false, i32 1, i32 1, i32 0)
  %conv.a = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %load.a, i32 1, i32 1, i32 1, i32 0)
  %conv.b = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %load.b, i32 1, i32 1, i32 1, i32 0)
  %binop =  call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %conv.a, <8 x float> %conv.b, i32 1, i32 0)
  %conv.post = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %binop, i32 1, i32 1, i32 0, i32 1)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr0, i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> %conv.post)
  ret void
}

define void @convert_to_fact_inner_times_scalar(ptr %ptr) {
; CHECK-LABEL: define void @convert_to_fact_inner_times_scalar
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 false, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[SCALAR:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[LOAD]], half 0xH310F, i32 1, i32 1)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> [[SCALAR]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 1, i32 0)
  %conv.pre = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %load, i32 1, i32 1, i32 1, i32 0)
  %scalar =  call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %conv.pre, half 0xH310F, i32 1, i32 0)
  %conv.post = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %scalar, i32 1, i32 1, i32 0, i32 1)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> %conv.post)
  ret void
}

define void @convert_to_acc_inner_chain(ptr %ptr) {
; CHECK-LABEL: define void @convert_to_acc_inner_chain
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 false, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[GUARD:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[GUARD]], label [[LOOP:%.*]], label [[END:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[V_LOOP:%.*]] = phi <8 x float> [ [[LOAD]], [[ENTRY:%.*]] ], [ [[SCALAR:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[F:%.*]] = call <8 x float> @getmat1()
; CHECK-NEXT:    [[MULADD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> [[F]], <8 x float> [[F]], <8 x float> [[V_LOOP]], i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[MULADD]], <8 x float> [[MULADD]], i32 1, i32 1)
; CHECK-NEXT:    [[SCALAR]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[BINOP]], half 0xH310F, i32 1, i32 1)
; CHECK-NEXT:    [[CC:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[CC]], label [[LOOP]], label [[END]]
; CHECK:       end:
; CHECK-NEXT:    [[PHI_END:%.*]] = phi <8 x float> [ [[SCALAR]], [[LOOP]] ], [ [[LOAD]], [[ENTRY]] ]
; CHECK-NEXT:    [[SCALAR_END:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[PHI_END]], half 0xH312F, i32 1, i32 1)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> [[SCALAR_END]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 0, i32 0)
  %guard = call i1 @getcc()
  br i1 %guard, label %loop, label %end

loop:
  %v.loop = phi <8 x float> [ %load, %entry ], [ %v.next, %loop ]

  %f = call <8 x float> @getmat1()
  %pre = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %v.loop, i32 1, i32 1, i32 0, i32 1)
  %muladd = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x float> %f, <8 x float> %f, <8 x float> %pre, i1 true, i1 true, i1 false, i1 false, i32 1, i32 1)
  %binop = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %muladd, <8 x float> %muladd, i32 1, i32 1)
  %scalar = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %binop, half 0xH310F, i32 1, i32 1)
  %v.next = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %scalar, i32 1, i32 1, i32 1, i32 0)

  %cc = call i1 @getcc()
  br i1 %cc, label %loop, label %end

end:
  %phi.end = phi <8 x float> [ %v.next, %loop ], [ %load, %entry ]
  %scalar.end = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %phi.end, half 0xH312F, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %scalar.end)
  ret void
}

define void @convert_to_fact_inner_chain(ptr %ptr) {
; CHECK-LABEL: define void @convert_to_fact_inner_chain
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 false, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[GUARD:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[GUARD]], label [[LOOP:%.*]], label [[END:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[V_LOOP:%.*]] = phi <8 x float> [ [[LOAD]], [[ENTRY:%.*]] ], [ [[SCALAR:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[F:%.*]] = call <8 x float> @getmat1()
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[V_LOOP]], <8 x float> [[V_LOOP]], i32 1, i32 0)
; CHECK-NEXT:    [[SCALAR]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[BINOP]], half 0xH310F, i32 1, i32 0)
; CHECK-NEXT:    [[CC:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[CC]], label [[LOOP]], label [[END]]
; CHECK:       end:
; CHECK-NEXT:    [[PHI_END:%.*]] = phi <8 x float> [ [[SCALAR]], [[LOOP]] ], [ [[LOAD]], [[ENTRY]] ]
; CHECK-NEXT:    [[SCALAR_END:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[PHI_END]], half 0xH312F, i32 1, i32 0)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[SCALAR_END]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 1, i32 0)
  %guard = call i1 @getcc()
  br i1 %guard, label %loop, label %end

loop:
  %v.loop = phi <8 x float> [ %load, %entry ], [ %v.next, %loop ]

  %f = call <8 x float> @getmat1()
  %pre = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %v.loop, i32 1, i32 1, i32 1, i32 0)
  %binop = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %pre, <8 x float> %pre, i32 1, i32 0)
  %scalar =  call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %binop, half 0xH310F, i32 1, i32 0)
  %v.next = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %scalar, i32 1, i32 1, i32 0, i32 1)

  %cc = call i1 @getcc()
  br i1 %cc, label %loop, label %end

end:
  %phi.end = phi <8 x float> [ %v.next, %loop ], [ %load, %entry ]
  %scalar.end = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %phi.end, half 0xH312F, i32 1, i32 1)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> %scalar.end)
  ret void
}

define void @transpose_fact_inner_binop(ptr %ptr) {
; CHECK-LABEL: define void @transpose_fact_inner_binop
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[LOAD]], <8 x float> [[LOAD]], i32 1, i32 0)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[LOAD]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 0, i32 0)
  %trans.pre = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %load, i32 1, i32 0)
  %binop =  call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %trans.pre, <8 x float> %trans.pre, i32 1, i32 0)
  %trans.post = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %load, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %trans.post)
  ret void
}

define void @transpose_acc_inner_binop(ptr %ptr) {
; CHECK-LABEL: define void @transpose_acc_inner_binop
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 true, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[LOAD]], <8 x float> [[LOAD]], i32 1, i32 1)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> [[LOAD]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 1, i32 0)
  %trans.pre = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %load, i32 1, i32 1)
  %binop =  call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %trans.pre, <8 x float> %trans.pre, i32 1, i32 1)
  %trans.post = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %load, i32 1, i32 1)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 1, i32 0, i32 16, <8 x float> %trans.post)
  ret void
}

define void @transpose_fact_inner_times_scalar(ptr %ptr) {
; CHECK-LABEL: define void @transpose_fact_inner_times_scalar
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[SCALAR:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[LOAD]], half 0xH310F, i32 1, i32 0)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[SCALAR]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 0, i32 0)
  %trans.pre = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %load, i32 1, i32 0)
  %scalar =  call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %trans.pre, half 0xH310F, i32 1, i32 0)
  %trans.post = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %scalar, i32 1, i32 1, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %trans.post)
  ret void
}

define void @transpose_acc_inner_times_scalar(ptr %ptr) {
; CHECK-LABEL: define void @transpose_acc_inner_times_scalar
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 true, i32 1, i32 1, i32 0)
; CHECK-NEXT:    [[SCALAR:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[LOAD]], half 0xH310F, i32 1, i32 1)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[SCALAR]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 1, i32 0)
  %trans.pre = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %load, i32 1, i32 1)
  %scalar =  call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %trans.pre, half 0xH310F, i32 1, i32 1)
  %trans.post = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %scalar, i32 1, i32 1, i32 1, i32 1)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %trans.post)
  ret void
}

define void @transpose_inner_chain(ptr %ptr) {
; CHECK-LABEL: define void @transpose_inner_chain
; CHECK-SAME: (ptr [[PTR:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr [[PTR]], i32 4, i1 true, i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[GUARD:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[GUARD]], label [[LOOP:%.*]], label [[END:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[V_LOOP:%.*]] = phi <8 x float> [ [[LOAD]], [[ENTRY:%.*]] ], [ [[SCALAR:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[F:%.*]] = call <8 x float> @getmat1()
; CHECK-NEXT:    [[BINOP:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> [[V_LOOP]], <8 x float> [[V_LOOP]], i32 1, i32 0)
; CHECK-NEXT:    [[SCALAR]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[BINOP]], half 0xH310F, i32 1, i32 0)
; CHECK-NEXT:    [[CC:%.*]] = call i1 @getcc()
; CHECK-NEXT:    br i1 [[CC]], label [[LOOP]], label [[END]]
; CHECK:       end:
; CHECK-NEXT:    [[PHI_END:%.*]] = phi <8 x float> [ [[SCALAR]], [[LOOP]] ], [ [[LOAD]], [[ENTRY]] ]
; CHECK-NEXT:    [[SCALAR_END:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> [[PHI_END]], half 0xH312F, i32 1, i32 0)
; CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr [[PTR]], i32 4, i1 false, i32 1, i32 0, i32 0, i32 16, <8 x float> [[SCALAR_END]])
; CHECK-NEXT:    ret void
;
entry:
  %load = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr %ptr, i32 4, i1 false, i32 1, i32 0, i32 0)
  %guard = call i1 @getcc()
  br i1 %guard, label %loop, label %end

loop:
  %v.loop = phi <8 x float> [ %load, %entry ], [ %v.next, %loop ]

  %f = call <8 x float> @getmat1()
  %trans.pre = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %v.loop, i32 1, i32 0)
  %binop = call <8 x float> (...) @lgc.cooperative.matrix.binop__v8f32(i32 1, <8 x float> %trans.pre, <8 x float> %trans.pre, i32 1, i32 0)
  %scalar =  call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %binop, half 0xH310F, i32 1, i32 0)
  %v.next = call <8 x float> (...) @lgc.cooperative.matrix.transpose__v8f32(<8 x float> %scalar, i32 1, i32 0)

  %cc = call i1 @getcc()
  br i1 %cc, label %loop, label %end

end:
  %phi.end = phi <8 x float> [ %v.next, %loop ], [ %load, %entry ]
  %scalar.end = call <8 x float> (...) @lgc.cooperative.matrix.times.scalar__v8f32(<8 x float> %phi.end, half 0xH312F, i32 1, i32 0)
  call void (...) @lgc.cooperative.matrix.store(ptr %ptr, i32 4, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> %scalar.end)
  ret void
}

declare i1 @getcc()
declare <8 x float> @getmat1()

declare <8 x float> @lgc.cooperative.matrix.load__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.transpose__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.convert__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.muladd__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.times.scalar__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.binop__v8f32(...)
declare void @lgc.cooperative.matrix.store(...)
