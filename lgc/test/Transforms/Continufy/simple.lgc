; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature --check-globals
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-continufy' %s | FileCheck --check-prefixes=CHECK %s

define spir_func void @raygen() !lgc.shaderstage !{i32 7} !continufy.stage !{i32 0} {
  %pushconst = call ptr addrspace(4) @lgc.user.data(i32 0)
  %fn = load ptr, ptr addrspace(4) %pushconst
  %p8 = getelementptr i8, ptr addrspace(4) %pushconst, i32 8
  %x = load i32, ptr addrspace(4) %p8
  %p16 = getelementptr i8, ptr addrspace(4) %pushconst, i32 16
  %dst = load ptr addrspace(1), ptr addrspace(4) %p16
  %r = call spir_func [2 x i32] %fn(i32 %x, ptr addrspace(1) %dst), !continufy.stage !{i32 -1}
  store [2 x i32] %r, ptr addrspace(1) %dst
  ret void
}

define spir_func i32 @chs(i32 %x) !lgc.shaderstage !{i32 7} !continufy.stage !{i32 3} {
  %pushconst = call ptr addrspace(4) @lgc.user.data(i32 24)
  %fn = load ptr, ptr addrspace(4) %pushconst
  %y = call spir_func i32 %fn(i32 %x), !continufy.stage !{i32 5}
  ret i32 %y
}

; Note: No !continufy.stage metadata here
define dllexport void @lgc.shader.CS.main() !lgc.shaderstage !{i32 7} {
entry:
  %id = call i32 @lgc.shader.input.LocalInvocationId(i32 49)
  %live = icmp ult i32 %id, 29
  br i1 %live, label %main, label %exit

main:
  %pushconst = call ptr addrspace(4) @lgc.user.data(i32 32)
  %fn = load ptr, ptr addrspace(4) %pushconst
  call spir_func void %fn(), !continufy.stage !{i32 0}
  br label %exit

exit:
  ret void
}

declare ptr addrspace(4) @lgc.user.data(i32)
declare i32 @lgc.shader.input.LocalInvocationId(i32)
; CHECK-LABEL: define {{[^@]+}}@raygen
; CHECK-SAME: ({} [[STATE:%.*]], i32 [[RCR:%.*]]) !lgc.shaderstage !2 !continufy.stage !3 !lgc.cps !3 {
; CHECK-NEXT:    [[PUSHCONST:%.*]] = call ptr addrspace(4) @lgc.user.data(i32 0)
; CHECK-NEXT:    [[FN:%.*]] = load ptr, ptr addrspace(4) [[PUSHCONST]], align 8
; CHECK-NEXT:    [[P8:%.*]] = getelementptr i8, ptr addrspace(4) [[PUSHCONST]], i32 8
; CHECK-NEXT:    [[X:%.*]] = load i32, ptr addrspace(4) [[P8]], align 4
; CHECK-NEXT:    [[P16:%.*]] = getelementptr i8, ptr addrspace(4) [[PUSHCONST]], i32 16
; CHECK-NEXT:    [[DST:%.*]] = load ptr addrspace(1), ptr addrspace(4) [[P16]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[FN]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = or i32 [[TMP1]], 2
; CHECK-NEXT:    [[TMP3:%.*]] = call [2 x i32] (...) @lgc.cps.await.a2i32(i32 [[TMP2]], i32 4, i32 [[X]], ptr addrspace(1) [[DST]])
; CHECK-NEXT:    store [2 x i32] [[TMP3]], ptr addrspace(1) [[DST]], align 4
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@chs
; CHECK-SAME: ({} [[STATE:%.*]], i32 [[RCR:%.*]], i32 [[X:%.*]]) !lgc.shaderstage !2 !continufy.stage !4 !lgc.cps !5 {
; CHECK-NEXT:    [[PUSHCONST:%.*]] = call ptr addrspace(4) @lgc.user.data(i32 24)
; CHECK-NEXT:    [[FN:%.*]] = load ptr, ptr addrspace(4) [[PUSHCONST]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[FN]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = or i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 (...) @lgc.cps.await.i32(i32 [[TMP2]], i32 2, i32 [[X]])
; CHECK-NEXT:    call void (...) @lgc.cps.jump(i32 [[RCR]], i32 4, {} poison, i32 poison, i32 [[TMP3]])
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define {{[^@]+}}@lgc.shader.CS.main() !lgc.shaderstage !2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ID:%.*]] = call i32 @lgc.shader.input.LocalInvocationId(i32 49)
; CHECK-NEXT:    [[LIVE:%.*]] = icmp ult i32 [[ID]], 29
; CHECK-NEXT:    br i1 [[LIVE]], label [[MAIN:%.*]], label [[EXIT:%.*]]
; CHECK:       main:
; CHECK-NEXT:    [[PUSHCONST:%.*]] = call ptr addrspace(4) @lgc.user.data(i32 32)
; CHECK-NEXT:    [[FN:%.*]] = load ptr, ptr addrspace(4) [[PUSHCONST]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[FN]] to i32
; CHECK-NEXT:    call void (...) @lgc.cps.await.isVoid(i32 [[TMP0]], i32 1)
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
;.
; CHECK: attributes #[[ATTR0:[0-9]+]] = { nounwind willreturn }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { noreturn }
;.
; CHECK: [[META0:![0-9]+]] = !{!""}
; CHECK: [[META1:![0-9]+]] = !{!"\82\B0amdpal.pipelines\91\82\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AEamdpal.version\92\03\00"}
; CHECK: [[META2:![0-9]+]] = !{i32 7}
; CHECK: [[META3:![0-9]+]] = !{i32 0}
; CHECK: [[META4:![0-9]+]] = !{i32 3}
; CHECK: [[META5:![0-9]+]] = !{i32 1}
;.
