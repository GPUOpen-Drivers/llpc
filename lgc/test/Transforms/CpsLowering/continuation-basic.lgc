; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -passes="require<lgc-pipeline-state>,lgc-mutate-entry-point" %s | FileCheck --check-prefixes=CHECK %s

declare void @lgc.cps.jump(...) #0

define void @test(i32 %cspInit, i32 %arg, ptr %table, i32 %rcr) !lgc.cps !1 !lgc.shaderstage !2 !continuation !3 !continuation.state !4 {
; CHECK-LABEL: define {{[^@]+}}@test
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]], i32 [[RCR:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps [[META3:![0-9]+]] !lgc.shaderstage [[META4:![0-9]+]] !continuation [[META5:![0-9]+]] !continuation.state [[META6:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP8:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32 } [[TMP8]], i32 [[CR_THEN]], 1
; CHECK-NEXT:    [[TMP10:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32 } [[TMP9]], i32 [[TMP7]], 2
; CHECK-NEXT:    [[TMP11:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32 } [[TMP10]], i32 [[RCR]], 3
; CHECK-NEXT:    [[TMP12:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32 } [[TMP11]], i32 [[THEN_ARG]], 4
; CHECK-NEXT:    [[TMP13:%.*]] = extractvalue { <3 x i32>, i32, i32, i32, i32 } [[TMP12]], 1
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @llvm.amdgcn.set.inactive.chain.arg.i32(i32 [[TMP13]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP15:%.*]] = and i32 [[TMP14]], 7
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; CHECK-NEXT:    [[TMP17:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP16]])
; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq i32 [[TMP15]], 3
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP18]])
; CHECK-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
; CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i32 [[TMP19]], i32 [[TMP17]]
; CHECK-NEXT:    [[TMP22:%.*]] = icmp eq i32 [[TMP15]], 2
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP22]])
; CHECK-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; CHECK-NEXT:    [[TMP25:%.*]] = select i1 [[TMP24]], i32 [[TMP23]], i32 [[TMP21]]
; CHECK-NEXT:    [[TMP26:%.*]] = icmp eq i32 [[TMP15]], 1
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP26]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i32 [[TMP27]], 0
; CHECK-NEXT:    [[TMP29:%.*]] = select i1 [[TMP28]], i32 [[TMP27]], i32 [[TMP25]]
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP29]], i1 true)
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP14]], i32 [[TMP30]])
; CHECK-NEXT:    [[TMP32:%.*]] = icmp eq i32 [[TMP14]], [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP32]])
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP31]])
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP33]])
; CHECK-NEXT:    [[TMP36:%.*]] = and i32 [[TMP34]], -64
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP36]], i64 0
; CHECK-NEXT:    [[TMP38:%.*]] = bitcast <2 x i32> [[TMP37]] to i64
; CHECK-NEXT:    [[TMP39:%.*]] = inttoptr i64 [[TMP38]] to ptr
; CHECK-NEXT:    [[TMP40:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP41:%.*]] = bitcast i64 [[TMP40]] to <2 x i32>
; CHECK-NEXT:    [[TMP42:%.*]] = extractelement <2 x i32> [[TMP41]], i64 0
; CHECK-NEXT:    [[TMP43:%.*]] = extractelement <2 x i32> [[TMP41]], i64 1
; CHECK-NEXT:    [[TMP44:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP45:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP46:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP47:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP48:%.*]] = insertelement <20 x i32> [[TMP47]], i32 [[TMP42]], i64 1
; CHECK-NEXT:    [[TMP49:%.*]] = insertelement <20 x i32> [[TMP48]], i32 [[TMP43]], i64 2
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <20 x i32> [[TMP49]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <20 x i32> [[TMP50]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP52:%.*]] = insertelement <20 x i32> [[TMP51]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP53:%.*]] = insertelement <20 x i32> [[TMP52]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <20 x i32> [[TMP53]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <20 x i32> [[TMP54]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <20 x i32> [[TMP55]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <20 x i32> [[TMP56]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP58:%.*]] = insertelement <20 x i32> [[TMP57]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <20 x i32> [[TMP58]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <20 x i32> [[TMP59]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> [[TMP60]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[TMP44]], i64 16
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[TMP45]], i64 17
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[TMP46]], i64 18
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32i32i32i32s(ptr inreg [[TMP39]], i32 inreg [[TMP35]], <20 x i32> inreg [[TMP66]], { <3 x i32>, i32, i32, i32, i32 } [[TMP12]], i32 0)
; CHECK-NEXT:    unreachable
;
entry:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0, align 4
  %then.arg = add i32 %arg, 1
  %0 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, i32 %0, i32 %rcr, i32 %then.arg)
  unreachable
}

declare !continuation !3 { ptr, ptr } @continuation.prototype.test(ptr, i1)

declare ptr @continuation.malloc(i32)

declare void @continuation.free(ptr)

declare token @llvm.coro.id.retcon(i32, i32, ptr, ptr, ptr, ptr) #1

declare ptr @llvm.coro.begin(token, ptr writeonly) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind }

!continuation.stackAddrspace = !{!0}

!0 = !{i32 5}
!1 = !{i32 1}
!2 = !{i32 7}
!3 = !{ptr @test}
!4 = !{i32 0}
