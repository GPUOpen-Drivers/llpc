
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -lgc-use-init-whole-wave -passes="require<lgc-pipeline-state>,lgc-mutate-entry-point" %s | FileCheck --check-prefixes=CHECK %s

; REQUIRES: llvm-main-revision-ge-511860

declare void @lgc.cps.jump(...) #0

define void @test(i32 %cspInit, i32 %arg, ptr %table, i32 %rcr) !lgc.cps !1 !lgc.shaderstage !2 !continuation !3 !continuation.state !4 {
; CHECK-LABEL: define {{[^@]+}}@test
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]], i32 [[RCR:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]], i32 [[INACTIVE_VGPR2:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps [[META5:![0-9]+]] !lgc.shaderstage [[META6:![0-9]+]] !continuation [[META7:![0-9]+]] !continuation.state [[META8:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[LOCAL:%.*]] = alloca i32, align 4, addrspace(5)
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TABLE]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i32> [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[TMP6]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP9]], label [[TMP10:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       10:
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    store i32 [[THEN_ARG]], ptr addrspace(5) [[LOCAL]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP12:%.*]] = phi i32 [ [[VCR]], [[ENTRY:%.*]] ], [ [[CR_THEN]], [[TMP10]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[CSPINIT]], [[ENTRY]] ], [ [[TMP11]], [[TMP10]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi i32 [ [[ARG]], [[ENTRY]] ], [ poison, [[TMP10]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[TMP7]], [[ENTRY]] ], [ [[RCR]], [[TMP10]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi i32 [ [[TMP8]], [[ENTRY]] ], [ [[THEN_ARG]], [[TMP10]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi i32 [ [[RCR]], [[ENTRY]] ], [ poison, [[TMP10]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ENTRY]] ], [ poison, [[TMP10]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ENTRY]] ], [ poison, [[TMP10]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[INACTIVE_VGPR2]], [[ENTRY]] ], [ poison, [[TMP10]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast i64 [[TMP21]] to <2 x i32>
; CHECK-NEXT:    [[TMP23:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP24:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP23]], i32 [[TMP12]], 1
; CHECK-NEXT:    [[TMP25:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP24]], i32 [[TMP13]], 2
; CHECK-NEXT:    [[TMP26:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP25]], i32 [[TMP14]], 3
; CHECK-NEXT:    [[TMP27:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP26]], i32 [[TMP15]], 4
; CHECK-NEXT:    [[TMP28:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP27]], i32 [[TMP16]], 5
; CHECK-NEXT:    [[TMP29:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP28]], i32 [[TMP17]], 6
; CHECK-NEXT:    [[TMP30:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP29]], i32 [[TMP18]], 7
; CHECK-NEXT:    [[TMP31:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP30]], i32 [[TMP19]], 8
; CHECK-NEXT:    [[TMP32:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP31]], i32 [[TMP20]], 9
; CHECK-NEXT:    [[TMP33:%.*]] = extractvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP32]], 1
; CHECK-NEXT:    [[TMP34:%.*]] = and i32 [[TMP33]], 7
; CHECK-NEXT:    [[TMP35:%.*]] = icmp ne i32 [[TMP34]], 0
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP35]])
; CHECK-NEXT:    [[TMP37:%.*]] = icmp eq i32 [[TMP34]], 3
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP37]])
; CHECK-NEXT:    [[TMP39:%.*]] = icmp ne i32 [[TMP38]], 0
; CHECK-NEXT:    [[TMP40:%.*]] = select i1 [[TMP39]], i32 [[TMP38]], i32 [[TMP36]]
; CHECK-NEXT:    [[TMP41:%.*]] = icmp eq i32 [[TMP34]], 2
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp ne i32 [[TMP42]], 0
; CHECK-NEXT:    [[TMP44:%.*]] = select i1 [[TMP43]], i32 [[TMP42]], i32 [[TMP40]]
; CHECK-NEXT:    [[TMP45:%.*]] = icmp eq i32 [[TMP34]], 1
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = icmp ne i32 [[TMP46]], 0
; CHECK-NEXT:    [[TMP48:%.*]] = select i1 [[TMP47]], i32 [[TMP46]], i32 [[TMP44]]
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP48]], i1 true)
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP33]], i32 [[TMP49]])
; CHECK-NEXT:    [[TMP51:%.*]] = icmp eq i32 [[TMP33]], [[TMP50]]
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP51]])
; CHECK-NEXT:    [[TMP53:%.*]] = and i32 [[TMP50]], -64
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <2 x i32> [[TMP22]], i32 [[TMP53]], i64 0
; CHECK-NEXT:    [[TMP55:%.*]] = bitcast <2 x i32> [[TMP54]] to i64
; CHECK-NEXT:    [[TMP56:%.*]] = inttoptr i64 [[TMP55]] to ptr
; CHECK-NEXT:    [[TMP57:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP58:%.*]] = bitcast i64 [[TMP57]] to <2 x i32>
; CHECK-NEXT:    [[TMP59:%.*]] = extractelement <2 x i32> [[TMP58]], i64 0
; CHECK-NEXT:    [[TMP60:%.*]] = extractelement <2 x i32> [[TMP58]], i64 1
; CHECK-NEXT:    [[TMP61:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP62:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP63:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[TMP59]], i64 1
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[TMP60]], i64 2
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <20 x i32> [[TMP76]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <20 x i32> [[TMP77]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP79:%.*]] = insertelement <20 x i32> [[TMP78]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP80:%.*]] = insertelement <20 x i32> [[TMP79]], i32 [[TMP61]], i64 16
; CHECK-NEXT:    [[TMP81:%.*]] = insertelement <20 x i32> [[TMP80]], i32 [[TMP62]], i64 17
; CHECK-NEXT:    [[TMP82:%.*]] = insertelement <20 x i32> [[TMP81]], i32 [[TMP63]], i64 18
; CHECK-NEXT:    [[TMP83:%.*]] = insertelement <20 x i32> [[TMP82]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32i32i32i32i32i32i32i32i32s(ptr inreg [[TMP56]], i32 inreg [[TMP52]], <20 x i32> inreg [[TMP83]], { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP32]], i32 0)
; CHECK-NEXT:    unreachable
;
entry:
  %csp = alloca i32, align 4
  %local = alloca i32, align 4, addrspace(5)
  store i32 %cspInit, ptr %csp, align 4
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0, align 4
  %then.arg = add i32 %arg, 1
  %0 = load i32, ptr %csp, align 4
  store i32 %then.arg, ptr addrspace(5) %local
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, i32 %0, i32 poison, i32 %rcr, i32 %then.arg)
  unreachable
}

declare !continuation !3 { ptr, ptr } @continuation.prototype.test(ptr, i1)

declare ptr @continuation.malloc(i32)

declare void @continuation.free(ptr)

declare token @llvm.coro.id.retcon(i32, i32, ptr, ptr, ptr, ptr) #1

declare ptr @llvm.coro.begin(token, ptr writeonly) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind }

!continuation.stackAddrspace = !{!0}
!lgc.cps.maxArgumentVgprs = !{!5}

!0 = !{i32 5}
!1 = !{i32 1}
!2 = !{i32 7}
!3 = !{ptr @test}
!4 = !{i32 0}
!5 = !{i32 8}
;
