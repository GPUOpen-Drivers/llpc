; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-patch-entry-point-mutate' %s | FileCheck --check-prefixes=CHECK %s

declare void @lgc.cps.jump(i32 %target, i32 %levels, {i32} %state, ...) noreturn

define void @test({i32} %state, i32 %arg, ptr %table) !lgc.cps !0 {
entry:
  %v = extractvalue {i32} %state, 0
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0
  %then.arg = add i32 %arg, 1
  %v.then = mul i32 %v, 2
  %state.then = insertvalue {i32} poison, i32 %v.then, 0
  call void (i32, i32, { i32 }, ...) @lgc.cps.jump(i32 %cr.then, i32 2, {i32} %state.then, i32 %then.arg)
  unreachable
}

!0 = !{i32 1} ; level 1
; CHECK-LABEL: define {{[^@]+}}@test.1
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], i32 inreg [[PERSHADERTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[TMP0:%.*]], i32 inreg [[TMP1:%.*]], i32 inreg [[TMP2:%.*]], i32 inreg [[TMP3:%.*]], i32 inreg [[TMP4:%.*]], i32 inreg [[TMP5:%.*]], i32 inreg [[TMP6:%.*]], i32 inreg [[TMP7:%.*]], i32 inreg [[TMP8:%.*]], i32 inreg [[TMP9:%.*]], i32 inreg [[TMP10:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps !2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP11:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP12:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast i64 [[TMP12]] to <2 x i32>
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { i32 }, ptr addrspace(5) [[TMP14]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP14]], ptr addrspace(5) [[TMP11]], align 4
; CHECK-NEXT:    [[V:%.*]] = extractvalue { i32 } [[CPS_STATE]], 0
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[V_THEN:%.*]] = mul i32 [[V]], 2
; CHECK-NEXT:    [[STATE_THEN:%.*]] = insertvalue { i32 } poison, i32 [[V_THEN]], 0
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP11]], align 4
; CHECK-NEXT:    store { i32 } [[STATE_THEN]], ptr addrspace(5) [[TMP15]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr ptr addrspace(5), ptr addrspace(5) [[TMP15]], i32 4
; CHECK-NEXT:    [[TMP17:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } poison, i32 [[CR_THEN]], 0
; CHECK-NEXT:    [[TMP18:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } [[TMP17]], ptr addrspace(5) [[TMP16]], 1
; CHECK-NEXT:    [[TMP19:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } [[TMP18]], i32 [[THEN_ARG]], 2
; CHECK-NEXT:    [[TMP20:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i64 [[TMP20]] to <2 x i32>
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <2 x i32> [[TMP21]], i64 0
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <2 x i32> [[TMP21]], i64 1
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[PERSHADERTABLE]], i64 1
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[TMP22]], i64 2
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[TMP23]], i64 3
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[TMP0]], i64 4
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[TMP1]], i64 5
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[TMP2]], i64 6
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[TMP3]], i64 7
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[TMP4]], i64 8
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[TMP5]], i64 9
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[TMP6]], i64 10
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[TMP7]], i64 11
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[TMP8]], i64 12
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[TMP9]], i64 13
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[TMP10]], i64 14
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP40:%.*]] = and i32 [[CR_THEN]], -64
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <2 x i32> [[TMP13]], i32 [[TMP40]], i64 0
; CHECK-NEXT:    [[TMP42:%.*]] = bitcast <2 x i32> [[TMP41]] to i64
; CHECK-NEXT:    [[TMP43:%.*]] = inttoptr i64 [[TMP42]] to ptr
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 true)
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32 }, i32, ...) @llvm.amdgcn.cs.chain(ptr [[TMP43]], i32 [[TMP44]], <16 x i32> [[TMP39]], { i32, ptr addrspace(5), i32 } [[TMP19]], i32 0)
; CHECK-NEXT:    unreachable
;
