; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 4
; RUN: lgc -mcpu=gfx1030 -o - -passes="require<lgc-pipeline-state>,lgc-mutate-entry-point" %s | FileCheck --check-prefixes=CHECK %s

define spir_func void @_rgen_1(i32 %cspInit, i32 %rcr) #0 !spirv.ExecutionModel !16 !lgc.shaderstage !17 !continuation !18 !lgc.cps !19 !continuation.state !20 {
; CHECK-LABEL: define amdgpu_cs_chain void @_rgen_1(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[USERDATA0:%.*]], i32 inreg [[USERDATA1:%.*]], i32 inreg [[USERDATA2:%.*]], i32 inreg [[USERDATA3:%.*]], i32 inreg [[USERDATA4:%.*]], i32 inreg [[USERDATA5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[RCR:%.*]]) #[[ATTR0:[0-9]+]] align 64 !spirv.ExecutionModel [[META16:![0-9]+]] !lgc.shaderstage [[META17:![0-9]+]] !continuation [[META18:![0-9]+]] !lgc.cps [[META19:![0-9]+]] !continuation.state [[META20:![0-9]+]] {
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 96
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i64 [[TMP9]] to <2 x i32>
; CHECK-NEXT:    [[TMP11:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP11]] to <2 x i32>
; CHECK-NEXT:    [[TMP13:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to <2 x i32>
; CHECK-NEXT:    [[TMP15:%.*]] = insertelement <2 x i32> [[TMP14]], i32 [[USERDATA5]], i64 0
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast <2 x i32> [[TMP15]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = inttoptr i64 [[TMP16]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP17]], i32 0
; CHECK-NEXT:    [[TMP19:%.*]] = load <2 x i32>, ptr addrspace(4) [[TMP18]], align 8
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <2 x i32> [[TMP19]], i64 0
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <2 x i32> [[TMP19]], i64 1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x i32> poison, i32 [[TMP20]], i64 0
; CHECK-NEXT:    [[TMP23:%.*]] = and i32 [[TMP21]], 65535
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <4 x i32> [[TMP22]], i32 [[TMP23]], i64 1
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <4 x i32> [[TMP24]], i32 -1, i64 2
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <4 x i32> [[TMP25]], i32 553734060, i64 3
; CHECK-NEXT:    [[TMP27:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP26]])
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <2 x i32> [[TMP12]], i32 [[USERDATA0]], i64 0
; CHECK-NEXT:    [[TMP29:%.*]] = bitcast <2 x i32> [[TMP28]] to i64
; CHECK-NEXT:    [[TMP30:%.*]] = inttoptr i64 [[TMP29]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP30]], i32 32
; CHECK-NEXT:    [[TMP32:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP31]], align 16
; CHECK-NEXT:    [[TMP33:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP32]])
; CHECK-NEXT:    [[TMP34:%.*]] = inttoptr i32 [[TMP7]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP34]], i32 0
; CHECK-NEXT:    store ptr addrspace(7) [[TMP33]], ptr addrspace(5) [[TMP35]], align 32
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <2 x i32> [[TMP10]], i32 [[USERDATA0]], i64 0
; CHECK-NEXT:    [[TMP37:%.*]] = bitcast <2 x i32> [[TMP36]] to i64
; CHECK-NEXT:    [[TMP38:%.*]] = inttoptr i64 [[TMP37]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP38]], i32 48
; CHECK-NEXT:    [[TMP40:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP39]], align 16
; CHECK-NEXT:    [[TMP41:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP40]])
; CHECK-NEXT:    [[TMP42:%.*]] = add i32 [[TMP7]], 8
; CHECK-NEXT:    [[TMP43:%.*]] = inttoptr i32 [[TMP42]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP43]], i32 0
; CHECK-NEXT:    store ptr addrspace(7) [[TMP41]], ptr addrspace(5) [[TMP44]], align 32
; CHECK-NEXT:    [[TMP45:%.*]] = load volatile i32, ptr addrspace(7) [[TMP41]], align 4
; CHECK-NEXT:    [[TMP46:%.*]] = add i32 [[TMP7]], 16
; CHECK-NEXT:    [[TMP47:%.*]] = inttoptr i32 [[TMP46]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP48:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP47]], i32 0
; CHECK-NEXT:    store i32 [[TMP45]], ptr addrspace(5) [[TMP48]], align 4
; CHECK-NEXT:    [[TMP49:%.*]] = add i32 [[TMP45]], -37
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP27]], i32 52
; CHECK-NEXT:    [[TMP51:%.*]] = load i64, ptr addrspace(7) [[TMP50]], align 8
; CHECK-NEXT:    [[TMP52:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP27]], i32 60
; CHECK-NEXT:    [[TMP53:%.*]] = load i32, ptr addrspace(7) [[TMP52]], align 4
; CHECK-NEXT:    [[TMP54:%.*]] = mul i32 [[TMP49]], [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = inttoptr i64 [[TMP51]] to ptr addrspace(1)
; CHECK-NEXT:    [[TMP56:%.*]] = sext i32 [[TMP54]] to i64
; CHECK-NEXT:    [[TMP57:%.*]] = getelementptr i8, ptr addrspace(1) [[TMP55]], i64 [[TMP56]]
; CHECK-NEXT:    [[TMP58:%.*]] = load i64, ptr addrspace(1) [[TMP57]], align 8
; CHECK-NEXT:    [[TMP59:%.*]] = inttoptr i64 [[TMP58]] to ptr
; CHECK-NEXT:    [[TMP60:%.*]] = ptrtoint ptr [[TMP59]] to i32
; CHECK-NEXT:    [[TMP61:%.*]] = or i32 [[TMP60]], 1
; CHECK-NEXT:    [[TMP62:%.*]] = inttoptr i32 [[TMP61]] to ptr
; CHECK-NEXT:    [[TMP63:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP64:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP65:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP64]], i32 [[TMP61]], 1
; CHECK-NEXT:    [[TMP66:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP65]], i32 [[TMP63]], 2
; CHECK-NEXT:    [[TMP67:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP66]], i32 add (i32 ptrtoint (ptr @_rgen_1.resume.0 to i32), i32 1), 3
; CHECK-NEXT:    [[TMP68:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP67]], i32 undef, 4
; CHECK-NEXT:    [[TMP69:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP68]], i32 [[TMP49]], 5
; CHECK-NEXT:    [[TMP71:%.*]] = extractvalue { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP69]], 1
; CHECK-NEXT:    [[TMP72:%.*]] = call i32 @llvm.amdgcn.set.inactive.chain.arg.i32(i32 [[TMP71]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP73:%.*]] = and i32 [[TMP72]], 7
; CHECK-NEXT:    [[TMP74:%.*]] = icmp ne i32 [[TMP73]], 0
; CHECK-NEXT:    [[TMP75:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP74]])
; CHECK-NEXT:    [[TMP76:%.*]] = icmp eq i32 [[TMP73]], 3
; CHECK-NEXT:    [[TMP77:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP76]])
; CHECK-NEXT:    [[TMP78:%.*]] = icmp ne i32 [[TMP77]], 0
; CHECK-NEXT:    [[TMP79:%.*]] = select i1 [[TMP78]], i32 [[TMP77]], i32 [[TMP75]]
; CHECK-NEXT:    [[TMP80:%.*]] = icmp eq i32 [[TMP73]], 2
; CHECK-NEXT:    [[TMP81:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP80]])
; CHECK-NEXT:    [[TMP82:%.*]] = icmp ne i32 [[TMP81]], 0
; CHECK-NEXT:    [[TMP83:%.*]] = select i1 [[TMP82]], i32 [[TMP81]], i32 [[TMP79]]
; CHECK-NEXT:    [[TMP84:%.*]] = icmp eq i32 [[TMP73]], 1
; CHECK-NEXT:    [[TMP85:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP84]])
; CHECK-NEXT:    [[TMP86:%.*]] = icmp ne i32 [[TMP85]], 0
; CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i32 [[TMP85]], i32 [[TMP83]]
; CHECK-NEXT:    [[TMP88:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP87]], i1 true)
; CHECK-NEXT:    [[TMP89:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP72]], i32 [[TMP88]])
; CHECK-NEXT:    [[TMP90:%.*]] = icmp eq i32 [[TMP72]], [[TMP89]]
; CHECK-NEXT:    [[TMP91:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP90]])
; CHECK-NEXT:    [[TMP92:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP89]])
; CHECK-NEXT:    [[TMP93:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP91]])
; CHECK-NEXT:    [[TMP94:%.*]] = and i32 [[TMP92]], -64
; CHECK-NEXT:    [[TMP95:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP94]], i64 0
; CHECK-NEXT:    [[TMP96:%.*]] = bitcast <2 x i32> [[TMP95]] to i64
; CHECK-NEXT:    [[TMP97:%.*]] = inttoptr i64 [[TMP96]] to ptr
; CHECK-NEXT:    [[TMP98:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP99:%.*]] = bitcast i64 [[TMP98]] to <2 x i32>
; CHECK-NEXT:    [[TMP100:%.*]] = extractelement <2 x i32> [[TMP99]], i64 0
; CHECK-NEXT:    [[TMP101:%.*]] = extractelement <2 x i32> [[TMP99]], i64 1
; CHECK-NEXT:    [[TMP102:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP103:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP104:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP105:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP106:%.*]] = insertelement <20 x i32> [[TMP105]], i32 [[TMP100]], i64 1
; CHECK-NEXT:    [[TMP107:%.*]] = insertelement <20 x i32> [[TMP106]], i32 [[TMP101]], i64 2
; CHECK-NEXT:    [[TMP108:%.*]] = insertelement <20 x i32> [[TMP107]], i32 [[USERDATA0]], i64 3
; CHECK-NEXT:    [[TMP109:%.*]] = insertelement <20 x i32> [[TMP108]], i32 [[USERDATA1]], i64 4
; CHECK-NEXT:    [[TMP110:%.*]] = insertelement <20 x i32> [[TMP109]], i32 [[USERDATA2]], i64 5
; CHECK-NEXT:    [[TMP111:%.*]] = insertelement <20 x i32> [[TMP110]], i32 [[USERDATA3]], i64 6
; CHECK-NEXT:    [[TMP112:%.*]] = insertelement <20 x i32> [[TMP111]], i32 [[USERDATA4]], i64 7
; CHECK-NEXT:    [[TMP113:%.*]] = insertelement <20 x i32> [[TMP112]], i32 [[USERDATA5]], i64 8
; CHECK-NEXT:    [[TMP114:%.*]] = insertelement <20 x i32> [[TMP113]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP115:%.*]] = insertelement <20 x i32> [[TMP114]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP116:%.*]] = insertelement <20 x i32> [[TMP115]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP117:%.*]] = insertelement <20 x i32> [[TMP116]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP118:%.*]] = insertelement <20 x i32> [[TMP117]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP119:%.*]] = insertelement <20 x i32> [[TMP118]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP120:%.*]] = insertelement <20 x i32> [[TMP119]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP121:%.*]] = insertelement <20 x i32> [[TMP120]], i32 [[TMP102]], i64 16
; CHECK-NEXT:    [[TMP122:%.*]] = insertelement <20 x i32> [[TMP121]], i32 [[TMP103]], i64 17
; CHECK-NEXT:    [[TMP123:%.*]] = insertelement <20 x i32> [[TMP122]], i32 [[TMP104]], i64 18
; CHECK-NEXT:    [[TMP124:%.*]] = insertelement <20 x i32> [[TMP123]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32i32i32i32i32s(ptr inreg [[TMP97]], i32 inreg [[TMP93]], <20 x i32> inreg [[TMP124]], { <3 x i32>, i32, i32, i32, i32, i32 } [[TMP69]], i32 0)
; CHECK-NEXT:    unreachable
;
.entry:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %0 = load i32, ptr %csp, align 4
  %1 = add i32 %0, 96
  store i32 %1, ptr %csp, align 4
  %2 = call i64 @llvm.amdgcn.s.getpc()
  %3 = bitcast i64 %2 to <2 x i32>
  %4 = call i64 @llvm.amdgcn.s.getpc()
  %5 = bitcast i64 %4 to <2 x i32>
  %6 = call i64 @llvm.amdgcn.s.getpc()
  %7 = bitcast i64 %6 to <2 x i32>
  %8 = call i32 @lgc.load.user.data__i32(i32 20)
  %9 = insertelement <2 x i32> %7, i32 %8, i64 0
  %10 = bitcast <2 x i32> %9 to i64
  %11 = inttoptr i64 %10 to ptr addrspace(4)
  %12 = getelementptr i8, ptr addrspace(4) %11, i32 0
  %13 = load <2 x i32>, ptr addrspace(4) %12, align 8
  %14 = extractelement <2 x i32> %13, i64 0
  %15 = extractelement <2 x i32> %13, i64 1
  %16 = insertelement <4 x i32> poison, i32 %14, i64 0
  %17 = and i32 %15, 65535
  %18 = insertelement <4 x i32> %16, i32 %17, i64 1
  %19 = insertelement <4 x i32> %18, i32 -1, i64 2
  %20 = insertelement <4 x i32> %19, i32 553734060, i64 3
  %21 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %20)
  %22 = call i32 @lgc.load.user.data__i32(i32 0)
  %23 = insertelement <2 x i32> %5, i32 %22, i64 0
  %24 = bitcast <2 x i32> %23 to i64
  %25 = inttoptr i64 %24 to ptr addrspace(4)
  %26 = getelementptr i8, ptr addrspace(4) %25, i32 32
  %27 = load <4 x i32>, ptr addrspace(4) %26, align 16
  %28 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %27)
  %29 = inttoptr i32 %0 to ptr addrspace(5)
  %30 = getelementptr i8, ptr addrspace(5) %29, i32 0
  store ptr addrspace(7) %28, ptr addrspace(5) %30, align 32
  %31 = call i32 @lgc.load.user.data__i32(i32 0)
  %32 = insertelement <2 x i32> %3, i32 %31, i64 0
  %33 = bitcast <2 x i32> %32 to i64
  %34 = inttoptr i64 %33 to ptr addrspace(4)
  %35 = getelementptr i8, ptr addrspace(4) %34, i32 48
  %36 = load <4 x i32>, ptr addrspace(4) %35, align 16
  %37 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %36)
  %38 = add i32 %0, 8
  %39 = inttoptr i32 %38 to ptr addrspace(5)
  %40 = getelementptr i8, ptr addrspace(5) %39, i32 0
  store ptr addrspace(7) %37, ptr addrspace(5) %40, align 32
  %41 = load volatile i32, ptr addrspace(7) %37, align 4
  %42 = add i32 %0, 16
  %43 = inttoptr i32 %42 to ptr addrspace(5)
  %44 = getelementptr i8, ptr addrspace(5) %43, i32 0
  store i32 %41, ptr addrspace(5) %44, align 4
  %45 = add i32 %41, -37
  %46 = getelementptr inbounds i8, ptr addrspace(7) %21, i32 52
  %47 = load i64, ptr addrspace(7) %46, align 8
  %48 = getelementptr inbounds i8, ptr addrspace(7) %21, i32 60
  %49 = load i32, ptr addrspace(7) %48, align 4
  %50 = mul i32 %45, %49
  %51 = inttoptr i64 %47 to ptr addrspace(1)
  %52 = sext i32 %50 to i64
  %53 = getelementptr i8, ptr addrspace(1) %51, i64 %52
  %54 = load i64, ptr addrspace(1) %53, align 8
  %55 = inttoptr i64 %54 to ptr
  %56 = ptrtoint ptr %55 to i32
  %57 = or i32 %56, 1
  %58 = inttoptr i32 %57 to ptr
  %59 = call i32 (...) @lgc.cps.as.continuation.reference(ptr @_rgen_1.resume.0)
  %60 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %57, i32 2, i32 %60, i32 %59, [1 x i32] undef, i32 %45)
  unreachable
}

define void @_rgen_1.resume.0(i32 %cspInit, i32 %0, [1 x i32] %1) !spirv.ExecutionModel !16 !lgc.shaderstage !17 !continuation !21 !lgc.cps !19 !continuation.state !20 {
; CHECK-LABEL: define amdgpu_cs_chain void @_rgen_1.resume.0(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[USERDATA0:%.*]], i32 inreg [[USERDATA1:%.*]], i32 inreg [[USERDATA2:%.*]], i32 inreg [[USERDATA3:%.*]], i32 inreg [[USERDATA4:%.*]], i32 inreg [[USERDATA5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[TMP0:%.*]], [1 x i32] [[TMP1:%.*]]) #[[ATTR1:[0-9]+]] align 64 !spirv.ExecutionModel [[META16]] !lgc.shaderstage [[META17]] !continuation [[META21:![0-9]+]] !lgc.cps [[META19]] !continuation.state [[META20]] {
; CHECK-NEXT:  entryresume.0:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i32> [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP7]] to <2 x i32>
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], -96
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 16
; CHECK-NEXT:    [[TMP12:%.*]] = inttoptr i32 [[TMP11]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP12]], i32 0
; CHECK-NEXT:    [[DOTRELOAD6:%.*]] = load i32, ptr addrspace(5) [[TMP13]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = add i32 [[TMP10]], 8
; CHECK-NEXT:    [[TMP15:%.*]] = inttoptr i32 [[TMP14]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP15]], i32 0
; CHECK-NEXT:    [[DOTRELOAD3:%.*]] = load ptr addrspace(7), ptr addrspace(5) [[TMP16]], align 32
; CHECK-NEXT:    [[TMP17:%.*]] = inttoptr i32 [[TMP10]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP17]], i32 0
; CHECK-NEXT:    [[DOTRELOAD:%.*]] = load ptr addrspace(7), ptr addrspace(5) [[TMP18]], align 32
; CHECK-NEXT:    [[TMP19:%.*]] = mul i32 [[USERDATA5]], 24
; CHECK-NEXT:    [[TMP20:%.*]] = add i32 [[TMP10]], [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = inttoptr i32 [[TMP20]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP21]], i32 0
; CHECK-NEXT:    [[DUMMY_RELOAD:%.*]] = load ptr addrspace(7), ptr addrspace(5) [[TMP22]], align 32
; CHECK-NEXT:    [[TMP23:%.*]] = load volatile i32, ptr addrspace(7) [[DOTRELOAD3]], align 4
; CHECK-NEXT:    [[TMP24:%.*]] = icmp eq i32 [[DOTRELOAD6]], [[TMP23]]
; CHECK-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; CHECK-NEXT:    store i32 [[TMP25]], ptr addrspace(7) [[DOTRELOAD]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP26:%.*]] = insertvalue { <3 x i32>, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP27:%.*]] = insertvalue { <3 x i32>, i32, i32 } [[TMP26]], i32 0, 1
; CHECK-NEXT:    [[TMP28:%.*]] = insertvalue { <3 x i32>, i32, i32 } [[TMP27]], i32 poison, 2
; CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { <3 x i32>, i32, i32 } [[TMP28]], 1
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.set.inactive.chain.arg.i32(i32 [[TMP29]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP31:%.*]] = and i32 [[TMP30]], 7
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP32]])
; CHECK-NEXT:    [[TMP34:%.*]] = icmp eq i32 [[TMP31]], 3
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP34]])
; CHECK-NEXT:    [[TMP36:%.*]] = icmp ne i32 [[TMP35]], 0
; CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i32 [[TMP35]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP38:%.*]] = icmp eq i32 [[TMP31]], 2
; CHECK-NEXT:    [[TMP39:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP38]])
; CHECK-NEXT:    [[TMP40:%.*]] = icmp ne i32 [[TMP39]], 0
; CHECK-NEXT:    [[TMP41:%.*]] = select i1 [[TMP40]], i32 [[TMP39]], i32 [[TMP37]]
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i32 [[TMP31]], 1
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP42]])
; CHECK-NEXT:    [[TMP44:%.*]] = icmp ne i32 [[TMP43]], 0
; CHECK-NEXT:    [[TMP45:%.*]] = select i1 [[TMP44]], i32 [[TMP43]], i32 [[TMP41]]
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP45]], i1 true)
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP30]], i32 [[TMP46]])
; CHECK-NEXT:    [[TMP48:%.*]] = icmp eq i32 [[TMP30]], [[TMP47]]
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP48]])
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP47]])
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP49]])
; CHECK-NEXT:    [[TMP52:%.*]] = icmp eq i32 [[TMP50]], 0
; CHECK-NEXT:    br i1 [[TMP52]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP53:%.*]] = and i32 [[TMP50]], -64
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP53]], i64 0
; CHECK-NEXT:    [[TMP55:%.*]] = bitcast <2 x i32> [[TMP54]] to i64
; CHECK-NEXT:    [[TMP56:%.*]] = inttoptr i64 [[TMP55]] to ptr
; CHECK-NEXT:    [[TMP57:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP58:%.*]] = bitcast i64 [[TMP57]] to <2 x i32>
; CHECK-NEXT:    [[TMP59:%.*]] = extractelement <2 x i32> [[TMP58]], i64 0
; CHECK-NEXT:    [[TMP60:%.*]] = extractelement <2 x i32> [[TMP58]], i64 1
; CHECK-NEXT:    [[TMP61:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP62:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP63:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[TMP59]], i64 1
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[TMP60]], i64 2
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[USERDATA0]], i64 3
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[USERDATA1]], i64 4
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[USERDATA2]], i64 5
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[USERDATA3]], i64 6
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[USERDATA4]], i64 7
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[USERDATA5]], i64 8
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <20 x i32> [[TMP76]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <20 x i32> [[TMP77]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP79:%.*]] = insertelement <20 x i32> [[TMP78]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP80:%.*]] = insertelement <20 x i32> [[TMP79]], i32 [[TMP61]], i64 16
; CHECK-NEXT:    [[TMP81:%.*]] = insertelement <20 x i32> [[TMP80]], i32 [[TMP62]], i64 17
; CHECK-NEXT:    [[TMP82:%.*]] = insertelement <20 x i32> [[TMP81]], i32 [[TMP63]], i64 18
; CHECK-NEXT:    [[TMP83:%.*]] = insertelement <20 x i32> [[TMP82]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32i32s(ptr inreg [[TMP56]], i32 inreg [[TMP51]], <20 x i32> inreg [[TMP83]], { <3 x i32>, i32, i32 } [[TMP28]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
entryresume.0:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %2 = load i32, ptr %csp, align 4
  %3 = add i32 %2, -96
  %4 = add i32 %3, 16
  %5 = inttoptr i32 %4 to ptr addrspace(5)
  %6 = getelementptr i8, ptr addrspace(5) %5, i32 0
  %.reload6 = load i32, ptr addrspace(5) %6, align 4
  %7 = add i32 %3, 8
  %8 = inttoptr i32 %7 to ptr addrspace(5)
  %9 = getelementptr i8, ptr addrspace(5) %8, i32 0
  %.reload3 = load ptr addrspace(7), ptr addrspace(5) %9, align 32
  %10 = inttoptr i32 %3 to ptr addrspace(5)
  %11 = getelementptr i8, ptr addrspace(5) %10, i32 0
  %.reload = load ptr addrspace(7), ptr addrspace(5) %11, align 32
  %dummy.udata = call i32 @lgc.load.user.data__i32(i32 20)
  %12 = mul i32 %dummy.udata, 24
  %13 = add i32 %3, %12
  %14 = inttoptr i32 %13 to ptr addrspace(5)
  %15 = getelementptr i8, ptr addrspace(5) %14, i32 0
  %dummy.reload = load ptr addrspace(7), ptr addrspace(5) %15, align 32
  %16 = load volatile i32, ptr addrspace(7) %.reload3, align 4
  %17 = icmp eq i32 %.reload6, %16
  %18 = zext i1 %17 to i32
  store i32 %18, ptr addrspace(7) %.reload, align 4
  ret void
}

declare i32 @lgc.load.user.data__i32(i32) #1

declare noundef i64 @llvm.amdgcn.s.getpc() #2

declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>) #1

declare ptr addrspace(32) @lgc.cps.alloc(i32) #3

declare i32 @lgc.cps.as.continuation.reference(...) #4

declare void @lgc.cps.jump(...) #5

declare ptr addrspace(32) @lgc.cps.peek(i32) #6

declare void @lgc.cps.complete()

declare !continuation !18 { ptr, ptr } @continuation.prototype._rgen_1(ptr, i1)

declare ptr @continuation.malloc(i32)

declare void @continuation.free(ptr)

declare token @llvm.coro.id.retcon(i32, i32, ptr, ptr, ptr, ptr) #7

declare ptr @llvm.coro.begin(token, ptr writeonly) #7

declare !continuation !21 { ptr, ptr } @continuation.prototype._rgen_1.resume.0(ptr, i1)

attributes #0 = { alwaysinline nounwind "target-features"=",+wavefrontsize32" }
attributes #1 = { nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind willreturn }
attributes #5 = { noreturn }
attributes #6 = { nounwind willreturn memory(inaccessiblemem: read) }
attributes #7 = { nounwind }

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}
!lgc.user.data.nodes = !{!4, !5, !6, !7, !8, !9, !10, !11, !12, !13}
!amdgpu.pal.metadata.msgpack = !{!14}
!continuation.stackAddrspace = !{!15}

!0 = !{i32 8, i32 4, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 262875531, i32 502344192, i32 854861601, i32 -1595331954, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16777216, i32 0, i32 0, i32 2}
!3 = !{i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 192, i32 0, i32 0, i32 32, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!4 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 0, i32 1, i32 4}
!5 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i64 0, i32 0, i32 4}
!6 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 4, i64 0, i32 1, i32 4}
!7 = !{!"DescriptorBuffer", i32 6, i32 0, i32 8, i32 4, i64 0, i32 2, i32 4}
!8 = !{!"DescriptorBuffer", i32 6, i32 0, i32 12, i32 4, i64 0, i32 3, i32 4}
!9 = !{!"StreamOutTableVaPtr", i32 11, i32 0, i32 1, i32 1, i32 0}
!10 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 5, i32 1, i32 3}
!11 = !{!"DescriptorBufferCompact", i32 10, i32 0, i32 0, i32 2, i64 93, i32 17, i32 2}
!12 = !{!"DescriptorBuffer", i32 6, i32 0, i32 2, i32 4, i64 93, i32 0, i32 4}
!13 = !{!"DescriptorBuffer", i32 6, i32 0, i32 6, i32 4, i64 93, i32 1, i32 4}
!14 = !{!"\82\B0amdpal.pipelines\91\83\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CF\C4jyX\05\E6M\0F\CF\03b\DD\05\C5\B6\DB\B9\AD.llpc_version\A467.0\AEamdpal.version\92\03\00"}
!15 = !{i32 5}
!16 = !{i32 5313}
!17 = !{i32 7}
!18 = !{ptr @_rgen_1}
!19 = !{i32 1}
!20 = !{i32 0}
!21 = !{ptr @_rgen_1.resume.0}
;.
; CHECK: [[META16]] = !{i32 5313}
; CHECK: [[META17]] = !{i32 7}
; CHECK: [[META18]] = !{ptr @_rgen_1}
; CHECK: [[META19]] = !{i32 1}
; CHECK: [[META20]] = !{i32 0}
; CHECK: [[META21]] = !{ptr @_rgen_1.resume.0}
;.
