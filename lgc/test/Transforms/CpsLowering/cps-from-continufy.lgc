; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-patch-entry-point-mutate' %s | FileCheck --check-prefixes=CHECK %s

%_rgen_1.Frame = type { ptr addrspace(7), ptr addrspace(7), i32 }

; Function Attrs: alwaysinline nounwind
define spir_func void @_rgen_1({} %state, i32 %rcr) #0 !spirv.ExecutionModel !15 !lgc.shaderstage !16 !continufy.stage !17 !continuation !18 !lgc.cps !17 {
.entry:
  %0 = call ptr addrspace(32) @lgc.cps.alloc(i32 96)
  %1 = call i64 @llvm.amdgcn.s.getpc()
  %2 = bitcast i64 %1 to <2 x i32>
  %3 = call i64 @llvm.amdgcn.s.getpc()
  %4 = bitcast i64 %3 to <2 x i32>
  %5 = call i64 @llvm.amdgcn.s.getpc()
  %6 = bitcast i64 %5 to <2 x i32>
  %7 = call i32 @lgc.load.user.data.i32(i32 20)
  %8 = insertelement <2 x i32> %6, i32 %7, i64 0
  %9 = bitcast <2 x i32> %8 to i64
  %10 = inttoptr i64 %9 to ptr addrspace(4)
  %11 = getelementptr i8, ptr addrspace(4) %10, i32 0
  %12 = load <2 x i32>, ptr addrspace(4) %11, align 8
  %13 = extractelement <2 x i32> %12, i64 0
  %14 = extractelement <2 x i32> %12, i64 1
  %15 = insertelement <4 x i32> poison, i32 %13, i64 0
  %16 = and i32 %14, 65535
  %17 = insertelement <4 x i32> %15, i32 %16, i64 1
  %18 = insertelement <4 x i32> %17, i32 -1, i64 2
  %19 = insertelement <4 x i32> %18, i32 553734060, i64 3
  %20 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %19)
  %21 = call i32 @lgc.load.user.data.i32(i32 0)
  %22 = insertelement <2 x i32> %4, i32 %21, i64 0
  %23 = bitcast <2 x i32> %22 to i64
  %24 = inttoptr i64 %23 to ptr addrspace(4)
  %25 = getelementptr i8, ptr addrspace(4) %24, i32 32
  %26 = load <4 x i32>, ptr addrspace(4) %25, align 16
  %27 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %26)
  %28 = getelementptr inbounds %_rgen_1.Frame, ptr addrspace(32) %0, i32 0, i32 0
  store ptr addrspace(7) %27, ptr addrspace(32) %28, align 32
  %29 = call i32 @lgc.load.user.data.i32(i32 0)
  %30 = insertelement <2 x i32> %2, i32 %29, i64 0
  %31 = bitcast <2 x i32> %30 to i64
  %32 = inttoptr i64 %31 to ptr addrspace(4)
  %33 = getelementptr i8, ptr addrspace(4) %32, i32 48
  %34 = load <4 x i32>, ptr addrspace(4) %33, align 16
  %35 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %34)
  %36 = getelementptr inbounds %_rgen_1.Frame, ptr addrspace(32) %0, i32 0, i32 1
  store ptr addrspace(7) %35, ptr addrspace(32) %36, align 32
  %37 = load volatile i32, ptr addrspace(7) %35, align 4
  %38 = getelementptr inbounds %_rgen_1.Frame, ptr addrspace(32) %0, i32 0, i32 2
  store i32 %37, ptr addrspace(32) %38, align 4
  %39 = add i32 %37, -37
  %40 = getelementptr inbounds i8, ptr addrspace(7) %20, i32 52
  %41 = load i64, ptr addrspace(7) %40, align 8
  %42 = getelementptr inbounds i8, ptr addrspace(7) %20, i32 60
  %43 = load i32, ptr addrspace(7) %42, align 4
  %44 = mul i32 %39, %43
  %45 = inttoptr i64 %41 to ptr addrspace(1)
  %46 = sext i32 %44 to i64
  %47 = getelementptr i8, ptr addrspace(1) %45, i64 %46
  %48 = load i64, ptr addrspace(1) %47, align 8
  %49 = inttoptr i64 %48 to ptr
  %50 = ptrtoint ptr %49 to i32
  %51 = or i32 %50, 1
  %52 = inttoptr i32 %51 to ptr
  %53 = call i32 (...) @lgc.cps.as.continuation.reference(ptr @_rgen_1.resume.0)
  call void (...) @lgc.cps.jump(i32 %51, i32 2, {} poison, i32 %53, [1 x i32] undef, i32 %39)
  unreachable
}

define void @_rgen_1.resume.0({} %0, i32 %1, [1 x i32] %2) !spirv.ExecutionModel !15 !lgc.shaderstage !16 !continufy.stage !17 !continuation !18 !lgc.cps !17 {
entryresume.0:
  %3 = call ptr addrspace(32) @lgc.cps.peek(i32 96)
  %4 = getelementptr inbounds %_rgen_1.Frame, ptr addrspace(32) %3, i32 0, i32 2
  %.reload6 = load i32, ptr addrspace(32) %4, align 4
  %5 = getelementptr inbounds %_rgen_1.Frame, ptr addrspace(32) %3, i32 0, i32 1
  %.reload3 = load ptr addrspace(7), ptr addrspace(32) %5, align 32
  %6 = getelementptr inbounds %_rgen_1.Frame, ptr addrspace(32) %3, i32 0, i32 0
  %.reload = load ptr addrspace(7), ptr addrspace(32) %6, align 32
  %7 = load volatile i32, ptr addrspace(7) %.reload3, align 4
  %8 = icmp eq i32 %.reload6, %7
  %9 = zext i1 %8 to i32
  store i32 %9, ptr addrspace(7) %.reload, align 4
  ret void
}

; Function Attrs: nounwind willreturn memory(none)
declare i32 @lgc.load.user.data.i32(i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.amdgcn.s.getpc() #2

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>) #1

; Function Attrs: nounwind willreturn memory(inaccessiblemem: readwrite)
declare ptr addrspace(32) @lgc.cps.alloc(i32) #6

; Function Attrs: nounwind willreturn
declare i32 @lgc.cps.as.continuation.reference(...) #3

; Function Attrs: noreturn
declare void @lgc.cps.jump(...) #5

; Function Attrs: nounwind willreturn memory(inaccessiblemem: read)
declare ptr addrspace(32) @lgc.cps.peek(i32) #7

attributes #0 = { alwaysinline nounwind "target-features"=",+wavefrontsize32" }
attributes #1 = { nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind willreturn }
attributes #4 = { nounwind }
attributes #5 = { noreturn }
attributes #6 = { nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #7 = { nounwind willreturn memory(inaccessiblemem: read) }

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}
!lgc.user.data.nodes = !{!4, !5, !6, !7, !8, !9, !10, !11, !12, !13}
!amdgpu.pal.metadata.msgpack = !{!14}

!0 = !{i32 8, i32 4, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 262875531, i32 502344192, i32 854861601, i32 -1595331954, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16777216, i32 0, i32 2}
!3 = !{i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 192, i32 0, i32 0, i32 32, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!4 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 0, i32 1, i32 4}
!5 = !{!"DescriptorBuffer", i32 6, i32 0, i32 0, i32 4, i64 0, i32 0, i32 4}
!6 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 4, i64 0, i32 1, i32 4}
!7 = !{!"DescriptorBuffer", i32 6, i32 0, i32 8, i32 4, i64 0, i32 2, i32 4}
!8 = !{!"DescriptorBuffer", i32 6, i32 0, i32 12, i32 4, i64 0, i32 3, i32 4}
!9 = !{!"StreamOutTableVaPtr", i32 11, i32 0, i32 1, i32 1, i32 0}
!10 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 5, i32 1, i32 3}
!11 = !{!"DescriptorBufferCompact", i32 10, i32 0, i32 0, i32 2, i64 93, i32 17, i32 2}
!12 = !{!"DescriptorBuffer", i32 6, i32 0, i32 2, i32 4, i64 93, i32 0, i32 4}
!13 = !{!"DescriptorBuffer", i32 6, i32 0, i32 6, i32 4, i64 93, i32 1, i32 4}
!14 = !{!"\82\B0amdpal.pipelines\91\83\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CF\C4jyX\05\E6M\0F\CF\03b\DD\05\C5\B6\DB\B9\AD.llpc_version\A467.0\AEamdpal.version\92\03\00"}
!15 = !{i32 5313}
!16 = !{i32 7}
!17 = !{i32 0}
!18 = !{ptr @_rgen_1}

; CHECK-LABEL: define {{[^@]+}}@_rgen_1
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[USERDATA0:%.*]], i32 inreg [[USERDATA1:%.*]], i32 inreg [[USERDATA2:%.*]], i32 inreg [[USERDATA3:%.*]], i32 inreg [[USERDATA4:%.*]], i32 inreg [[USERDATA5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[RCR:%.*]]) #[[ATTR0:[0-9]+]] align 64 !spirv.ExecutionModel !15 !lgc.shaderstage !16 !continufy.stage !17 !continuation !18 !lgc.cps !17 {
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i64 [[TMP1]] to <2 x i32>
; CHECK-NEXT:    store ptr addrspace(5) [[VSP]], ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP3]], i32 96
; CHECK-NEXT:    store ptr addrspace(5) [[TMP4]], ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP7]] to <2 x i32>
; CHECK-NEXT:    [[TMP9:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i64 [[TMP9]] to <2 x i32>
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @lgc.load.user.data.i32(i32 20)
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i32> [[TMP10]], i32 [[TMP11]], i64 0
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <2 x i32> [[TMP12]] to i64
; CHECK-NEXT:    [[TMP14:%.*]] = inttoptr i64 [[TMP13]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP14]], i32 0
; CHECK-NEXT:    [[TMP16:%.*]] = load <2 x i32>, ptr addrspace(4) [[TMP15]], align 8
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <2 x i32> [[TMP16]], i64 0
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <2 x i32> [[TMP16]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = insertelement <4 x i32> poison, i32 [[TMP17]], i64 0
; CHECK-NEXT:    [[TMP20:%.*]] = and i32 [[TMP18]], 65535
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <4 x i32> [[TMP19]], i32 [[TMP20]], i64 1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x i32> [[TMP21]], i32 -1, i64 2
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <4 x i32> [[TMP22]], i32 553734060, i64 3
; CHECK-NEXT:    [[TMP24:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP23]])
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @lgc.load.user.data.i32(i32 0)
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP25]], i64 0
; CHECK-NEXT:    [[TMP27:%.*]] = bitcast <2 x i32> [[TMP26]] to i64
; CHECK-NEXT:    [[TMP28:%.*]] = inttoptr i64 [[TMP27]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP28]], i32 32
; CHECK-NEXT:    [[TMP30:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP29]], align 16
; CHECK-NEXT:    [[TMP31:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP30]])
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[_RGEN_1_FRAME:%.*]], ptr addrspace(5) [[TMP3]], i32 0, i32 0
; CHECK-NEXT:    store ptr addrspace(7) [[TMP31]], ptr addrspace(5) [[TMP32]], align 32
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @lgc.load.user.data.i32(i32 0)
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP33]], i64 0
; CHECK-NEXT:    [[TMP35:%.*]] = bitcast <2 x i32> [[TMP34]] to i64
; CHECK-NEXT:    [[TMP36:%.*]] = inttoptr i64 [[TMP35]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP36]], i32 48
; CHECK-NEXT:    [[TMP38:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP37]], align 16
; CHECK-NEXT:    [[TMP39:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP38]])
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[_RGEN_1_FRAME]], ptr addrspace(5) [[TMP3]], i32 0, i32 1
; CHECK-NEXT:    store ptr addrspace(7) [[TMP39]], ptr addrspace(5) [[TMP40]], align 32
; CHECK-NEXT:    [[TMP41:%.*]] = load volatile i32, ptr addrspace(7) [[TMP39]], align 4
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[_RGEN_1_FRAME]], ptr addrspace(5) [[TMP3]], i32 0, i32 2
; CHECK-NEXT:    store i32 [[TMP41]], ptr addrspace(5) [[TMP42]], align 4
; CHECK-NEXT:    [[TMP43:%.*]] = add i32 [[TMP41]], -37
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP24]], i32 52
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr addrspace(7) [[TMP44]], align 8
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP24]], i32 60
; CHECK-NEXT:    [[TMP47:%.*]] = load i32, ptr addrspace(7) [[TMP46]], align 4
; CHECK-NEXT:    [[TMP48:%.*]] = mul i32 [[TMP43]], [[TMP47]]
; CHECK-NEXT:    [[TMP49:%.*]] = inttoptr i64 [[TMP45]] to ptr addrspace(1)
; CHECK-NEXT:    [[TMP50:%.*]] = sext i32 [[TMP48]] to i64
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr addrspace(1) [[TMP49]], i64 [[TMP50]]
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr addrspace(1) [[TMP51]], align 8
; CHECK-NEXT:    [[TMP53:%.*]] = inttoptr i64 [[TMP52]] to ptr
; CHECK-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[TMP53]] to i32
; CHECK-NEXT:    [[TMP55:%.*]] = or i32 [[TMP54]], 1
; CHECK-NEXT:    [[TMP56:%.*]] = inttoptr i32 [[TMP55]] to ptr
; CHECK-NEXT:    [[TMP57:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP58:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP59:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP58]], i32 [[TMP55]], 1
; CHECK-NEXT:    [[TMP60:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP59]], ptr addrspace(5) [[TMP57]], 2
; CHECK-NEXT:    [[TMP61:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP60]], i32 ptrtoint (ptr @_rgen_1.resume.0 to i32), 3
; CHECK-NEXT:    [[TMP62:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP61]], i32 undef, 4
; CHECK-NEXT:    [[TMP63:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP62]], i32 [[TMP43]], 5
; CHECK-NEXT:    [[TMP64:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP65:%.*]] = bitcast i64 [[TMP64]] to <2 x i32>
; CHECK-NEXT:    [[TMP66:%.*]] = extractelement <2 x i32> [[TMP65]], i64 0
; CHECK-NEXT:    [[TMP67:%.*]] = extractelement <2 x i32> [[TMP65]], i64 1
; CHECK-NEXT:    [[TMP68:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP69:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP70:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[TMP66]], i64 1
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[TMP67]], i64 2
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[USERDATA0]], i64 3
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[USERDATA1]], i64 4
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[USERDATA2]], i64 5
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <20 x i32> [[TMP76]], i32 [[USERDATA3]], i64 6
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <20 x i32> [[TMP77]], i32 [[USERDATA4]], i64 7
; CHECK-NEXT:    [[TMP79:%.*]] = insertelement <20 x i32> [[TMP78]], i32 [[USERDATA5]], i64 8
; CHECK-NEXT:    [[TMP80:%.*]] = insertelement <20 x i32> [[TMP79]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP81:%.*]] = insertelement <20 x i32> [[TMP80]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP82:%.*]] = insertelement <20 x i32> [[TMP81]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP83:%.*]] = insertelement <20 x i32> [[TMP82]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP84:%.*]] = insertelement <20 x i32> [[TMP83]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP85:%.*]] = insertelement <20 x i32> [[TMP84]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP86:%.*]] = insertelement <20 x i32> [[TMP85]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP87:%.*]] = insertelement <20 x i32> [[TMP86]], i32 [[TMP68]], i64 16
; CHECK-NEXT:    [[TMP88:%.*]] = insertelement <20 x i32> [[TMP87]], i32 [[TMP69]], i64 17
; CHECK-NEXT:    [[TMP89:%.*]] = insertelement <20 x i32> [[TMP88]], i32 [[TMP70]], i64 18
; CHECK-NEXT:    [[TMP90:%.*]] = insertelement <20 x i32> [[TMP89]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    [[TMP91:%.*]] = extractvalue { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP63]], 1
; CHECK-NEXT:    [[TMP92:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg(i32 [[TMP91]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP93:%.*]] = icmp ne i32 [[TMP92]], 0
; CHECK-NEXT:    [[TMP94:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP93]])
; CHECK-NEXT:    [[TMP95:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP94]], i1 true)
; CHECK-NEXT:    [[TMP96:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP92]], i32 [[TMP95]])
; CHECK-NEXT:    [[TMP97:%.*]] = icmp eq i32 [[TMP92]], [[TMP96]]
; CHECK-NEXT:    [[TMP98:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP97]])
; CHECK-NEXT:    [[TMP99:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP96]])
; CHECK-NEXT:    [[TMP100:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP98]])
; CHECK-NEXT:    [[TMP101:%.*]] = icmp eq i32 [[TMP99]], 0
; CHECK-NEXT:    br i1 [[TMP101]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP102:%.*]] = and i32 [[TMP99]], -64
; CHECK-NEXT:    [[TMP103:%.*]] = insertelement <2 x i32> [[TMP2]], i32 [[TMP102]], i64 0
; CHECK-NEXT:    [[TMP104:%.*]] = bitcast <2 x i32> [[TMP103]] to i64
; CHECK-NEXT:    [[TMP105:%.*]] = inttoptr i64 [[TMP104]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32p5i32i32i32s(ptr inreg [[TMP105]], i32 inreg [[TMP100]], <20 x i32> inreg [[TMP90]], { <3 x i32>, i32, ptr addrspace(5), i32, i32, i32 } [[TMP63]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@_rgen_1.resume.0
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[USERDATA0:%.*]], i32 inreg [[USERDATA1:%.*]], i32 inreg [[USERDATA2:%.*]], i32 inreg [[USERDATA3:%.*]], i32 inreg [[USERDATA4:%.*]], i32 inreg [[USERDATA5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[TMP0:%.*]], [1 x i32] [[TMP1:%.*]]) #[[ATTR1:[0-9]+]] align 64 !spirv.ExecutionModel !15 !lgc.shaderstage !16 !continufy.stage !17 !continuation !18 !lgc.cps !17 {
; CHECK-NEXT:  entryresume.0:
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to <2 x i32>
; CHECK-NEXT:    store ptr addrspace(5) [[VSP]], ptr addrspace(5) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP5]], i32 -96
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[_RGEN_1_FRAME:%.*]], ptr addrspace(5) [[TMP6]], i32 0, i32 2
; CHECK-NEXT:    [[DOTRELOAD6:%.*]] = load i32, ptr addrspace(5) [[TMP7]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[_RGEN_1_FRAME]], ptr addrspace(5) [[TMP6]], i32 0, i32 1
; CHECK-NEXT:    [[DOTRELOAD3:%.*]] = load ptr addrspace(7), ptr addrspace(5) [[TMP8]], align 32
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[_RGEN_1_FRAME]], ptr addrspace(5) [[TMP6]], i32 0, i32 0
; CHECK-NEXT:    [[DOTRELOAD:%.*]] = load ptr addrspace(7), ptr addrspace(5) [[TMP9]], align 32
; CHECK-NEXT:    [[TMP10:%.*]] = load volatile i32, ptr addrspace(7) [[DOTRELOAD3]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = icmp eq i32 [[DOTRELOAD6]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = zext i1 [[TMP11]] to i32
; CHECK-NEXT:    store i32 [[TMP12]], ptr addrspace(7) [[DOTRELOAD]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP13:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5) } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP14:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5) } [[TMP13]], i32 0, 1
; CHECK-NEXT:    [[TMP15:%.*]] = insertvalue { <3 x i32>, i32, ptr addrspace(5) } [[TMP14]], ptr addrspace(5) poison, 2
; CHECK-NEXT:    [[TMP16:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i64 [[TMP16]] to <2 x i32>
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <2 x i32> [[TMP17]], i64 0
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <2 x i32> [[TMP17]], i64 1
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <20 x i32> [[TMP23]], i32 [[TMP18]], i64 1
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <20 x i32> [[TMP24]], i32 [[TMP19]], i64 2
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <20 x i32> [[TMP25]], i32 [[USERDATA0]], i64 3
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <20 x i32> [[TMP26]], i32 [[USERDATA1]], i64 4
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <20 x i32> [[TMP27]], i32 [[USERDATA2]], i64 5
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <20 x i32> [[TMP28]], i32 [[USERDATA3]], i64 6
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <20 x i32> [[TMP29]], i32 [[USERDATA4]], i64 7
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <20 x i32> [[TMP30]], i32 [[USERDATA5]], i64 8
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <20 x i32> [[TMP31]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <20 x i32> [[TMP32]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <20 x i32> [[TMP33]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <20 x i32> [[TMP34]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <20 x i32> [[TMP35]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <20 x i32> [[TMP36]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <20 x i32> [[TMP37]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <20 x i32> [[TMP38]], i32 [[TMP20]], i64 16
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <20 x i32> [[TMP39]], i32 [[TMP21]], i64 17
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <20 x i32> [[TMP40]], i32 [[TMP22]], i64 18
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <20 x i32> [[TMP41]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    [[TMP43:%.*]] = extractvalue { <3 x i32>, i32, ptr addrspace(5) } [[TMP15]], 1
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg.1(i32 [[TMP43]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP45:%.*]] = icmp ne i32 [[TMP44]], 0
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP46]], i1 true)
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP44]], i32 [[TMP47]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i32 [[TMP44]], [[TMP48]]
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP49]])
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP48]])
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP50]])
; CHECK-NEXT:    [[TMP53:%.*]] = icmp eq i32 [[TMP51]], 0
; CHECK-NEXT:    br i1 [[TMP53]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP54:%.*]] = and i32 [[TMP51]], -64
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <2 x i32> [[TMP4]], i32 [[TMP54]], i64 0
; CHECK-NEXT:    [[TMP56:%.*]] = bitcast <2 x i32> [[TMP55]] to i64
; CHECK-NEXT:    [[TMP57:%.*]] = inttoptr i64 [[TMP56]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, ptr addrspace(5) }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32p5s(ptr inreg [[TMP57]], i32 inreg [[TMP52]], <20 x i32> inreg [[TMP42]], { <3 x i32>, i32, ptr addrspace(5) } [[TMP15]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
