; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature --check-globals
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-patch-entry-point-mutate' %s | FileCheck --check-prefixes=CHECK %s

declare void @lgc.cps.jump(...) noreturn
declare ptr addrspace(32) @lgc.cps.alloc(i32)
declare void @lgc.cps.free(i32)
declare i32 @lgc.cps.as.continuation.reference(ptr)
declare ptr addrspace(32) @lgc.cps.peek(i32)

define void @test.0({} %unused) !lgc.cps !{i32 1} !lgc.shaderstage !{i32 7} {
  %mem = call ptr addrspace(32) @lgc.cps.alloc(i32 10)   ; round up to 12 during lowering

  store i32 333, ptr addrspace(32) %mem

  %p1 = getelementptr i32, ptr addrspace(32) %mem, i32 1
  store i32 111, ptr addrspace(32) %p1

  %p2 = getelementptr i8, ptr addrspace(32) %mem, i32 9
  store i8 99, ptr addrspace(32) %p2

  %q1 = ptrtoint ptr addrspace(32) %p1 to i32

  %state = insertvalue { ptr addrspace(32) } poison, ptr addrspace(32) %p2, 0

  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.1)
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, { ptr addrspace(32) } %state, ptr addrspace(32) %p2, i32 %q1)
  unreachable
}

define void @test.1({} %no_state, ptr addrspace(32) %p2, i32 %q1) !lgc.cps !{i32 1} !lgc.shaderstage !{i32 7} {
  %p1 = inttoptr i32 %q1 to ptr addrspace(32)
  %n111 = load i32, ptr addrspace(32) %p1
  %n99 = load i8, ptr addrspace(32) %p2

  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.2)
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, {} poison)
  unreachable
}

define void @test.2({ ptr addrspace(32) } %state) !lgc.cps !{i32 1} !lgc.shaderstage !{i32 7} {
  %mem = call ptr addrspace(32) @lgc.cps.peek(i32 10)    ; round up to 12 during lowering
  %p2 = extractvalue { ptr addrspace(32) } %state, 0

  %n333 = load i32, ptr addrspace(32) %mem
  %n99 = load i8, ptr addrspace(32) %p2

  call void @lgc.cps.free(i32 10)   ; round up to 12 during lowering
  ret void
}
; CHECK-LABEL: define {{[^@]+}}@test.0
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps !2 !lgc.shaderstage !3 {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i32> [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP7]] to <2 x i32>
; CHECK-NEXT:    store ptr addrspace(5) [[VSP]], ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 12
; CHECK-NEXT:    store ptr addrspace(5) [[TMP10]], ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    store i32 333, ptr addrspace(5) [[TMP9]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i32, ptr addrspace(5) [[TMP9]], i32 1
; CHECK-NEXT:    store i32 111, ptr addrspace(5) [[TMP11]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 9
; CHECK-NEXT:    store i8 99, ptr addrspace(5) [[TMP12]], align 1
; CHECK-NEXT:    [[Q1:%.*]] = ptrtoint ptr addrspace(5) [[TMP11]] to i32
; CHECK-NEXT:    [[STATE:%.*]] = insertvalue { ptr addrspace(5) } poison, ptr addrspace(5) [[TMP12]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    store { ptr addrspace(5) } [[STATE]], ptr addrspace(5) [[TMP13]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP13]], i32 4
; CHECK-NEXT:    [[TMP15:%.*]] = ptrtoint ptr addrspace(5) [[TMP12]] to i32
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP16:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } { i32 ptrtoint (ptr getelementptr (i8, ptr @test.1, i32 1) to i32), ptr addrspace(5) poison, i32 poison, i32 poison }, ptr addrspace(5) [[TMP14]], 1
; CHECK-NEXT:    [[TMP17:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP16]], i32 [[TMP15]], 2
; CHECK-NEXT:    [[TMP18:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP17]], i32 [[Q1]], 3
; CHECK-NEXT:    [[TMP19:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i64 [[TMP19]] to <2 x i32>
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <2 x i32> [[TMP20]], i64 0
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <2 x i32> [[TMP20]], i64 1
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> [[TMP23]], i32 [[TMP21]], i64 1
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[TMP22]], i64 2
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP39:%.*]] = extractvalue { i32, ptr addrspace(5), i32, i32 } [[TMP18]], 0
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.set.inactive.{{(chain.arg.)?}}i32(i32 [[TMP39]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP42]], i1 true)
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP40]], i32 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = icmp eq i32 [[TMP40]], [[TMP44]]
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP44]])
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = and i32 [[TMP47]], -64
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP49]], i64 0
; CHECK-NEXT:    [[TMP51:%.*]] = bitcast <2 x i32> [[TMP50]] to i64
; CHECK-NEXT:    [[TMP52:%.*]] = inttoptr i64 [[TMP51]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5i32i32s(ptr inreg [[TMP52]], i32 inreg [[TMP48]], <16 x i32> inreg [[TMP38]], { i32, ptr addrspace(5), i32, i32 } [[TMP18]], i32 0)
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define {{[^@]+}}@test.1
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], ptr addrspace(5) [[P2:%.*]], i32 [[Q1:%.*]]) #[[ATTR1]] align 64 !lgc.cps !2 !lgc.shaderstage !3 {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i32> [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP7]] to <2 x i32>
; CHECK-NEXT:    store ptr addrspace(5) [[VSP]], ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[Q1]] to ptr addrspace(5)
; CHECK-NEXT:    [[N111:%.*]] = load i32, ptr addrspace(5) [[TMP9]], align 4
; CHECK-NEXT:    [[N99:%.*]] = load i8, ptr addrspace(5) [[P2]], align 1
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP11:%.*]] = insertvalue { i32, ptr addrspace(5) } { i32 ptrtoint (ptr getelementptr (i8, ptr @test.2, i32 1) to i32), ptr addrspace(5) poison }, ptr addrspace(5) [[TMP10]], 1
; CHECK-NEXT:    [[TMP12:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast i64 [[TMP12]] to <2 x i32>
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x i32> [[TMP13]], i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x i32> [[TMP13]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP17:%.*]] = insertelement <16 x i32> [[TMP16]], i32 [[TMP14]], i64 1
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <16 x i32> [[TMP17]], i32 [[TMP15]], i64 2
; CHECK-NEXT:    [[TMP19:%.*]] = insertelement <16 x i32> [[TMP18]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <16 x i32> [[TMP19]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <16 x i32> [[TMP20]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <16 x i32> [[TMP21]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <16 x i32> [[TMP22]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> [[TMP23]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP32:%.*]] = extractvalue { i32, ptr addrspace(5) } [[TMP11]], 0
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @llvm.amdgcn.set.inactive.{{(chain.arg.)?}}i32(i32 [[TMP32]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i32 [[TMP33]], 0
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP34]])
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP35]], i1 true)
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP33]], i32 [[TMP36]])
; CHECK-NEXT:    [[TMP38:%.*]] = icmp eq i32 [[TMP33]], [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP38]])
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP37]])
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = and i32 [[TMP40]], -64
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP42]], i64 0
; CHECK-NEXT:    [[TMP44:%.*]] = bitcast <2 x i32> [[TMP43]] to i64
; CHECK-NEXT:    [[TMP45:%.*]] = inttoptr i64 [[TMP44]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5) }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5s(ptr inreg [[TMP45]], i32 inreg [[TMP41]], <16 x i32> inreg [[TMP31]], { i32, ptr addrspace(5) } [[TMP11]], i32 0)
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define {{[^@]+}}@test.2
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]]) #[[ATTR1]] align 64 !lgc.cps !2 !lgc.shaderstage !3 {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i32> [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP7]] to <2 x i32>
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { ptr addrspace(5) }, ptr addrspace(5) [[TMP9]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP9]], ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP10]], i32 -12
; CHECK-NEXT:    [[P2:%.*]] = extractvalue { ptr addrspace(5) } [[CPS_STATE]], 0
; CHECK-NEXT:    [[N333:%.*]] = load i32, ptr addrspace(5) [[TMP11]], align 4
; CHECK-NEXT:    [[N99:%.*]] = load i8, ptr addrspace(5) [[P2]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP12]], i32 -12
; CHECK-NEXT:    store ptr addrspace(5) [[TMP13]], ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP14:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i64 [[TMP14]] to <2 x i32>
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <2 x i32> [[TMP15]], i64 0
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <2 x i32> [[TMP15]], i64 1
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP19:%.*]] = insertelement <16 x i32> [[TMP18]], i32 [[TMP16]], i64 1
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <16 x i32> [[TMP19]], i32 [[TMP17]], i64 2
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <16 x i32> [[TMP20]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <16 x i32> [[TMP21]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <16 x i32> [[TMP22]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> [[TMP23]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @llvm.amdgcn.set.inactive.{{(chain.arg.)?}}i32(i32 0, i32 [[VCR]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp ne i32 [[TMP34]], 0
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP35]])
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP36]], i1 true)
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP34]], i32 [[TMP37]])
; CHECK-NEXT:    [[TMP39:%.*]] = icmp eq i32 [[TMP34]], [[TMP38]]
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP39]])
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP38]])
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP40]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp eq i32 [[TMP41]], 0
; CHECK-NEXT:    br i1 [[TMP43]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP44:%.*]] = and i32 [[TMP41]], -64
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP44]], i64 0
; CHECK-NEXT:    [[TMP46:%.*]] = bitcast <2 x i32> [[TMP45]] to i64
; CHECK-NEXT:    [[TMP47:%.*]] = inttoptr i64 [[TMP46]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5) }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5s(ptr inreg [[TMP47]], i32 inreg [[TMP42]], <16 x i32> inreg [[TMP33]], { i32, ptr addrspace(5) } { i32 0, ptr addrspace(5) poison }, i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
;.
; CHECK: attributes #[[ATTR0:[0-9]+]] = { noreturn }
; CHECK: attributes #[[ATTR1]] = { memory(readwrite) "amdgpu-memory-bound"="false" "amdgpu-prealloc-sgpr-spill-vgprs" "amdgpu-unroll-threshold"="700" "amdgpu-wave-limiter"="false" }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { convergent nocallback nofree nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR4:[0-9]+]] = { convergent nocallback nofree nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR5:[0-9]+]] = { convergent noreturn nounwind }
;.
; CHECK: [[META0:![0-9]+]] = !{!""}
; CHECK: [[META1:![0-9]+]] = !{!"\82\B0amdpal.pipelines\91\83\B1.shader_functions\83\A6test.0\81\B4.frontend_stack_size\10\A6test.1\81\B4.frontend_stack_size\00\A6test.2\81\B4.frontend_stack_size\00\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AEamdpal.version\92\03\00"}
; CHECK: [[META2:![0-9]+]] = !{i32 1}
; CHECK: [[META3:![0-9]+]] = !{i32 7}
;.
