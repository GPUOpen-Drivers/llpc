; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-patch-entry-point-mutate' %s | FileCheck --check-prefixes=CHECK %s
; REQUIRES: do-not-run-me

declare void @lgc.cps.jump(...) noreturn
declare ptr addrspace(32) @lgc.cps.alloc(i32)
declare void @lgc.cps.free(i32)
declare i32 @lgc.cps.as.continuation.reference(ptr)
declare ptr addrspace(32) @lgc.cps.peek(i32)

define void @test.0({} %unused) !lgc.cps !{i32 1} {
  %mem = call ptr addrspace(32) @lgc.cps.alloc(i32 10)   ; round up to 12 during lowering

  store i32 333, ptr addrspace(32) %mem

  %p1 = getelementptr i32, ptr addrspace(32) %mem, i32 1
  store i32 111, ptr addrspace(32) %p1

  %p2 = getelementptr i8, ptr addrspace(32) %mem, i32 9
  store i8 99, ptr addrspace(32) %p2

  %q1 = ptrtoint ptr addrspace(32) %p1 to i32

  %state = insertvalue { ptr addrspace(32) } poison, ptr addrspace(32) %p2, 0

  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.1)
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, { ptr addrspace(32) } %state, ptr addrspace(32) %p2, i32 %q1)
  unreachable
}

define void @test.1({} %no_state, ptr addrspace(32) %p2, i32 %q1) !lgc.cps !{i32 1} {
  %p1 = inttoptr i32 %q1 to ptr addrspace(32)
  %n111 = load i32, ptr addrspace(32) %p1
  %n99 = load i8, ptr addrspace(32) %p2

  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.2)
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, {} poison)
  unreachable
}

define void @test.2({ ptr addrspace(32) } %state) !lgc.cps !{i32 1} {
  %mem = call ptr addrspace(32) @lgc.cps.peek(i32 10)    ; round up to 12 during lowering
  %p2 = extractvalue { ptr addrspace(32) } %state, 0

  %n333 = load i32, ptr addrspace(32) %mem
  %n99 = load i8, ptr addrspace(32) %p2

  call void @lgc.cps.free(i32 10)   ; round up to 12 during lowering
  ret void
}
; CHECK-LABEL: define {{[^@]+}}@test.0
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], i32 inreg [[PERSHADERTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[TMP0:%.*]], i32 inreg [[TMP1:%.*]], i32 inreg [[TMP2:%.*]], i32 inreg [[TMP3:%.*]], i32 inreg [[TMP4:%.*]], i32 inreg [[TMP5:%.*]], i32 inreg [[TMP6:%.*]], i32 inreg [[TMP7:%.*]], i32 inreg [[TMP8:%.*]], i32 inreg [[TMP9:%.*]], i32 inreg [[TMP10:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps !2 {
; CHECK-NEXT:    [[TMP12:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to <2 x i32>
; CHECK-NEXT:    store ptr addrspace(5) [[VSP]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP15]], i32 12
; CHECK-NEXT:    store ptr addrspace(5) [[TMP16]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    store i32 333, ptr addrspace(5) [[TMP15]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i32, ptr addrspace(5) [[TMP15]], i32 1
; CHECK-NEXT:    store i32 111, ptr addrspace(5) [[TMP17]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP15]], i32 9
; CHECK-NEXT:    store i8 99, ptr addrspace(5) [[TMP18]], align 1
; CHECK-NEXT:    [[Q1:%.*]] = ptrtoint ptr addrspace(5) [[TMP17]] to i32
; CHECK-NEXT:    [[STATE:%.*]] = insertvalue { ptr addrspace(5) } poison, ptr addrspace(5) [[TMP18]], 0
; CHECK-NEXT:    [[TMP19:%.*]] = or i32 ptrtoint (ptr @test.1 to i32), 1
; CHECK-NEXT:    [[TMP20:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    store { ptr addrspace(5) } [[STATE]], ptr addrspace(5) [[TMP20]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP20]], i32 4
; CHECK-NEXT:    [[TMP22:%.*]] = ptrtoint ptr addrspace(5) [[TMP18]] to i32
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP23:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } poison, i32 [[TMP19]], 0
; CHECK-NEXT:    [[TMP24:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP23]], ptr addrspace(5) [[TMP21]], 1
; CHECK-NEXT:    [[TMP25:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP24]], i32 [[TMP22]], 2
; CHECK-NEXT:    [[TMP26:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP25]], i32 [[Q1]], 3
; CHECK-NEXT:    [[TMP27:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP28:%.*]] = bitcast i64 [[TMP27]] to <2 x i32>
; CHECK-NEXT:    [[TMP29:%.*]] = extractelement <2 x i32> [[TMP28]], i64 0
; CHECK-NEXT:    [[TMP30:%.*]] = extractelement <2 x i32> [[TMP28]], i64 1
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[PERSHADERTABLE]], i64 1
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[TMP29]], i64 2
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[TMP30]], i64 3
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[TMP0]], i64 4
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[TMP1]], i64 5
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[TMP2]], i64 6
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[TMP3]], i64 7
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[TMP4]], i64 8
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <16 x i32> [[TMP39]], i32 [[TMP5]], i64 9
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <16 x i32> [[TMP40]], i32 [[TMP6]], i64 10
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <16 x i32> [[TMP41]], i32 [[TMP7]], i64 11
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <16 x i32> [[TMP42]], i32 [[TMP8]], i64 12
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <16 x i32> [[TMP43]], i32 [[TMP9]], i64 13
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <16 x i32> [[TMP44]], i32 [[TMP10]], i64 14
; CHECK-NEXT:    [[TMP46:%.*]] = insertelement <16 x i32> [[TMP45]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i32, ptr addrspace(5), i32, i32 } [[TMP26]], 0
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg(i32 [[TMP47]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp ne i32 [[TMP48]], 0
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP49]])
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP50]], i1 true)
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP48]], i32 [[TMP51]])
; CHECK-NEXT:    [[TMP53:%.*]] = icmp eq i32 [[TMP48]], [[TMP52]]
; CHECK-NEXT:    [[TMP54:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP53]])
; CHECK-NEXT:    [[TMP55:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP52]])
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP54]])
; CHECK-NEXT:    [[TMP57:%.*]] = icmp eq i32 [[TMP55]], 0
; CHECK-NEXT:    br i1 [[TMP57]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP58:%.*]] = and i32 [[TMP55]], -64
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <2 x i32> [[TMP14]], i32 [[TMP58]], i64 0
; CHECK-NEXT:    [[TMP60:%.*]] = bitcast <2 x i32> [[TMP59]] to i64
; CHECK-NEXT:    [[TMP61:%.*]] = inttoptr i64 [[TMP60]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5i32i32s(ptr [[TMP61]], i32 [[TMP56]], <16 x i32> [[TMP46]], { i32, ptr addrspace(5), i32, i32 } [[TMP26]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@test.1
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], i32 inreg [[PERSHADERTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[TMP0:%.*]], i32 inreg [[TMP1:%.*]], i32 inreg [[TMP2:%.*]], i32 inreg [[TMP3:%.*]], i32 inreg [[TMP4:%.*]], i32 inreg [[TMP5:%.*]], i32 inreg [[TMP6:%.*]], i32 inreg [[TMP7:%.*]], i32 inreg [[TMP8:%.*]], i32 inreg [[TMP9:%.*]], i32 inreg [[TMP10:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], ptr addrspace(5) [[P2:%.*]], i32 [[Q1:%.*]]) #[[ATTR1]] align 64 !lgc.cps !2 {
; CHECK-NEXT:    [[TMP12:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to <2 x i32>
; CHECK-NEXT:    store ptr addrspace(5) [[VSP]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = inttoptr i32 [[Q1]] to ptr addrspace(5)
; CHECK-NEXT:    [[N111:%.*]] = load i32, ptr addrspace(5) [[TMP15]], align 4
; CHECK-NEXT:    [[N99:%.*]] = load i8, ptr addrspace(5) [[P2]], align 1
; CHECK-NEXT:    [[TMP16:%.*]] = or i32 ptrtoint (ptr @test.2 to i32), 1
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP18:%.*]] = insertvalue { i32, ptr addrspace(5) } poison, i32 [[TMP16]], 0
; CHECK-NEXT:    [[TMP19:%.*]] = insertvalue { i32, ptr addrspace(5) } [[TMP18]], ptr addrspace(5) [[TMP17]], 1
; CHECK-NEXT:    [[TMP20:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i64 [[TMP20]] to <2 x i32>
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <2 x i32> [[TMP21]], i64 0
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <2 x i32> [[TMP21]], i64 1
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[PERSHADERTABLE]], i64 1
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[TMP22]], i64 2
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[TMP23]], i64 3
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[TMP0]], i64 4
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[TMP1]], i64 5
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[TMP2]], i64 6
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[TMP3]], i64 7
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[TMP4]], i64 8
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[TMP5]], i64 9
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[TMP6]], i64 10
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[TMP7]], i64 11
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[TMP8]], i64 12
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[TMP9]], i64 13
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[TMP10]], i64 14
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP40:%.*]] = extractvalue { i32, ptr addrspace(5) } [[TMP19]], 0
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg.1(i32 [[TMP40]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp ne i32 [[TMP41]], 0
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP42]])
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP43]], i1 true)
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP41]], i32 [[TMP44]])
; CHECK-NEXT:    [[TMP46:%.*]] = icmp eq i32 [[TMP41]], [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP46]])
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP45]])
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP47]])
; CHECK-NEXT:    [[TMP50:%.*]] = icmp eq i32 [[TMP48]], 0
; CHECK-NEXT:    br i1 [[TMP50]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP51:%.*]] = and i32 [[TMP48]], -64
; CHECK-NEXT:    [[TMP52:%.*]] = insertelement <2 x i32> [[TMP14]], i32 [[TMP51]], i64 0
; CHECK-NEXT:    [[TMP53:%.*]] = bitcast <2 x i32> [[TMP52]] to i64
; CHECK-NEXT:    [[TMP54:%.*]] = inttoptr i64 [[TMP53]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5) }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5s(ptr [[TMP54]], i32 [[TMP49]], <16 x i32> [[TMP39]], { i32, ptr addrspace(5) } [[TMP19]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@test.2
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], i32 inreg [[PERSHADERTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[TMP0:%.*]], i32 inreg [[TMP1:%.*]], i32 inreg [[TMP2:%.*]], i32 inreg [[TMP3:%.*]], i32 inreg [[TMP4:%.*]], i32 inreg [[TMP5:%.*]], i32 inreg [[TMP6:%.*]], i32 inreg [[TMP7:%.*]], i32 inreg [[TMP8:%.*]], i32 inreg [[TMP9:%.*]], i32 inreg [[TMP10:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]]) #[[ATTR1]] align 64 !lgc.cps !2 {
; CHECK-NEXT:    [[TMP12:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to <2 x i32>
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { ptr addrspace(5) }, ptr addrspace(5) [[TMP15]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP15]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP16]], i32 -12
; CHECK-NEXT:    [[P2:%.*]] = extractvalue { ptr addrspace(5) } [[CPS_STATE]], 0
; CHECK-NEXT:    [[N333:%.*]] = load i32, ptr addrspace(5) [[TMP17]], align 4
; CHECK-NEXT:    [[N99:%.*]] = load i8, ptr addrspace(5) [[P2]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP18]], i32 -12
; CHECK-NEXT:    store ptr addrspace(5) [[TMP19]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP20:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i64 [[TMP20]] to <2 x i32>
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <2 x i32> [[TMP21]], i64 0
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <2 x i32> [[TMP21]], i64 1
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[PERSHADERTABLE]], i64 1
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[TMP22]], i64 2
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[TMP23]], i64 3
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[TMP0]], i64 4
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[TMP1]], i64 5
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[TMP2]], i64 6
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[TMP3]], i64 7
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[TMP4]], i64 8
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[TMP5]], i64 9
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[TMP6]], i64 10
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[TMP7]], i64 11
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[TMP8]], i64 12
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[TMP9]], i64 13
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[TMP10]], i64 14
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg.2(i32 0, i32 [[VCR]])
; CHECK-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP42]], i1 true)
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP40]], i32 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = icmp eq i32 [[TMP40]], [[TMP44]]
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP44]])
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i32 [[TMP47]], 0
; CHECK-NEXT:    br i1 [[TMP49]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP50:%.*]] = and i32 [[TMP47]], -64
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <2 x i32> [[TMP14]], i32 [[TMP50]], i64 0
; CHECK-NEXT:    [[TMP52:%.*]] = bitcast <2 x i32> [[TMP51]] to i64
; CHECK-NEXT:    [[TMP53:%.*]] = inttoptr i64 [[TMP52]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5) }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5s(ptr [[TMP53]], i32 [[TMP48]], <16 x i32> [[TMP39]], { i32, ptr addrspace(5) } { i32 0, ptr addrspace(5) poison }, i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
