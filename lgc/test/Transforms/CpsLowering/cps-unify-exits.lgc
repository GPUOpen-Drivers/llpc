; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-patch-entry-point-mutate' %s | FileCheck --check-prefixes=CHECK %s

declare void @lgc.cps.jump(...) noreturn

define void @unify_jumps({i32} %state, i32 %arg, ptr %table) !lgc.cps !0 !lgc.shaderstage !{i32 7} {
entry:
  %v = extractvalue {i32} %state, 0
  %cond = icmp ult i32 %v, 3
  br i1 %cond, label %then, label %else

then:
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0
  %then.arg = add i32 %arg, 1
  %v.then = mul i32 %v, 2
  %state.then = insertvalue {i32} poison, i32 %v.then, 0
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, {i32} %state.then, i32 %then.arg)
  unreachable

else:
  %table.1 = getelementptr i32, ptr %table, i32 1
  %cr.else = load i32, ptr %table.1
  %else.arg = uitofp i32 %arg to float
  call void (...) @lgc.cps.jump(i32 %cr.else, i32 2, {} poison, float %else.arg, i32 5)
  unreachable
}

define void @unify_jump_ret({i32} %state, i32 %arg, ptr %table) !lgc.cps !0 !lgc.shaderstage !{i32 7} {
entry:
  %v = extractvalue {i32} %state, 0
  %cond = icmp ult i32 %v, 3
  br i1 %cond, label %then, label %else

then:
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0
  %then.arg = add i32 %arg, 1
  %v.then = mul i32 %v, 2
  %state.then = insertvalue {i32} poison, i32 %v.then, 0
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, {i32} %state.then, i32 %then.arg)
  unreachable

else:
  ret void
}

!0 = !{i32 1} ; level 1
; CHECK-LABEL: define {{[^@]+}}@unify_jumps
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps !2 !lgc.shaderstage !3 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i64 [[TMP1]] to <2 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <2 x i32> [[TMP2]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <2 x i32> [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = inttoptr i64 [[TMP4]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP6]] to <2 x i32>
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { i32 }, ptr addrspace(5) [[TMP8]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP8]], ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    [[V:%.*]] = extractvalue { i32 } [[CPS_STATE]], 0
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[V]], 3
; CHECK-NEXT:    br i1 [[COND]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[V_THEN:%.*]] = mul i32 [[V]], 2
; CHECK-NEXT:    [[STATE_THEN:%.*]] = insertvalue { i32 } poison, i32 [[V_THEN]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    store { i32 } [[STATE_THEN]], ptr addrspace(5) [[TMP9]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       else:
; CHECK-NEXT:    [[TABLE_1:%.*]] = getelementptr i32, ptr [[TABLE]], i32 1
; CHECK-NEXT:    [[CR_ELSE:%.*]] = load i32, ptr [[TABLE_1]], align 4
; CHECK-NEXT:    [[ELSE_ARG:%.*]] = uitofp i32 [[ARG]] to float
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast float [[ELSE_ARG]] to i32
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[CR_ELSE]], [[ELSE]] ], [ [[CR_THEN]], [[THEN]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi ptr addrspace(5) [ [[TMP11]], [[ELSE]] ], [ [[TMP10]], [[THEN]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[TMP12]], [[ELSE]] ], [ [[THEN_ARG]], [[THEN]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi i32 [ 5, [[ELSE]] ], [ poison, [[THEN]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } poison, i32 [[TMP13]], 0
; CHECK-NEXT:    [[TMP18:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP17]], ptr addrspace(5) [[TMP14]], 1
; CHECK-NEXT:    [[TMP19:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP18]], i32 [[TMP15]], 2
; CHECK-NEXT:    [[TMP20:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP19]], i32 [[TMP16]], 3
; CHECK-NEXT:    [[TMP21:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast i64 [[TMP21]] to <2 x i32>
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <2 x i32> [[TMP22]], i64 0
; CHECK-NEXT:    [[TMP24:%.*]] = extractelement <2 x i32> [[TMP22]], i64 1
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[TMP23]], i64 1
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[TMP24]], i64 2
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <16 x i32> [[TMP39]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, ptr addrspace(5), i32, i32 } [[TMP20]], 0
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg(i32 [[TMP41]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp ne i32 [[TMP42]], 0
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP44]], i1 true)
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP42]], i32 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = icmp eq i32 [[TMP42]], [[TMP46]]
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP47]])
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP46]])
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP48]])
; CHECK-NEXT:    [[TMP51:%.*]] = icmp eq i32 [[TMP49]], 0
; CHECK-NEXT:    br i1 [[TMP51]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP52:%.*]] = and i32 [[TMP49]], -64
; CHECK-NEXT:    [[TMP53:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP52]], i64 0
; CHECK-NEXT:    [[TMP54:%.*]] = bitcast <2 x i32> [[TMP53]] to i64
; CHECK-NEXT:    [[TMP55:%.*]] = inttoptr i64 [[TMP54]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5i32i32s(ptr inreg [[TMP55]], i32 inreg [[TMP50]], <16 x i32> inreg [[TMP40]], { i32, ptr addrspace(5), i32, i32 } [[TMP20]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@unify_jump_ret
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]]) #[[ATTR1]] align 64 !lgc.cps !2 !lgc.shaderstage !3 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i64 [[TMP1]] to <2 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <2 x i32> [[TMP2]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <2 x i32> [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = inttoptr i64 [[TMP4]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP6]] to <2 x i32>
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { i32 }, ptr addrspace(5) [[TMP8]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP8]], ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    [[V:%.*]] = extractvalue { i32 } [[CPS_STATE]], 0
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[V]], 3
; CHECK-NEXT:    br i1 [[COND]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[V_THEN:%.*]] = mul i32 [[V]], 2
; CHECK-NEXT:    [[STATE_THEN:%.*]] = insertvalue { i32 } poison, i32 [[V_THEN]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP0]], align 4
; CHECK-NEXT:    store { i32 } [[STATE_THEN]], ptr addrspace(5) [[TMP9]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       else:
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP11:%.*]] = phi i32 [ [[CR_THEN]], [[THEN]] ], [ 0, [[ELSE]] ]
; CHECK-NEXT:    [[TMP12:%.*]] = phi ptr addrspace(5) [ [[TMP10]], [[THEN]] ], [ poison, [[ELSE]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[THEN_ARG]], [[THEN]] ], [ poison, [[ELSE]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } poison, i32 [[TMP11]], 0
; CHECK-NEXT:    [[TMP15:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } [[TMP14]], ptr addrspace(5) [[TMP12]], 1
; CHECK-NEXT:    [[TMP16:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } [[TMP15]], i32 [[TMP13]], 2
; CHECK-NEXT:    [[TMP17:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i64 [[TMP17]] to <2 x i32>
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <2 x i32> [[TMP18]], i64 0
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <2 x i32> [[TMP18]], i64 1
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <16 x i32> [[TMP21]], i32 [[TMP19]], i64 1
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <16 x i32> [[TMP22]], i32 [[TMP20]], i64 2
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i32> [[TMP23]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <16 x i32> [[TMP24]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <16 x i32> [[TMP25]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP27:%.*]] = insertelement <16 x i32> [[TMP26]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> [[TMP27]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i32, ptr addrspace(5), i32 } [[TMP16]], 0
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg.1(i32 [[TMP37]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP39:%.*]] = icmp ne i32 [[TMP38]], 0
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP39]])
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP40]], i1 true)
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP38]], i32 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp eq i32 [[TMP38]], [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP42]])
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP44]])
; CHECK-NEXT:    [[TMP47:%.*]] = icmp eq i32 [[TMP45]], 0
; CHECK-NEXT:    br i1 [[TMP47]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP48:%.*]] = and i32 [[TMP45]], -64
; CHECK-NEXT:    [[TMP49:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP48]], i64 0
; CHECK-NEXT:    [[TMP50:%.*]] = bitcast <2 x i32> [[TMP49]] to i64
; CHECK-NEXT:    [[TMP51:%.*]] = inttoptr i64 [[TMP50]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5i32s(ptr inreg [[TMP51]], i32 inreg [[TMP46]], <16 x i32> inreg [[TMP36]], { i32, ptr addrspace(5), i32 } [[TMP16]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
