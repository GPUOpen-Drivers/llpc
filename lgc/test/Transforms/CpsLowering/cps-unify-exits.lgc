
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -lgc-use-init-whole-wave -passes="require<lgc-pipeline-state>,lgc-mutate-entry-point" %s | FileCheck --check-prefixes=CHECK %s

; REQUIRES: llvm-main-revision-ge-528172

declare void @lgc.cps.jump(...) #0

define void @unify_jumps(i32 %arg, ptr %table) !lgc.cps !1 !lgc.shaderstage !2 {
; CHECK-LABEL: define amdgpu_cs_chain void @unify_jumps(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]], i32 [[INACTIVE_VGPR2:%.*]], i32 [[INACTIVE_VGPR3:%.*]], i32 [[INACTIVE_VGPR4:%.*]], i32 [[INACTIVE_VGPR5:%.*]], i32 [[INACTIVE_VGPR6:%.*]], i32 [[INACTIVE_VGPR7:%.*]], i32 [[INACTIVE_VGPR8:%.*]], i32 [[INACTIVE_VGPR9:%.*]], i32 [[INACTIVE_VGPR10:%.*]], i32 [[INACTIVE_VGPR11:%.*]], i32 [[INACTIVE_VGPR12:%.*]], i32 [[INACTIVE_VGPR13:%.*]], i32 [[INACTIVE_VGPR14:%.*]], i32 [[INACTIVE_VGPR15:%.*]], i32 [[INACTIVE_VGPR16:%.*]], i32 [[INACTIVE_VGPR17:%.*]], i32 [[INACTIVE_VGPR18:%.*]], i32 [[INACTIVE_VGPR19:%.*]], i32 [[INACTIVE_VGPR20:%.*]], i32 [[INACTIVE_VGPR21:%.*]], i32 [[INACTIVE_VGPR22:%.*]], i32 [[INACTIVE_VGPR23:%.*]], i32 [[INACTIVE_VGPR24:%.*]], i32 [[INACTIVE_VGPR25:%.*]], i32 [[INACTIVE_VGPR26:%.*]], i32 [[INACTIVE_VGPR27:%.*]], i32 [[INACTIVE_VGPR28:%.*]]) #[[ATTR1:[0-9]+]] align 128 !lgc.cps [[META5:![0-9]+]] !lgc.shaderstage [[META6:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TABLE]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i32> [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[TMP6]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.dead.i32()
; CHECK-NEXT:    [[TMP10:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP10]], label %[[BB11:.*]], label %[[TAIL_BLOCK:.*]]
; CHECK:       [[BB11]]:
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[ARG]], 3
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    br label %[[TAIL_BLOCK]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[TABLE_1:%.*]] = getelementptr i32, ptr [[TABLE]], i32 1
; CHECK-NEXT:    [[CR_ELSE:%.*]] = load i32, ptr [[TABLE_1]], align 4
; CHECK-NEXT:    [[ELSE_ARG:%.*]] = uitofp i32 [[ARG]] to float
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast float [[ELSE_ARG]] to i32
; CHECK-NEXT:    br label %[[TAIL_BLOCK]]
; CHECK:       [[TAIL_BLOCK]]:
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[VCR]], %[[ENTRY]] ], [ [[CR_ELSE]], %[[ELSE]] ], [ [[CR_THEN]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi i32 [ [[ARG]], %[[ENTRY]] ], [ poison, %[[ELSE]] ], [ poison, %[[THEN]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[TMP7]], %[[ENTRY]] ], [ poison, %[[ELSE]] ], [ poison, %[[THEN]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi i32 [ [[TMP8]], %[[ENTRY]] ], [ poison, %[[ELSE]] ], [ poison, %[[THEN]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi i32 [ [[INACTIVE_VGPR]], %[[ENTRY]] ], [ [[TMP12]], %[[ELSE]] ], [ [[THEN_ARG]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], %[[ENTRY]] ], [ 5, %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi i32 [ [[INACTIVE_VGPR2]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[INACTIVE_VGPR3]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi i32 [ [[INACTIVE_VGPR4]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = phi i32 [ [[INACTIVE_VGPR5]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi i32 [ [[INACTIVE_VGPR6]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi i32 [ [[INACTIVE_VGPR7]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi i32 [ [[INACTIVE_VGPR8]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = phi i32 [ [[INACTIVE_VGPR9]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = phi i32 [ [[INACTIVE_VGPR10]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = phi i32 [ [[INACTIVE_VGPR11]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = phi i32 [ [[INACTIVE_VGPR12]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP30:%.*]] = phi i32 [ [[INACTIVE_VGPR13]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP31:%.*]] = phi i32 [ [[INACTIVE_VGPR14]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi i32 [ [[INACTIVE_VGPR15]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi i32 [ [[INACTIVE_VGPR16]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = phi i32 [ [[INACTIVE_VGPR17]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi i32 [ [[INACTIVE_VGPR18]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = phi i32 [ [[INACTIVE_VGPR19]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = phi i32 [ [[INACTIVE_VGPR20]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP38:%.*]] = phi i32 [ [[INACTIVE_VGPR21]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP39:%.*]] = phi i32 [ [[INACTIVE_VGPR22]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = phi i32 [ [[INACTIVE_VGPR23]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = phi i32 [ [[INACTIVE_VGPR24]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP42:%.*]] = phi i32 [ [[INACTIVE_VGPR25]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP43:%.*]] = phi i32 [ [[INACTIVE_VGPR26]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP44:%.*]] = phi i32 [ [[INACTIVE_VGPR27]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP45:%.*]] = phi i32 [ [[INACTIVE_VGPR28]], %[[ENTRY]] ], [ [[TMP9]], %[[ELSE]] ], [ [[TMP9]], %[[THEN]] ]
; CHECK-NEXT:    [[TMP46:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP47:%.*]] = bitcast i64 [[TMP46]] to <2 x i32>
; CHECK-NEXT:    [[TMP48:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP49:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP48]], i32 [[TMP13]], 1
; CHECK-NEXT:    [[TMP50:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP49]], i32 [[TMP14]], 2
; CHECK-NEXT:    [[TMP51:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP50]], i32 [[TMP15]], 3
; CHECK-NEXT:    [[TMP52:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP51]], i32 [[TMP16]], 4
; CHECK-NEXT:    [[TMP53:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP52]], i32 [[TMP17]], 5
; CHECK-NEXT:    [[TMP54:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP53]], i32 [[TMP18]], 6
; CHECK-NEXT:    [[TMP55:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP54]], i32 [[TMP19]], 7
; CHECK-NEXT:    [[TMP56:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP55]], i32 [[TMP20]], 8
; CHECK-NEXT:    [[TMP57:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP56]], i32 [[TMP21]], 9
; CHECK-NEXT:    [[TMP58:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP57]], i32 [[TMP22]], 10
; CHECK-NEXT:    [[TMP59:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP58]], i32 [[TMP23]], 11
; CHECK-NEXT:    [[TMP60:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP59]], i32 [[TMP24]], 12
; CHECK-NEXT:    [[TMP61:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP60]], i32 [[TMP25]], 13
; CHECK-NEXT:    [[TMP62:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP61]], i32 [[TMP26]], 14
; CHECK-NEXT:    [[TMP63:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP62]], i32 [[TMP27]], 15
; CHECK-NEXT:    [[TMP64:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP63]], i32 [[TMP28]], 16
; CHECK-NEXT:    [[TMP65:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP64]], i32 [[TMP29]], 17
; CHECK-NEXT:    [[TMP66:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP65]], i32 [[TMP30]], 18
; CHECK-NEXT:    [[TMP67:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP66]], i32 [[TMP31]], 19
; CHECK-NEXT:    [[TMP68:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP67]], i32 [[TMP32]], 20
; CHECK-NEXT:    [[TMP69:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP68]], i32 [[TMP33]], 21
; CHECK-NEXT:    [[TMP70:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP69]], i32 [[TMP34]], 22
; CHECK-NEXT:    [[TMP71:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP70]], i32 [[TMP35]], 23
; CHECK-NEXT:    [[TMP72:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP71]], i32 [[TMP36]], 24
; CHECK-NEXT:    [[TMP73:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP72]], i32 [[TMP37]], 25
; CHECK-NEXT:    [[TMP74:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP73]], i32 [[TMP38]], 26
; CHECK-NEXT:    [[TMP75:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP74]], i32 [[TMP39]], 27
; CHECK-NEXT:    [[TMP76:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP75]], i32 [[TMP40]], 28
; CHECK-NEXT:    [[TMP77:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP76]], i32 [[TMP41]], 29
; CHECK-NEXT:    [[TMP78:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP77]], i32 [[TMP42]], 30
; CHECK-NEXT:    [[TMP79:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP78]], i32 [[TMP43]], 31
; CHECK-NEXT:    [[TMP80:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP79]], i32 [[TMP44]], 32
; CHECK-NEXT:    [[TMP81:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP80]], i32 [[TMP45]], 33
; CHECK-NEXT:    [[TMP82:%.*]] = extractvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP81]], 1
; CHECK-NEXT:    [[TMP83:%.*]] = and i32 [[TMP82]], 7
; CHECK-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
; CHECK-NEXT:    [[TMP85:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP84]])
; CHECK-NEXT:    [[TMP86:%.*]] = icmp eq i32 [[TMP83]], 3
; CHECK-NEXT:    [[TMP87:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP86]])
; CHECK-NEXT:    [[TMP88:%.*]] = icmp ne i32 [[TMP87]], 0
; CHECK-NEXT:    [[TMP89:%.*]] = select i1 [[TMP88]], i32 [[TMP87]], i32 [[TMP85]]
; CHECK-NEXT:    [[TMP90:%.*]] = icmp eq i32 [[TMP83]], 2
; CHECK-NEXT:    [[TMP91:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP90]])
; CHECK-NEXT:    [[TMP92:%.*]] = icmp ne i32 [[TMP91]], 0
; CHECK-NEXT:    [[TMP93:%.*]] = select i1 [[TMP92]], i32 [[TMP91]], i32 [[TMP89]]
; CHECK-NEXT:    [[TMP94:%.*]] = icmp eq i32 [[TMP83]], 1
; CHECK-NEXT:    [[TMP95:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP94]])
; CHECK-NEXT:    [[TMP96:%.*]] = icmp ne i32 [[TMP95]], 0
; CHECK-NEXT:    [[TMP97:%.*]] = select i1 [[TMP96]], i32 [[TMP95]], i32 [[TMP93]]
; CHECK-NEXT:    [[TMP98:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP97]], i1 true)
; CHECK-NEXT:    [[TMP99:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP82]], i32 [[TMP98]])
; CHECK-NEXT:    [[TMP100:%.*]] = icmp eq i32 [[TMP82]], [[TMP99]]
; CHECK-NEXT:    [[TMP101:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP100]])
; CHECK-NEXT:    [[TMP102:%.*]] = and i32 [[TMP99]], -64
; CHECK-NEXT:    [[TMP103:%.*]] = insertelement <2 x i32> [[TMP47]], i32 [[TMP102]], i64 0
; CHECK-NEXT:    [[TMP104:%.*]] = bitcast <2 x i32> [[TMP103]] to i64
; CHECK-NEXT:    [[TMP105:%.*]] = inttoptr i64 [[TMP104]] to ptr
; CHECK-NEXT:    [[TMP106:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP107:%.*]] = bitcast i64 [[TMP106]] to <2 x i32>
; CHECK-NEXT:    [[TMP108:%.*]] = extractelement <2 x i32> [[TMP107]], i64 0
; CHECK-NEXT:    [[TMP109:%.*]] = extractelement <2 x i32> [[TMP107]], i64 1
; CHECK-NEXT:    [[TMP110:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP111:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP112:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP113:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP114:%.*]] = insertelement <20 x i32> [[TMP113]], i32 [[TMP108]], i64 1
; CHECK-NEXT:    [[TMP115:%.*]] = insertelement <20 x i32> [[TMP114]], i32 [[TMP109]], i64 2
; CHECK-NEXT:    [[TMP116:%.*]] = insertelement <20 x i32> [[TMP115]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP117:%.*]] = insertelement <20 x i32> [[TMP116]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP118:%.*]] = insertelement <20 x i32> [[TMP117]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP119:%.*]] = insertelement <20 x i32> [[TMP118]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP120:%.*]] = insertelement <20 x i32> [[TMP119]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP121:%.*]] = insertelement <20 x i32> [[TMP120]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP122:%.*]] = insertelement <20 x i32> [[TMP121]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP123:%.*]] = insertelement <20 x i32> [[TMP122]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP124:%.*]] = insertelement <20 x i32> [[TMP123]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP125:%.*]] = insertelement <20 x i32> [[TMP124]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP126:%.*]] = insertelement <20 x i32> [[TMP125]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP127:%.*]] = insertelement <20 x i32> [[TMP126]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP128:%.*]] = insertelement <20 x i32> [[TMP127]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP129:%.*]] = insertelement <20 x i32> [[TMP128]], i32 [[TMP110]], i64 16
; CHECK-NEXT:    [[TMP130:%.*]] = insertelement <20 x i32> [[TMP129]], i32 [[TMP111]], i64 17
; CHECK-NEXT:    [[TMP131:%.*]] = insertelement <20 x i32> [[TMP130]], i32 [[TMP112]], i64 18
; CHECK-NEXT:    [[TMP132:%.*]] = insertelement <20 x i32> [[TMP131]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32s(ptr inreg [[TMP105]], i32 inreg [[TMP101]], <20 x i32> inreg [[TMP132]], { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP81]], i32 0)
; CHECK-NEXT:    unreachable
;
entry:
  %cond = icmp ult i32 %arg, 3
  br i1 %cond, label %then, label %else

then:                                             ; preds = %entry
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0, align 4
  %then.arg = add i32 %arg, 1
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, i32 poison, i32 poison, i32 poison, i32 %then.arg)
  unreachable

else:                                             ; preds = %entry
  %table.1 = getelementptr i32, ptr %table, i32 1
  %cr.else = load i32, ptr %table.1, align 4
  %else.arg = uitofp i32 %arg to float
  call void (...) @lgc.cps.jump(i32 %cr.else, i32 2, i32 poison, i32 poison, i32 poison, float %else.arg, i32 5)
  unreachable
}

define void @unify_jump_ret(i32 %arg, ptr %table) !lgc.cps !1 !lgc.shaderstage !2 {
; CHECK-LABEL: define amdgpu_cs_chain void @unify_jump_ret(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], <3 x i32> inreg [[WORKGROUPID:%.*]], i32 inreg [[MULTIDISPATCHINFO:%.*]], <3 x i32> [[LOCALINVOCATIONID:%.*]], i32 [[VCR:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]], i32 [[INACTIVE_VGPR2:%.*]], i32 [[INACTIVE_VGPR3:%.*]], i32 [[INACTIVE_VGPR4:%.*]], i32 [[INACTIVE_VGPR5:%.*]], i32 [[INACTIVE_VGPR6:%.*]], i32 [[INACTIVE_VGPR7:%.*]], i32 [[INACTIVE_VGPR8:%.*]], i32 [[INACTIVE_VGPR9:%.*]], i32 [[INACTIVE_VGPR10:%.*]], i32 [[INACTIVE_VGPR11:%.*]], i32 [[INACTIVE_VGPR12:%.*]], i32 [[INACTIVE_VGPR13:%.*]], i32 [[INACTIVE_VGPR14:%.*]], i32 [[INACTIVE_VGPR15:%.*]], i32 [[INACTIVE_VGPR16:%.*]], i32 [[INACTIVE_VGPR17:%.*]], i32 [[INACTIVE_VGPR18:%.*]], i32 [[INACTIVE_VGPR19:%.*]], i32 [[INACTIVE_VGPR20:%.*]], i32 [[INACTIVE_VGPR21:%.*]], i32 [[INACTIVE_VGPR22:%.*]], i32 [[INACTIVE_VGPR23:%.*]], i32 [[INACTIVE_VGPR24:%.*]], i32 [[INACTIVE_VGPR25:%.*]], i32 [[INACTIVE_VGPR26:%.*]], i32 [[INACTIVE_VGPR27:%.*]], i32 [[INACTIVE_VGPR28:%.*]]) #[[ATTR1]] align 128 !lgc.cps [[META5]] !lgc.shaderstage [[META6]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TABLE]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i32> [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[TMP6]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.dead.i32()
; CHECK-NEXT:    [[TMP10:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP10]], label %[[BB11:.*]], label %[[TAIL_BLOCK:.*]]
; CHECK:       [[BB11]]:
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[ARG]], 3
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    br label %[[TAIL_BLOCK]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    br label %[[TAIL_BLOCK]]
; CHECK:       [[TAIL_BLOCK]]:
; CHECK-NEXT:    [[TMP12:%.*]] = phi i32 [ [[VCR]], %[[ENTRY]] ], [ [[CR_THEN]], %[[THEN]] ], [ 0, %[[ELSE]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[ARG]], %[[ENTRY]] ], [ poison, %[[THEN]] ], [ poison, %[[ELSE]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi i32 [ [[TMP7]], %[[ENTRY]] ], [ poison, %[[THEN]] ], [ poison, %[[ELSE]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[TMP8]], %[[ENTRY]] ], [ poison, %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi i32 [ [[INACTIVE_VGPR]], %[[ENTRY]] ], [ [[THEN_ARG]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi i32 [ [[INACTIVE_VGPR2]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi i32 [ [[INACTIVE_VGPR3]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[INACTIVE_VGPR4]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi i32 [ [[INACTIVE_VGPR5]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = phi i32 [ [[INACTIVE_VGPR6]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi i32 [ [[INACTIVE_VGPR7]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi i32 [ [[INACTIVE_VGPR8]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi i32 [ [[INACTIVE_VGPR9]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = phi i32 [ [[INACTIVE_VGPR10]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = phi i32 [ [[INACTIVE_VGPR11]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = phi i32 [ [[INACTIVE_VGPR12]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = phi i32 [ [[INACTIVE_VGPR13]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP30:%.*]] = phi i32 [ [[INACTIVE_VGPR14]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP31:%.*]] = phi i32 [ [[INACTIVE_VGPR15]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi i32 [ [[INACTIVE_VGPR16]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi i32 [ [[INACTIVE_VGPR17]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = phi i32 [ [[INACTIVE_VGPR18]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi i32 [ [[INACTIVE_VGPR19]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = phi i32 [ [[INACTIVE_VGPR20]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = phi i32 [ [[INACTIVE_VGPR21]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP38:%.*]] = phi i32 [ [[INACTIVE_VGPR22]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP39:%.*]] = phi i32 [ [[INACTIVE_VGPR23]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = phi i32 [ [[INACTIVE_VGPR24]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = phi i32 [ [[INACTIVE_VGPR25]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP42:%.*]] = phi i32 [ [[INACTIVE_VGPR26]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP43:%.*]] = phi i32 [ [[INACTIVE_VGPR27]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP44:%.*]] = phi i32 [ [[INACTIVE_VGPR28]], %[[ENTRY]] ], [ [[TMP9]], %[[THEN]] ], [ [[TMP9]], %[[ELSE]] ]
; CHECK-NEXT:    [[TMP45:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to <2 x i32>
; CHECK-NEXT:    [[TMP47:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } poison, <3 x i32> [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP48:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP47]], i32 [[TMP12]], 1
; CHECK-NEXT:    [[TMP49:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP48]], i32 [[TMP13]], 2
; CHECK-NEXT:    [[TMP50:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP49]], i32 [[TMP14]], 3
; CHECK-NEXT:    [[TMP51:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP50]], i32 [[TMP15]], 4
; CHECK-NEXT:    [[TMP52:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP51]], i32 [[TMP16]], 5
; CHECK-NEXT:    [[TMP53:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP52]], i32 [[TMP17]], 6
; CHECK-NEXT:    [[TMP54:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP53]], i32 [[TMP18]], 7
; CHECK-NEXT:    [[TMP55:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP54]], i32 [[TMP19]], 8
; CHECK-NEXT:    [[TMP56:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP55]], i32 [[TMP20]], 9
; CHECK-NEXT:    [[TMP57:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP56]], i32 [[TMP21]], 10
; CHECK-NEXT:    [[TMP58:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP57]], i32 [[TMP22]], 11
; CHECK-NEXT:    [[TMP59:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP58]], i32 [[TMP23]], 12
; CHECK-NEXT:    [[TMP60:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP59]], i32 [[TMP24]], 13
; CHECK-NEXT:    [[TMP61:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP60]], i32 [[TMP25]], 14
; CHECK-NEXT:    [[TMP62:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP61]], i32 [[TMP26]], 15
; CHECK-NEXT:    [[TMP63:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP62]], i32 [[TMP27]], 16
; CHECK-NEXT:    [[TMP64:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP63]], i32 [[TMP28]], 17
; CHECK-NEXT:    [[TMP65:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP64]], i32 [[TMP29]], 18
; CHECK-NEXT:    [[TMP66:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP65]], i32 [[TMP30]], 19
; CHECK-NEXT:    [[TMP67:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP66]], i32 [[TMP31]], 20
; CHECK-NEXT:    [[TMP68:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP67]], i32 [[TMP32]], 21
; CHECK-NEXT:    [[TMP69:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP68]], i32 [[TMP33]], 22
; CHECK-NEXT:    [[TMP70:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP69]], i32 [[TMP34]], 23
; CHECK-NEXT:    [[TMP71:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP70]], i32 [[TMP35]], 24
; CHECK-NEXT:    [[TMP72:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP71]], i32 [[TMP36]], 25
; CHECK-NEXT:    [[TMP73:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP72]], i32 [[TMP37]], 26
; CHECK-NEXT:    [[TMP74:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP73]], i32 [[TMP38]], 27
; CHECK-NEXT:    [[TMP75:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP74]], i32 [[TMP39]], 28
; CHECK-NEXT:    [[TMP76:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP75]], i32 [[TMP40]], 29
; CHECK-NEXT:    [[TMP77:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP76]], i32 [[TMP41]], 30
; CHECK-NEXT:    [[TMP78:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP77]], i32 [[TMP42]], 31
; CHECK-NEXT:    [[TMP79:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP78]], i32 [[TMP43]], 32
; CHECK-NEXT:    [[TMP80:%.*]] = insertvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP79]], i32 [[TMP44]], 33
; CHECK-NEXT:    [[TMP81:%.*]] = extractvalue { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP80]], 1
; CHECK-NEXT:    [[TMP82:%.*]] = and i32 [[TMP81]], 7
; CHECK-NEXT:    [[TMP83:%.*]] = icmp ne i32 [[TMP82]], 0
; CHECK-NEXT:    [[TMP84:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP83]])
; CHECK-NEXT:    [[TMP85:%.*]] = icmp eq i32 [[TMP82]], 3
; CHECK-NEXT:    [[TMP86:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP85]])
; CHECK-NEXT:    [[TMP87:%.*]] = icmp ne i32 [[TMP86]], 0
; CHECK-NEXT:    [[TMP88:%.*]] = select i1 [[TMP87]], i32 [[TMP86]], i32 [[TMP84]]
; CHECK-NEXT:    [[TMP89:%.*]] = icmp eq i32 [[TMP82]], 2
; CHECK-NEXT:    [[TMP90:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP89]])
; CHECK-NEXT:    [[TMP91:%.*]] = icmp ne i32 [[TMP90]], 0
; CHECK-NEXT:    [[TMP92:%.*]] = select i1 [[TMP91]], i32 [[TMP90]], i32 [[TMP88]]
; CHECK-NEXT:    [[TMP93:%.*]] = icmp eq i32 [[TMP82]], 1
; CHECK-NEXT:    [[TMP94:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP93]])
; CHECK-NEXT:    [[TMP95:%.*]] = icmp ne i32 [[TMP94]], 0
; CHECK-NEXT:    [[TMP96:%.*]] = select i1 [[TMP95]], i32 [[TMP94]], i32 [[TMP92]]
; CHECK-NEXT:    [[TMP97:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP96]], i1 true)
; CHECK-NEXT:    [[TMP98:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP81]], i32 [[TMP97]])
; CHECK-NEXT:    [[TMP99:%.*]] = icmp eq i32 [[TMP81]], [[TMP98]]
; CHECK-NEXT:    [[TMP100:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP99]])
; CHECK-NEXT:    [[TMP101:%.*]] = icmp eq i32 [[TMP98]], 0
; CHECK-NEXT:    br i1 [[TMP101]], label %[[RET_BLOCK:.*]], label %[[CHAIN_BLOCK:.*]]
; CHECK:       [[CHAIN_BLOCK]]:
; CHECK-NEXT:    [[TMP102:%.*]] = and i32 [[TMP98]], -64
; CHECK-NEXT:    [[TMP103:%.*]] = insertelement <2 x i32> [[TMP46]], i32 [[TMP102]], i64 0
; CHECK-NEXT:    [[TMP104:%.*]] = bitcast <2 x i32> [[TMP103]] to i64
; CHECK-NEXT:    [[TMP105:%.*]] = inttoptr i64 [[TMP104]] to ptr
; CHECK-NEXT:    [[TMP106:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP107:%.*]] = bitcast i64 [[TMP106]] to <2 x i32>
; CHECK-NEXT:    [[TMP108:%.*]] = extractelement <2 x i32> [[TMP107]], i64 0
; CHECK-NEXT:    [[TMP109:%.*]] = extractelement <2 x i32> [[TMP107]], i64 1
; CHECK-NEXT:    [[TMP110:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 0
; CHECK-NEXT:    [[TMP111:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 1
; CHECK-NEXT:    [[TMP112:%.*]] = extractelement <3 x i32> [[WORKGROUPID]], i64 2
; CHECK-NEXT:    [[TMP113:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP114:%.*]] = insertelement <20 x i32> [[TMP113]], i32 [[TMP108]], i64 1
; CHECK-NEXT:    [[TMP115:%.*]] = insertelement <20 x i32> [[TMP114]], i32 [[TMP109]], i64 2
; CHECK-NEXT:    [[TMP116:%.*]] = insertelement <20 x i32> [[TMP115]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP117:%.*]] = insertelement <20 x i32> [[TMP116]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP118:%.*]] = insertelement <20 x i32> [[TMP117]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP119:%.*]] = insertelement <20 x i32> [[TMP118]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP120:%.*]] = insertelement <20 x i32> [[TMP119]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP121:%.*]] = insertelement <20 x i32> [[TMP120]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP122:%.*]] = insertelement <20 x i32> [[TMP121]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP123:%.*]] = insertelement <20 x i32> [[TMP122]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP124:%.*]] = insertelement <20 x i32> [[TMP123]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP125:%.*]] = insertelement <20 x i32> [[TMP124]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP126:%.*]] = insertelement <20 x i32> [[TMP125]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP127:%.*]] = insertelement <20 x i32> [[TMP126]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP128:%.*]] = insertelement <20 x i32> [[TMP127]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP129:%.*]] = insertelement <20 x i32> [[TMP128]], i32 [[TMP110]], i64 16
; CHECK-NEXT:    [[TMP130:%.*]] = insertelement <20 x i32> [[TMP129]], i32 [[TMP111]], i64 17
; CHECK-NEXT:    [[TMP131:%.*]] = insertelement <20 x i32> [[TMP130]], i32 [[TMP112]], i64 18
; CHECK-NEXT:    [[TMP132:%.*]] = insertelement <20 x i32> [[TMP131]], i32 [[MULTIDISPATCHINFO]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_v3i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32s(ptr inreg [[TMP105]], i32 inreg [[TMP100]], <20 x i32> inreg [[TMP132]], { <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP80]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       [[RET_BLOCK]]:
; CHECK-NEXT:    ret void
;
entry:
  %cond = icmp ult i32 %arg, 3
  br i1 %cond, label %then, label %else

then:                                             ; preds = %entry
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0, align 4
  %then.arg = add i32 %arg, 1
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, i32 poison, i32 poison, i32 poison, i32 %then.arg)
  unreachable

else:                                             ; preds = %entry
  ret void
}

attributes #0 = { noreturn }

!continuation.stackAddrspace = !{!0}
!lgc.cps.maxArgumentVgprs = !{!3}

!0 = !{i32 5}
!1 = !{i32 1}
!2 = !{i32 7}
!3 = !{i32 32}
;.
; CHECK: [[META5]] = !{i32 1}
; CHECK: [[META6]] = !{i32 7}
;.
