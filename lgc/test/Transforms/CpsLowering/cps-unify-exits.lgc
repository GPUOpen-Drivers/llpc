; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc --function-signature
; RUN: lgc -mcpu=gfx1030 -o - -passes='require<lgc-pipeline-state>,lgc-patch-entry-point-mutate' %s | FileCheck --check-prefixes=CHECK %s

declare void @lgc.cps.jump(...) noreturn

define void @unify_jumps({i32} %state, i32 %arg, ptr %table) !lgc.cps !0 {
entry:
  %v = extractvalue {i32} %state, 0
  %cond = icmp ult i32 %v, 3
  br i1 %cond, label %then, label %else

then:
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0
  %then.arg = add i32 %arg, 1
  %v.then = mul i32 %v, 2
  %state.then = insertvalue {i32} poison, i32 %v.then, 0
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, {i32} %state.then, i32 %then.arg)
  unreachable

else:
  %table.1 = getelementptr i32, ptr %table, i32 1
  %cr.else = load i32, ptr %table.1
  %else.arg = uitofp i32 %arg to float
  call void (...) @lgc.cps.jump(i32 %cr.else, i32 2, {} poison, float %else.arg, i32 5)
  unreachable
}

define void @unify_jump_ret({i32} %state, i32 %arg, ptr %table) !lgc.cps !0 {
entry:
  %v = extractvalue {i32} %state, 0
  %cond = icmp ult i32 %v, 3
  br i1 %cond, label %then, label %else

then:
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0
  %then.arg = add i32 %arg, 1
  %v.then = mul i32 %v, 2
  %state.then = insertvalue {i32} poison, i32 %v.then, 0
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, {i32} %state.then, i32 %then.arg)
  unreachable

else:
  ret void
}

!0 = !{i32 1} ; level 1
; CHECK-LABEL: define {{[^@]+}}@unify_jumps
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[TMP0:%.*]], i32 inreg [[TMP1:%.*]], i32 inreg [[TMP2:%.*]], i32 inreg [[TMP3:%.*]], i32 inreg [[TMP4:%.*]], i32 inreg [[TMP5:%.*]], i32 inreg [[TMP6:%.*]], i32 inreg [[TMP7:%.*]], i32 inreg [[TMP8:%.*]], i32 inreg [[TMP9:%.*]], i32 inreg [[TMP10:%.*]], i32 inreg [[TMP11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps !2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP12:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to <2 x i32>
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { i32 }, ptr addrspace(5) [[TMP15]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP15]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[V:%.*]] = extractvalue { i32 } [[CPS_STATE]], 0
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[V]], 3
; CHECK-NEXT:    br i1 [[COND]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[V_THEN:%.*]] = mul i32 [[V]], 2
; CHECK-NEXT:    [[STATE_THEN:%.*]] = insertvalue { i32 } poison, i32 [[V_THEN]], 0
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    store { i32 } [[STATE_THEN]], ptr addrspace(5) [[TMP16]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP16]], i32 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       else:
; CHECK-NEXT:    [[TABLE_1:%.*]] = getelementptr i32, ptr [[TABLE]], i32 1
; CHECK-NEXT:    [[CR_ELSE:%.*]] = load i32, ptr [[TABLE_1]], align 4
; CHECK-NEXT:    [[ELSE_ARG:%.*]] = uitofp i32 [[ARG]] to float
; CHECK-NEXT:    [[TMP18:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast float [[ELSE_ARG]] to i32
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[CR_ELSE]], [[ELSE]] ], [ [[CR_THEN]], [[THEN]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi ptr addrspace(5) [ [[TMP18]], [[ELSE]] ], [ [[TMP17]], [[THEN]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = phi i32 [ [[TMP19]], [[ELSE]] ], [ [[THEN_ARG]], [[THEN]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi i32 [ 5, [[ELSE]] ], [ poison, [[THEN]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } poison, i32 [[TMP20]], 0
; CHECK-NEXT:    [[TMP25:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP24]], ptr addrspace(5) [[TMP21]], 1
; CHECK-NEXT:    [[TMP26:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP25]], i32 [[TMP22]], 2
; CHECK-NEXT:    [[TMP27:%.*]] = insertvalue { i32, ptr addrspace(5), i32, i32 } [[TMP26]], i32 [[TMP23]], 3
; CHECK-NEXT:    [[TMP28:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP29:%.*]] = bitcast i64 [[TMP28]] to <2 x i32>
; CHECK-NEXT:    [[TMP30:%.*]] = extractelement <2 x i32> [[TMP29]], i64 0
; CHECK-NEXT:    [[TMP31:%.*]] = extractelement <2 x i32> [[TMP29]], i64 1
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[TMP30]], i64 1
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[TMP31]], i64 2
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[TMP0]], i64 3
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[TMP1]], i64 4
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[TMP2]], i64 5
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[TMP3]], i64 6
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[TMP4]], i64 7
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <16 x i32> [[TMP39]], i32 [[TMP5]], i64 8
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <16 x i32> [[TMP40]], i32 [[TMP6]], i64 9
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <16 x i32> [[TMP41]], i32 [[TMP7]], i64 10
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <16 x i32> [[TMP42]], i32 [[TMP8]], i64 11
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <16 x i32> [[TMP43]], i32 [[TMP9]], i64 12
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <16 x i32> [[TMP44]], i32 [[TMP10]], i64 13
; CHECK-NEXT:    [[TMP46:%.*]] = insertelement <16 x i32> [[TMP45]], i32 [[TMP11]], i64 14
; CHECK-NEXT:    [[TMP47:%.*]] = insertelement <16 x i32> [[TMP46]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP48:%.*]] = extractvalue { i32, ptr addrspace(5), i32, i32 } [[TMP27]], 0
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg(i32 [[TMP48]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP50]])
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP51]], i1 true)
; CHECK-NEXT:    [[TMP53:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP49]], i32 [[TMP52]])
; CHECK-NEXT:    [[TMP54:%.*]] = icmp eq i32 [[TMP49]], [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP54]])
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP53]])
; CHECK-NEXT:    [[TMP57:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP55]])
; CHECK-NEXT:    [[TMP58:%.*]] = icmp eq i32 [[TMP56]], 0
; CHECK-NEXT:    br i1 [[TMP58]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP59:%.*]] = and i32 [[TMP56]], -64
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <2 x i32> [[TMP14]], i32 [[TMP59]], i64 0
; CHECK-NEXT:    [[TMP61:%.*]] = bitcast <2 x i32> [[TMP60]] to i64
; CHECK-NEXT:    [[TMP62:%.*]] = inttoptr i64 [[TMP61]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5i32i32s(ptr [[TMP62]], i32 [[TMP57]], <16 x i32> [[TMP47]], { i32, ptr addrspace(5), i32, i32 } [[TMP27]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define {{[^@]+}}@unify_jump_ret
; CHECK-SAME: (i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[TMP0:%.*]], i32 inreg [[TMP1:%.*]], i32 inreg [[TMP2:%.*]], i32 inreg [[TMP3:%.*]], i32 inreg [[TMP4:%.*]], i32 inreg [[TMP5:%.*]], i32 inreg [[TMP6:%.*]], i32 inreg [[TMP7:%.*]], i32 inreg [[TMP8:%.*]], i32 inreg [[TMP9:%.*]], i32 inreg [[TMP10:%.*]], i32 inreg [[TMP11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[VCR:%.*]], ptr addrspace(5) [[VSP:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]]) #[[ATTR1]] align 64 !lgc.cps !2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP12:%.*]] = alloca ptr addrspace(5), align 4, addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to <2 x i32>
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr addrspace(5) [[VSP]], i32 -4
; CHECK-NEXT:    [[CPS_STATE:%.*]] = load { i32 }, ptr addrspace(5) [[TMP15]], align 4
; CHECK-NEXT:    store ptr addrspace(5) [[TMP15]], ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    [[V:%.*]] = extractvalue { i32 } [[CPS_STATE]], 0
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[V]], 3
; CHECK-NEXT:    br i1 [[COND]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    [[V_THEN:%.*]] = mul i32 [[V]], 2
; CHECK-NEXT:    [[STATE_THEN:%.*]] = insertvalue { i32 } poison, i32 [[V_THEN]], 0
; CHECK-NEXT:    [[TMP16:%.*]] = load ptr addrspace(5), ptr addrspace(5) [[TMP12]], align 4
; CHECK-NEXT:    store { i32 } [[STATE_THEN]], ptr addrspace(5) [[TMP16]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP16]], i32 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       else:
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP18:%.*]] = phi i32 [ [[CR_THEN]], [[THEN]] ], [ 0, [[ELSE]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi ptr addrspace(5) [ [[TMP17]], [[THEN]] ], [ poison, [[ELSE]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[THEN_ARG]], [[THEN]] ], [ poison, [[ELSE]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } poison, i32 [[TMP18]], 0
; CHECK-NEXT:    [[TMP22:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } [[TMP21]], ptr addrspace(5) [[TMP19]], 1
; CHECK-NEXT:    [[TMP23:%.*]] = insertvalue { i32, ptr addrspace(5), i32 } [[TMP22]], i32 [[TMP20]], 2
; CHECK-NEXT:    [[TMP24:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast i64 [[TMP24]] to <2 x i32>
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <2 x i32> [[TMP25]], i64 0
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <2 x i32> [[TMP25]], i64 1
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <16 x i32> [[TMP28]], i32 [[TMP26]], i64 1
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <16 x i32> [[TMP29]], i32 [[TMP27]], i64 2
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <16 x i32> [[TMP30]], i32 [[TMP0]], i64 3
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i32> [[TMP31]], i32 [[TMP1]], i64 4
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <16 x i32> [[TMP32]], i32 [[TMP2]], i64 5
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <16 x i32> [[TMP33]], i32 [[TMP3]], i64 6
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <16 x i32> [[TMP34]], i32 [[TMP4]], i64 7
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i32> [[TMP35]], i32 [[TMP5]], i64 8
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <16 x i32> [[TMP36]], i32 [[TMP6]], i64 9
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <16 x i32> [[TMP37]], i32 [[TMP7]], i64 10
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <16 x i32> [[TMP38]], i32 [[TMP8]], i64 11
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <16 x i32> [[TMP39]], i32 [[TMP9]], i64 12
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <16 x i32> [[TMP40]], i32 [[TMP10]], i64 13
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <16 x i32> [[TMP41]], i32 [[TMP11]], i64 14
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <16 x i32> [[TMP42]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { i32, ptr addrspace(5), i32 } [[TMP23]], 0
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.setinactive.chain.arg.1(i32 [[TMP44]], i32 [[VCR]])
; CHECK-NEXT:    [[TMP46:%.*]] = icmp ne i32 [[TMP45]], 0
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP46]])
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP47]], i1 true)
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.amdgcn.readlane(i32 [[TMP45]], i32 [[TMP48]])
; CHECK-NEXT:    [[TMP50:%.*]] = icmp eq i32 [[TMP45]], [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP50]])
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP49]])
; CHECK-NEXT:    [[TMP53:%.*]] = call i32 @llvm.amdgcn.wwm.i32(i32 [[TMP51]])
; CHECK-NEXT:    [[TMP54:%.*]] = icmp eq i32 [[TMP52]], 0
; CHECK-NEXT:    br i1 [[TMP54]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP55:%.*]] = and i32 [[TMP52]], -64
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <2 x i32> [[TMP14]], i32 [[TMP55]], i64 0
; CHECK-NEXT:    [[TMP57:%.*]] = bitcast <2 x i32> [[TMP56]] to i64
; CHECK-NEXT:    [[TMP58:%.*]] = inttoptr i64 [[TMP57]] to ptr
; CHECK-NEXT:    call void (ptr, i32, <16 x i32>, { i32, ptr addrspace(5), i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v16i32.sl_i32p5i32s(ptr [[TMP58]], i32 [[TMP53]], <16 x i32> [[TMP43]], { i32, ptr addrspace(5), i32 } [[TMP23]], i32 0)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
