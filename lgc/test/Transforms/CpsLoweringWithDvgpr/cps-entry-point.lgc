
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 4
; RUN: lgc -mcpu=gfx1201 -o - -passes='require<lgc-pipeline-state>,lgc-mutate-entry-point' %s | FileCheck --check-prefixes=CHECK %s

declare void @lgc.cps.jump(...) #0

declare void @lgc.cps.set.vsp(ptr addrspace(32)) #1

declare ptr addrspace(32) @lgc.cps.get.vsp() #2

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !3 !lgc.rt.shaderstage !3  !lgc.cps.maxOutgoingVgprCount !4{
; CHECK-LABEL: define dllexport amdgpu_cs void @lgc.shader.CS.main(
; CHECK-SAME: i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[PAD4:%.*]], i32 inreg noundef [[PAD5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]])
; CHECK-SAME: #[[ATTR3:[0-9]+]] !lgc.shaderstage [[META6:![0-9]+]] !lgc.rt.shaderstage [[META6]] !lgc.cps.maxOutgoingVgprCount [[META7:![0-9]+]] {
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <4 x i32> poison, i32 [[USERDATA0]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <4 x i32> [[TMP5]], i32 [[USERDATA1]], i64 1
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP9]], i32 [[USERDATA2]], i64 2
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 [[USERDATA3]], i64 3
; CHECK-NEXT:    [[PTR:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP8]], i1 false)
; CHECK-NEXT:    [[P0:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 0
; CHECK-NEXT:    [[I_VSP:%.*]] = load i32, ptr addrspace(7) [[P0]], align 4
; CHECK-NEXT:    store i32 [[I_VSP]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[P1:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 1
; CHECK-NEXT:    [[CR:%.*]] = load i32, ptr addrspace(7) [[P1]], align 4
; CHECK-NEXT:    [[P2:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 2
; CHECK-NEXT:    [[ARG:%.*]] = load i32, ptr addrspace(7) [[P2]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK:%.*]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP10:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP10]] to <2 x i32>
; CHECK-NEXT:    [[TMP12:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32 } poison, i32 [[CR]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32 } [[TMP12]], i32 [[TMP11]], 1
; CHECK-NEXT:    [[TMP14:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32 } [[TMP13]], i32 poison, 2
; CHECK-NEXT:    [[TMP15:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32 } [[TMP14]], i32 poison, 3
; CHECK-NEXT:    [[TMP16:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32 } [[TMP15]], i32 [[ARG]], 4
; CHECK-NEXT:    [[TMP56:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32 } [[TMP16]], i32 [[TMP11]], 5
; CHECK-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i32, i32, i32, i32, i32 } [[TMP56]], 0
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP17]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP22]])
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP23]], i1 true)
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP17]], i32 [[TMP20]])
; CHECK-NEXT:    [[TMP58:%.*]] = icmp eq i32 [[TMP17]], [[TMP21]]
; CHECK-NEXT:    [[TMP57:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP58]])
; CHECK-NEXT:    [[TMP24:%.*]] = and i32 [[TMP21]], -64
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP24]], i64 0
; CHECK-NEXT:    [[TMP26:%.*]] = bitcast <2 x i32> [[TMP25]] to i64
; CHECK-NEXT:    [[TMP27:%.*]] = inttoptr i64 [[TMP26]] to ptr
; CHECK-NEXT:    [[TMP28:%.*]] = and i32 [[TMP21]], 56
; CHECK-NEXT:    [[TMP29:%.*]] = shl i32 [[TMP28]], 1
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], 16
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP30]], i32 42)
; CHECK-NEXT:    [[TMP32:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP33:%.*]] = bitcast i64 [[TMP32]] to <2 x i32>
; CHECK-NEXT:    [[TMP34:%.*]] = extractelement <2 x i32> [[TMP33]], i64 0
; CHECK-NEXT:    [[TMP35:%.*]] = extractelement <2 x i32> [[TMP33]], i64 1
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <20 x i32> [[TMP36]], i32 [[TMP34]], i64 1
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <20 x i32> [[TMP37]], i32 [[TMP35]], i64 2
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <20 x i32> [[TMP38]], i32 [[USERDATA0]], i64 3
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <20 x i32> [[TMP39]], i32 [[USERDATA1]], i64 4
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <20 x i32> [[TMP40]], i32 [[USERDATA2]], i64 5
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <20 x i32> [[TMP41]], i32 [[USERDATA3]], i64 6
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <20 x i32> [[TMP42]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <20 x i32> [[TMP43]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <20 x i32> [[TMP44]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP46:%.*]] = insertelement <20 x i32> [[TMP45]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP47:%.*]] = insertelement <20 x i32> [[TMP46]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP48:%.*]] = insertelement <20 x i32> [[TMP47]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP49:%.*]] = insertelement <20 x i32> [[TMP48]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <20 x i32> [[TMP49]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <20 x i32> [[TMP50]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP52:%.*]] = insertelement <20 x i32> [[TMP51]], i32 42, i64 16
; CHECK-NEXT:    [[TMP53:%.*]] = insertelement <20 x i32> [[TMP52]], i32 [[TMP24]], i64 17
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <20 x i32> [[TMP53]], i32 [[TMP57]], i64 18
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <20 x i32> [[TMP54]], i32 [[TMP31]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32i32s(ptr inreg [[TMP27]], i32 inreg [[TMP57]], <20 x i32> inreg [[TMP55]], { i32, i32, i32, i32, i32, i32 } [[TMP56]], i32 1, i32 [[TMP31]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
;
.entry:
  %csp = alloca i32, align 4
  %desc = call <4 x i32> @lgc.load.user.data__v4i32(i32 0)
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %p0 = getelementptr i32, ptr addrspace(7) %ptr, i32 0
  %i_vsp = load i32, ptr addrspace(7) %p0, align 4
  store i32 %i_vsp, ptr %csp, align 4
  %p1 = getelementptr i32, ptr addrspace(7) %ptr, i32 1
  %cr = load i32, ptr addrspace(7) %p1, align 4
  %p2 = getelementptr i32, ptr addrspace(7) %ptr, i32 2
  %arg = load i32, ptr addrspace(7) %p2, align 4
  %0 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %cr, i32 1, i32 %0, i32 poison, i32 poison, i32 %arg, i32 %0)
  unreachable
}

declare <4 x i32> @lgc.load.user.data__v4i32(i32) #3

declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>, i1) #4

attributes #0 = { nounwind }
attributes #1 = { nounwind willreturn memory(inaccessiblemem: write) }
attributes #2 = { nounwind willreturn memory(inaccessiblemem: read) }
attributes #3 = { nounwind memory(none) }
attributes #4 = { nounwind willreturn memory(none) }

!lgc.user.data.nodes = !{!0}
!llpc.compute.mode = !{!1}
!continuation.stackAddrspace = !{!2}

!0 = !{!"DescriptorBuffer", i32 6, i32 6, i32 0, i32 4, i64 0, i32 0, i32 4}
!1 = !{i32 8, i32 4, i32 1, i32 0, i32 0, i32 1}
!2 = !{i32 5}
!3 = !{i32 7}
!4 = !{i32 42}
;.
; CHECK: [[META6]] = !{i32 7}
; CHECK: [[META7]] = !{i32 42}
;.
