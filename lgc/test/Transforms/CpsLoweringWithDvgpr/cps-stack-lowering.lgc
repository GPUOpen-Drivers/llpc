
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 4
; RUN: lgc -mcpu=gfx1201 -o - -lgc-use-init-whole-wave -passes="require<lgc-pipeline-state>,lgc-mutate-entry-point" %s | FileCheck --check-prefixes=CHECK %s

; REQUIRES: llvm-main-revision-ge-511860

declare void @lgc.cps.jump(...) #0

declare ptr addrspace(32) @lgc.cps.alloc(i32)

declare void @lgc.cps.free(i32)

declare i32 @lgc.cps.as.continuation.reference(ptr)

declare ptr addrspace(32) @lgc.cps.peek(i32)

declare ptr addrspace(32) @lgc.cps.get.vsp()

declare i32 @lgc.cps.get.dummy.index(i32)

declare void @lgc.cps.complete()

define void @test.0(i32 %cspInit) !lgc.cps !1 !lgc.shaderstage !2 !continuation !3 !continuation.state !4 {
; CHECK-LABEL: define amdgpu_cs_chain void @test.0(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]]) #[[ATTR1:[0-9]+]] align 64 !lgc.cps [[META5:![0-9]+]] !lgc.shaderstage [[META6:![0-9]+]] !continuation [[META7:![0-9]+]] !continuation.state [[META8:![0-9]+]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP5]], label [[TMP12:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       6:
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 12
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[TMP7]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 0
; CHECK-NEXT:    store i32 333, ptr addrspace(5) [[TMP13]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP7]], 4
; CHECK-NEXT:    [[TMP11:%.*]] = inttoptr i32 [[TMP10]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP11]], i32 0
; CHECK-NEXT:    store i32 111, ptr addrspace(5) [[TMP44]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = add i32 [[TMP7]], 9
; CHECK-NEXT:    [[TMP15:%.*]] = inttoptr i32 [[TMP14]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP15]], i32 0
; CHECK-NEXT:    store i8 99, ptr addrspace(5) [[TMP16]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = call i32 @llvm.amdgcn.reloc.constant(metadata [[META9:![0-9]+]])
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP17]], 1
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[VCR]], [[ALLOCASPILLBB:%.*]] ], [ [[TMP18]], [[TMP12]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi i32 [ [[CSPINIT]], [[ALLOCASPILLBB]] ], [ [[TMP19]], [[TMP12]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ALLOCASPILLBB]] ], [ poison, [[TMP12]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ALLOCASPILLBB]] ], [ poison, [[TMP12]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = phi i32 [ poison, [[ALLOCASPILLBB]] ], [ [[TMP14]], [[TMP12]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi i32 [ poison, [[ALLOCASPILLBB]] ], [ [[TMP10]], [[TMP12]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP25]] to <2 x i32>
; CHECK-NEXT:    [[TMP48:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP81:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP48]], i32 [[TMP20]], 1
; CHECK-NEXT:    [[TMP82:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP81]], i32 [[TMP21]], 2
; CHECK-NEXT:    [[TMP83:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP82]], i32 [[TMP22]], 3
; CHECK-NEXT:    [[TMP84:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP83]], i32 [[TMP23]], 4
; CHECK-NEXT:    [[TMP85:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP84]], i32 [[TMP27]], 5
; CHECK-NEXT:    [[TMP86:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP85]], i32 [[TMP24]], 6
; CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP86]], 1
; CHECK-NEXT:    [[TMP28:%.*]] = and i32 [[TMP26]], 7
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ne i32 [[TMP28]], 0
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP29]])
; CHECK-NEXT:    [[TMP31:%.*]] = icmp eq i32 [[TMP28]], 3
; CHECK-NEXT:    [[TMP32:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP31]])
; CHECK-NEXT:    [[TMP33:%.*]] = icmp ne i32 [[TMP32]], 0
; CHECK-NEXT:    [[TMP34:%.*]] = select i1 [[TMP33]], i32 [[TMP32]], i32 [[TMP30]]
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i32 [[TMP28]], 2
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP35]])
; CHECK-NEXT:    [[TMP37:%.*]] = icmp ne i32 [[TMP36]], 0
; CHECK-NEXT:    [[TMP38:%.*]] = select i1 [[TMP37]], i32 [[TMP36]], i32 [[TMP34]]
; CHECK-NEXT:    [[TMP39:%.*]] = icmp eq i32 [[TMP28]], 1
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP39]])
; CHECK-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
; CHECK-NEXT:    [[TMP42:%.*]] = select i1 [[TMP41]], i32 [[TMP40]], i32 [[TMP38]]
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP42]], i1 true)
; CHECK-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP26]], i32 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = icmp eq i32 [[TMP26]], [[TMP47]]
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP45]])
; CHECK-NEXT:    [[TMP49:%.*]] = and i32 [[TMP47]], -64
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP49]], i64 0
; CHECK-NEXT:    [[TMP51:%.*]] = bitcast <2 x i32> [[TMP50]] to i64
; CHECK-NEXT:    [[TMP52:%.*]] = inttoptr i64 [[TMP51]] to ptr
; CHECK-NEXT:    [[TMP53:%.*]] = and i32 [[TMP47]], 56
; CHECK-NEXT:    [[TMP54:%.*]] = shl i32 [[TMP53]], 1
; CHECK-NEXT:    [[TMP55:%.*]] = add i32 [[TMP54]], 16
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP55]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP57:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP58:%.*]] = bitcast i64 [[TMP57]] to <2 x i32>
; CHECK-NEXT:    [[TMP59:%.*]] = extractelement <2 x i32> [[TMP58]], i64 0
; CHECK-NEXT:    [[TMP60:%.*]] = extractelement <2 x i32> [[TMP58]], i64 1
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[TMP59]], i64 1
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[TMP60]], i64 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <20 x i32> [[TMP76]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <20 x i32> [[TMP77]], i32 [[TMP49]], i64 17
; CHECK-NEXT:    [[TMP79:%.*]] = insertelement <20 x i32> [[TMP78]], i32 [[TMP46]], i64 18
; CHECK-NEXT:    [[TMP80:%.*]] = insertelement <20 x i32> [[TMP79]], i32 [[TMP56]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32i32i32s(ptr inreg [[TMP52]], i32 inreg [[TMP46]], <20 x i32> inreg [[TMP80]], { i32, i32, i32, i32, i32, i32, i32 } [[TMP86]], i32 1, i32 [[TMP56]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
;
AllocaSpillBB:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %0 = load i32, ptr %csp, align 4
  %1 = add i32 %0, 12
  store i32 %1, ptr %csp, align 4
  %2 = inttoptr i32 %0 to ptr addrspace(5)
  %3 = getelementptr i8, ptr addrspace(5) %2, i32 0
  store i32 333, ptr addrspace(5) %3, align 4
  %4 = add i32 %0, 4
  %5 = inttoptr i32 %4 to ptr addrspace(5)
  %6 = getelementptr i8, ptr addrspace(5) %5, i32 0
  store i32 111, ptr addrspace(5) %6, align 4
  %7 = add i32 %0, 9
  %8 = inttoptr i32 %7 to ptr addrspace(5)
  %9 = getelementptr i8, ptr addrspace(5) %8, i32 0
  store i8 99, ptr addrspace(5) %9, align 1
  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.1)
  %10 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, i32 %10, i32 poison, i32 poison, i32 %7, i32 %4)
  unreachable
}

define void @test.1(i32 %cspInit, i32 %p2, i32 %q1) !lgc.cps !1 !lgc.shaderstage !2 !continuation !5 !continuation.state !4 {
; CHECK-LABEL: define amdgpu_cs_chain void @test.1(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[P2:%.*]], i32 [[Q1:%.*]]) #[[ATTR1]] align 64 !lgc.cps [[META5]] !lgc.shaderstage [[META6]] !continuation [[META10:![0-9]+]] !continuation.state [[META8]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP5]], label [[ALLOCASPILLBB:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       6:
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = inttoptr i32 [[Q1]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP7]], i32 0
; CHECK-NEXT:    [[N111:%.*]] = load i32, ptr addrspace(5) [[TMP8]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[P2]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 0
; CHECK-NEXT:    [[N99:%.*]] = load i8, ptr addrspace(5) [[TMP10]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @llvm.amdgcn.reloc.constant(metadata [[META11:![0-9]+]])
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP11]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP36:%.*]] = phi i32 [ [[VCR]], [[ENTRY_BLOCK:%.*]] ], [ [[TMP12]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = phi i32 [ [[CSPINIT]], [[ENTRY_BLOCK]] ], [ [[TMP13]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[P2]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi i32 [ [[Q1]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP16]] to <2 x i32>
; CHECK-NEXT:    [[TMP73:%.*]] = insertvalue { i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP74:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP73]], i32 [[TMP36]], 1
; CHECK-NEXT:    [[TMP75:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP74]], i32 [[TMP40]], 2
; CHECK-NEXT:    [[TMP76:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP75]], i32 [[TMP15]], 3
; CHECK-NEXT:    [[TMP77:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP76]], i32 [[TMP17]], 4
; CHECK-NEXT:    [[TMP18:%.*]] = extractvalue { i32, i32, i32, i32, i32 } [[TMP77]], 1
; CHECK-NEXT:    [[TMP20:%.*]] = and i32 [[TMP18]], 7
; CHECK-NEXT:    [[TMP21:%.*]] = icmp ne i32 [[TMP20]], 0
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP21]])
; CHECK-NEXT:    [[TMP23:%.*]] = icmp eq i32 [[TMP20]], 3
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP23]])
; CHECK-NEXT:    [[TMP25:%.*]] = icmp ne i32 [[TMP24]], 0
; CHECK-NEXT:    [[TMP26:%.*]] = select i1 [[TMP25]], i32 [[TMP24]], i32 [[TMP22]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp eq i32 [[TMP20]], 2
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP27]])
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ne i32 [[TMP28]], 0
; CHECK-NEXT:    [[TMP30:%.*]] = select i1 [[TMP29]], i32 [[TMP28]], i32 [[TMP26]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp eq i32 [[TMP20]], 1
; CHECK-NEXT:    [[TMP32:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP31]])
; CHECK-NEXT:    [[TMP33:%.*]] = icmp ne i32 [[TMP32]], 0
; CHECK-NEXT:    [[TMP34:%.*]] = select i1 [[TMP33]], i32 [[TMP32]], i32 [[TMP30]]
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP34]], i1 true)
; CHECK-NEXT:    [[TMP39:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP18]], i32 [[TMP35]])
; CHECK-NEXT:    [[TMP37:%.*]] = icmp eq i32 [[TMP18]], [[TMP39]]
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP37]])
; CHECK-NEXT:    [[TMP41:%.*]] = and i32 [[TMP39]], -64
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP41]], i64 0
; CHECK-NEXT:    [[TMP43:%.*]] = bitcast <2 x i32> [[TMP42]] to i64
; CHECK-NEXT:    [[TMP44:%.*]] = inttoptr i64 [[TMP43]] to ptr
; CHECK-NEXT:    [[TMP45:%.*]] = and i32 [[TMP39]], 56
; CHECK-NEXT:    [[TMP46:%.*]] = shl i32 [[TMP45]], 1
; CHECK-NEXT:    [[TMP47:%.*]] = add i32 [[TMP46]], 16
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP47]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP49:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP50:%.*]] = bitcast i64 [[TMP49]] to <2 x i32>
; CHECK-NEXT:    [[TMP51:%.*]] = extractelement <2 x i32> [[TMP50]], i64 0
; CHECK-NEXT:    [[TMP52:%.*]] = extractelement <2 x i32> [[TMP50]], i64 1
; CHECK-NEXT:    [[TMP53:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <20 x i32> [[TMP53]], i32 [[TMP51]], i64 1
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <20 x i32> [[TMP54]], i32 [[TMP52]], i64 2
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <20 x i32> [[TMP55]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <20 x i32> [[TMP56]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP58:%.*]] = insertelement <20 x i32> [[TMP57]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <20 x i32> [[TMP58]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <20 x i32> [[TMP59]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> [[TMP60]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[TMP41]], i64 17
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[TMP38]], i64 18
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[TMP48]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32s(ptr inreg [[TMP44]], i32 inreg [[TMP38]], <20 x i32> inreg [[TMP72]], { i32, i32, i32, i32, i32 } [[TMP77]], i32 1, i32 [[TMP48]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
;
AllocaSpillBB:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %0 = inttoptr i32 %q1 to ptr addrspace(5)
  %1 = getelementptr i8, ptr addrspace(5) %0, i32 0
  %n111 = load i32, ptr addrspace(5) %1, align 4
  %2 = inttoptr i32 %p2 to ptr addrspace(5)
  %3 = getelementptr i8, ptr addrspace(5) %2, i32 0
  %n99 = load i8, ptr addrspace(5) %3, align 1
  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.2)
  %4 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, i32 %4, i32 poison, i32 poison)
  unreachable
}

define void @test.2(i32 %cspInit) !lgc.cps !1 !lgc.shaderstage !2 !continuation !6 !continuation.state !4 {
; CHECK-LABEL: define amdgpu_cs_chain void @test.2(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]]) #[[ATTR1]] align 64 !lgc.cps [[META5]] !lgc.shaderstage [[META6]] !continuation [[META12:![0-9]+]] !continuation.state [[META8]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP5]], label [[ALLOCASPILLBB:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       6:
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], -12
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[TMP8]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP9]], i32 0
; CHECK-NEXT:    [[N333:%.*]] = load i32, ptr addrspace(5) [[TMP10]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP11]], -12
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP34:%.*]] = phi i32 [ [[VCR]], [[ENTRY_BLOCK:%.*]] ], [ 0, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP38:%.*]] = phi i32 [ [[CSPINIT]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP46:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP14]] to <2 x i32>
; CHECK-NEXT:    [[TMP40:%.*]] = insertvalue { i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP41:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP40]], i32 [[TMP34]], 1
; CHECK-NEXT:    [[TMP42:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP41]], i32 [[TMP38]], 2
; CHECK-NEXT:    [[TMP43:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP42]], i32 [[TMP15]], 3
; CHECK-NEXT:    [[TMP44:%.*]] = insertvalue { i32, i32, i32, i32, i32 } [[TMP43]], i32 [[TMP46]], 4
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue { i32, i32, i32, i32, i32 } [[TMP44]], 1
; CHECK-NEXT:    [[TMP18:%.*]] = and i32 [[TMP16]], 7
; CHECK-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP19]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP18]], 3
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP21]])
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[TMP22]], 0
; CHECK-NEXT:    [[TMP24:%.*]] = select i1 [[TMP23]], i32 [[TMP22]], i32 [[TMP20]]
; CHECK-NEXT:    [[TMP25:%.*]] = icmp eq i32 [[TMP18]], 2
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP25]])
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ne i32 [[TMP26]], 0
; CHECK-NEXT:    [[TMP28:%.*]] = select i1 [[TMP27]], i32 [[TMP26]], i32 [[TMP24]]
; CHECK-NEXT:    [[TMP29:%.*]] = icmp eq i32 [[TMP18]], 1
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP29]])
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0
; CHECK-NEXT:    [[TMP32:%.*]] = select i1 [[TMP31]], i32 [[TMP30]], i32 [[TMP28]]
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP32]], i1 true)
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP16]], i32 [[TMP33]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i32 [[TMP16]], [[TMP37]]
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP35]])
; CHECK-NEXT:    [[TMP39:%.*]] = icmp eq i32 [[TMP37]], 0
; CHECK-NEXT:    br i1 [[TMP39]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP45:%.*]] = and i32 [[TMP37]], -64
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP45]], i64 0
; CHECK-NEXT:    [[TMP47:%.*]] = bitcast <2 x i32> [[TMP77]] to i64
; CHECK-NEXT:    [[TMP48:%.*]] = inttoptr i64 [[TMP47]] to ptr
; CHECK-NEXT:    [[TMP49:%.*]] = and i32 [[TMP37]], 56
; CHECK-NEXT:    [[TMP50:%.*]] = shl i32 [[TMP49]], 1
; CHECK-NEXT:    [[TMP51:%.*]] = add i32 [[TMP50]], 16
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP51]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP53:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP53]] to <2 x i32>
; CHECK-NEXT:    [[TMP55:%.*]] = extractelement <2 x i32> [[TMP54]], i64 0
; CHECK-NEXT:    [[TMP56:%.*]] = extractelement <2 x i32> [[TMP54]], i64 1
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP58:%.*]] = insertelement <20 x i32> [[TMP57]], i32 [[TMP55]], i64 1
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <20 x i32> [[TMP58]], i32 [[TMP56]], i64 2
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <20 x i32> [[TMP59]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> [[TMP60]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[TMP45]], i64 17
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[TMP36]], i64 18
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[TMP52]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32s(ptr inreg [[TMP48]], i32 inreg [[TMP36]], <20 x i32> inreg [[TMP76]], { i32, i32, i32, i32, i32 } [[TMP44]], i32 1, i32 [[TMP52]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
AllocaSpillBB:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %0 = load i32, ptr %csp, align 4
  %1 = add i32 %0, -12
  %2 = inttoptr i32 %1 to ptr addrspace(5)
  %3 = getelementptr i8, ptr addrspace(5) %2, i32 0
  %n333 = load i32, ptr addrspace(5) %3, align 4
  %4 = load i32, ptr %csp, align 4
  %5 = add i32 %4, -12
  store i32 %5, ptr %csp, align 4
  ret void
}

define void @test.gep(i32 %cspInit) !lgc.cps !1 !lgc.shaderstage !2 !continuation !7 !continuation.state !4 {
; CHECK-LABEL: define amdgpu_cs_chain void @test.gep(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]]) #[[ATTR1]] align 64 !lgc.cps [[META5]] !lgc.shaderstage [[META6]] !continuation [[META13:![0-9]+]] !continuation.state [[META8]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP5]], label [[ALLOCASPILLBB:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       6:
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 12
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[STACK_EL0:%.*]] = call i32 @lgc.cps.get.dummy.index(i32 0)
; CHECK-NEXT:    [[TMP9:%.*]] = mul i32 [[STACK_EL0]], 24
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP7]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = inttoptr i32 [[TMP10]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP12]], i32 0
; CHECK-NEXT:    store i32 [[TMP11]], ptr addrspace(5) [[TMP13]], align 4
; CHECK-NEXT:    [[STACK_EL1:%.*]] = call i32 @lgc.cps.get.dummy.index(i32 1)
; CHECK-NEXT:    [[TMP14:%.*]] = mul i32 [[STACK_EL1]], 24
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP7]], [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP16]], -4
; CHECK-NEXT:    [[TMP18:%.*]] = inttoptr i32 [[TMP15]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP18]], i32 0
; CHECK-NEXT:    store i32 [[TMP17]], ptr addrspace(5) [[TMP19]], align 4
; CHECK-NEXT:    [[STACK_EL2:%.*]] = call i32 @lgc.cps.get.dummy.index(i32 2)
; CHECK-NEXT:    [[STACK_EL2_DIV:%.*]] = sdiv i32 [[STACK_EL2]], 2
; CHECK-NEXT:    [[TMP20:%.*]] = add i32 [[TMP7]], 8
; CHECK-NEXT:    [[TMP21:%.*]] = mul i32 [[STACK_EL2_DIV]], 24
; CHECK-NEXT:    [[TMP22:%.*]] = add i32 [[TMP20]], [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP23]], -8
; CHECK-NEXT:    [[TMP25:%.*]] = inttoptr i32 [[TMP22]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP25]], i32 0
; CHECK-NEXT:    store i32 [[TMP24]], ptr addrspace(5) [[TMP26]], align 4
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @llvm.amdgcn.reloc.constant(metadata [[META9]])
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP27]], 1
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP54:%.*]] = phi i32 [ [[VCR]], [[ENTRY_BLOCK:%.*]] ], [ [[TMP28]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP58:%.*]] = phi i32 [ [[CSPINIT]], [[ENTRY_BLOCK]] ], [ [[TMP29]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi i32 [ poison, [[ENTRY_BLOCK]] ], [ [[TMP24]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = phi i32 [ poison, [[ENTRY_BLOCK]] ], [ [[TMP24]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP34]] to <2 x i32>
; CHECK-NEXT:    [[TMP91:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP92:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP91]], i32 [[TMP54]], 1
; CHECK-NEXT:    [[TMP93:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP92]], i32 [[TMP58]], 2
; CHECK-NEXT:    [[TMP94:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP93]], i32 [[TMP32]], 3
; CHECK-NEXT:    [[TMP95:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP94]], i32 [[TMP33]], 4
; CHECK-NEXT:    [[TMP96:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP95]], i32 [[TMP35]], 5
; CHECK-NEXT:    [[TMP97:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP96]], i32 [[TMP37]], 6
; CHECK-NEXT:    [[TMP36:%.*]] = extractvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP97]], 1
; CHECK-NEXT:    [[TMP38:%.*]] = and i32 [[TMP36]], 7
; CHECK-NEXT:    [[TMP39:%.*]] = icmp ne i32 [[TMP38]], 0
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP39]])
; CHECK-NEXT:    [[TMP41:%.*]] = icmp eq i32 [[TMP38]], 3
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp ne i32 [[TMP42]], 0
; CHECK-NEXT:    [[TMP44:%.*]] = select i1 [[TMP43]], i32 [[TMP42]], i32 [[TMP40]]
; CHECK-NEXT:    [[TMP45:%.*]] = icmp eq i32 [[TMP38]], 2
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = icmp ne i32 [[TMP46]], 0
; CHECK-NEXT:    [[TMP48:%.*]] = select i1 [[TMP47]], i32 [[TMP46]], i32 [[TMP44]]
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i32 [[TMP38]], 1
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP49]])
; CHECK-NEXT:    [[TMP51:%.*]] = icmp ne i32 [[TMP50]], 0
; CHECK-NEXT:    [[TMP52:%.*]] = select i1 [[TMP51]], i32 [[TMP50]], i32 [[TMP48]]
; CHECK-NEXT:    [[TMP53:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP52]], i1 true)
; CHECK-NEXT:    [[TMP57:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP36]], i32 [[TMP53]])
; CHECK-NEXT:    [[TMP55:%.*]] = icmp eq i32 [[TMP36]], [[TMP57]]
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP55]])
; CHECK-NEXT:    [[TMP59:%.*]] = and i32 [[TMP57]], -64
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP59]], i64 0
; CHECK-NEXT:    [[TMP61:%.*]] = bitcast <2 x i32> [[TMP60]] to i64
; CHECK-NEXT:    [[TMP62:%.*]] = inttoptr i64 [[TMP61]] to ptr
; CHECK-NEXT:    [[TMP63:%.*]] = and i32 [[TMP57]], 56
; CHECK-NEXT:    [[TMP64:%.*]] = shl i32 [[TMP63]], 1
; CHECK-NEXT:    [[TMP65:%.*]] = add i32 [[TMP64]], 16
; CHECK-NEXT:    [[TMP66:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP65]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP67:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP68:%.*]] = bitcast i64 [[TMP67]] to <2 x i32>
; CHECK-NEXT:    [[TMP69:%.*]] = extractelement <2 x i32> [[TMP68]], i64 0
; CHECK-NEXT:    [[TMP70:%.*]] = extractelement <2 x i32> [[TMP68]], i64 1
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[TMP69]], i64 1
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[TMP70]], i64 2
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <20 x i32> [[TMP76]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <20 x i32> [[TMP77]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP79:%.*]] = insertelement <20 x i32> [[TMP78]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP80:%.*]] = insertelement <20 x i32> [[TMP79]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP81:%.*]] = insertelement <20 x i32> [[TMP80]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP82:%.*]] = insertelement <20 x i32> [[TMP81]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP83:%.*]] = insertelement <20 x i32> [[TMP82]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP84:%.*]] = insertelement <20 x i32> [[TMP83]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP85:%.*]] = insertelement <20 x i32> [[TMP84]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP86:%.*]] = insertelement <20 x i32> [[TMP85]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP87:%.*]] = insertelement <20 x i32> [[TMP86]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP88:%.*]] = insertelement <20 x i32> [[TMP87]], i32 [[TMP59]], i64 17
; CHECK-NEXT:    [[TMP89:%.*]] = insertelement <20 x i32> [[TMP88]], i32 [[TMP56]], i64 18
; CHECK-NEXT:    [[TMP90:%.*]] = insertelement <20 x i32> [[TMP89]], i32 [[TMP66]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32i32i32s(ptr inreg [[TMP62]], i32 inreg [[TMP56]], <20 x i32> inreg [[TMP90]], { i32, i32, i32, i32, i32, i32, i32 } [[TMP97]], i32 1, i32 [[TMP66]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
;
AllocaSpillBB:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %0 = load i32, ptr %csp, align 4
  %1 = add i32 %0, 12
  store i32 %1, ptr %csp, align 4
  %stack.el0 = call i32 @lgc.cps.get.dummy.index(i32 0)
  %2 = mul i32 %stack.el0, 24
  %3 = add i32 %0, %2
  %4 = load i32, ptr %csp, align 4
  %5 = inttoptr i32 %3 to ptr addrspace(5)
  %6 = getelementptr i8, ptr addrspace(5) %5, i32 0
  store i32 %4, ptr addrspace(5) %6, align 4
  %stack.el1 = call i32 @lgc.cps.get.dummy.index(i32 1)
  %7 = mul i32 %stack.el1, 24
  %8 = add i32 %0, %7
  %9 = load i32, ptr %csp, align 4
  %10 = add i32 %9, -4
  %11 = inttoptr i32 %8 to ptr addrspace(5)
  %12 = getelementptr i8, ptr addrspace(5) %11, i32 0
  store i32 %10, ptr addrspace(5) %12, align 4
  %stack.el2 = call i32 @lgc.cps.get.dummy.index(i32 2)
  %stack.el2.div = sdiv i32 %stack.el2, 2
  %13 = add i32 %0, 8
  %14 = mul i32 %stack.el2.div, 24
  %15 = add i32 %13, %14
  %16 = load i32, ptr %csp, align 4
  %17 = add i32 %16, -8
  %18 = inttoptr i32 %15 to ptr addrspace(5)
  %19 = getelementptr i8, ptr addrspace(5) %18, i32 0
  store i32 %17, ptr addrspace(5) %19, align 4
  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.1)
  %20 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, i32 %20, i32 poison, i32 poison, i32 %17, i32 %17)
  unreachable
}

define void @test.nested.gep(i32 %cspInit) !lgc.cps !1 !lgc.shaderstage !2 !continuation !8 !continuation.state !4 {
; CHECK-LABEL: define amdgpu_cs_chain void @test.nested.gep(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[CSPINIT:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]]) #[[ATTR1]] align 64 !lgc.cps [[META5]] !lgc.shaderstage [[META6]] !continuation [[META14:![0-9]+]] !continuation.state [[META8]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP5]], label [[ALLOCASPILLBB:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       6:
; CHECK-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 12
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[STACK_EL0:%.*]] = call i32 @lgc.cps.get.dummy.index(i32 0)
; CHECK-NEXT:    [[TMP9:%.*]] = mul i32 [[STACK_EL0]], 24
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP7]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 16
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = inttoptr i32 [[TMP11]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr addrspace(5) [[TMP13]], i32 0
; CHECK-NEXT:    store i32 [[TMP12]], ptr addrspace(5) [[TMP14]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.reloc.constant(metadata [[META9]])
; CHECK-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP42:%.*]] = phi i32 [ [[VCR]], [[ENTRY_BLOCK:%.*]] ], [ [[TMP16]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP46:%.*]] = phi i32 [ [[CSPINIT]], [[ENTRY_BLOCK]] ], [ [[TMP17]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ENTRY_BLOCK]] ], [ poison, [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi i32 [ poison, [[ENTRY_BLOCK]] ], [ [[TMP12]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi i32 [ poison, [[ENTRY_BLOCK]] ], [ [[TMP12]], [[ALLOCASPILLBB]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP22]] to <2 x i32>
; CHECK-NEXT:    [[TMP79:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP80:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP79]], i32 [[TMP42]], 1
; CHECK-NEXT:    [[TMP81:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP80]], i32 [[TMP46]], 2
; CHECK-NEXT:    [[TMP82:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP81]], i32 [[TMP20]], 3
; CHECK-NEXT:    [[TMP83:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP82]], i32 [[TMP21]], 4
; CHECK-NEXT:    [[TMP84:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP83]], i32 [[TMP23]], 5
; CHECK-NEXT:    [[TMP85:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP84]], i32 [[TMP25]], 6
; CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { i32, i32, i32, i32, i32, i32, i32 } [[TMP85]], 1
; CHECK-NEXT:    [[TMP26:%.*]] = and i32 [[TMP24]], 7
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ne i32 [[TMP26]], 0
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP27]])
; CHECK-NEXT:    [[TMP29:%.*]] = icmp eq i32 [[TMP26]], 3
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP29]])
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0
; CHECK-NEXT:    [[TMP32:%.*]] = select i1 [[TMP31]], i32 [[TMP30]], i32 [[TMP28]]
; CHECK-NEXT:    [[TMP33:%.*]] = icmp eq i32 [[TMP26]], 2
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP33]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp ne i32 [[TMP34]], 0
; CHECK-NEXT:    [[TMP36:%.*]] = select i1 [[TMP35]], i32 [[TMP34]], i32 [[TMP32]]
; CHECK-NEXT:    [[TMP37:%.*]] = icmp eq i32 [[TMP26]], 1
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP37]])
; CHECK-NEXT:    [[TMP39:%.*]] = icmp ne i32 [[TMP38]], 0
; CHECK-NEXT:    [[TMP40:%.*]] = select i1 [[TMP39]], i32 [[TMP38]], i32 [[TMP36]]
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP40]], i1 true)
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP24]], i32 [[TMP41]])
; CHECK-NEXT:    [[TMP43:%.*]] = icmp eq i32 [[TMP24]], [[TMP45]]
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP43]])
; CHECK-NEXT:    [[TMP47:%.*]] = and i32 [[TMP45]], -64
; CHECK-NEXT:    [[TMP48:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP47]], i64 0
; CHECK-NEXT:    [[TMP49:%.*]] = bitcast <2 x i32> [[TMP48]] to i64
; CHECK-NEXT:    [[TMP50:%.*]] = inttoptr i64 [[TMP49]] to ptr
; CHECK-NEXT:    [[TMP51:%.*]] = and i32 [[TMP45]], 56
; CHECK-NEXT:    [[TMP52:%.*]] = shl i32 [[TMP51]], 1
; CHECK-NEXT:    [[TMP53:%.*]] = add i32 [[TMP52]], 16
; CHECK-NEXT:    [[TMP54:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP53]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP55:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP56:%.*]] = bitcast i64 [[TMP55]] to <2 x i32>
; CHECK-NEXT:    [[TMP57:%.*]] = extractelement <2 x i32> [[TMP56]], i64 0
; CHECK-NEXT:    [[TMP58:%.*]] = extractelement <2 x i32> [[TMP56]], i64 1
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <20 x i32> [[TMP59]], i32 [[TMP57]], i64 1
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> [[TMP60]], i32 [[TMP58]], i64 2
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <20 x i32> [[TMP75]], i32 [[TMP47]], i64 17
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <20 x i32> [[TMP76]], i32 [[TMP44]], i64 18
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <20 x i32> [[TMP77]], i32 [[TMP54]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32i32i32s(ptr inreg [[TMP50]], i32 inreg [[TMP44]], <20 x i32> inreg [[TMP78]], { i32, i32, i32, i32, i32, i32, i32 } [[TMP85]], i32 1, i32 [[TMP54]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
;
AllocaSpillBB:
  %csp = alloca i32, align 4
  store i32 %cspInit, ptr %csp, align 4
  %0 = load i32, ptr %csp, align 4
  %1 = add i32 %0, 12
  store i32 %1, ptr %csp, align 4
  %stack.el0 = call i32 @lgc.cps.get.dummy.index(i32 0)
  %2 = mul i32 %stack.el0, 24
  %3 = add i32 %0, %2
  %4 = add i32 %3, 16
  %5 = load i32, ptr %csp, align 4
  %6 = inttoptr i32 %4 to ptr addrspace(5)
  %7 = getelementptr i8, ptr addrspace(5) %6, i32 0
  store i32 %5, ptr addrspace(5) %7, align 4
  %cr = call i32 @lgc.cps.as.continuation.reference(ptr @test.1)
  %8 = load i32, ptr %csp, align 4
  call void (...) @lgc.cps.jump(i32 %cr, i32 2, i32 %8, i32 poison, i32 poison, i32 %5, i32 %5)
  unreachable
}

declare !continuation !3 { ptr, ptr } @continuation.prototype.test.0(ptr, i1)

declare ptr @continuation.malloc(i32)

declare void @continuation.free(ptr)

declare token @llvm.coro.id.retcon(i32, i32, ptr, ptr, ptr, ptr) #1

declare ptr @llvm.coro.begin(token, ptr writeonly) #1

declare !continuation !5 { ptr, ptr } @continuation.prototype.test.1(ptr, i1)

declare !continuation !6 { ptr, ptr } @continuation.prototype.test.2(ptr, i1)

declare !continuation !7 { ptr, ptr } @continuation.prototype.test.gep(ptr, i1)

declare !continuation !8 { ptr, ptr } @continuation.prototype.test.nested.gep(ptr, i1)

attributes #0 = { noreturn }
attributes #1 = { nounwind }

!continuation.stackAddrspace = !{!0}
!lgc.cps.maxArgumentVgprs = !{!9}

!0 = !{i32 5}
!1 = !{i32 1}
!2 = !{i32 7}
!3 = !{ptr @test.0}
!4 = !{i32 0}
!5 = !{ptr @test.1}
!6 = !{ptr @test.2}
!7 = !{ptr @test.gep}
!8 = !{ptr @test.nested.gep}
!9 = !{i32 3}
;.
; CHECK: [[META5]] = !{i32 1}
; CHECK: [[META6]] = !{i32 7}
; CHECK: [[META7]] = !{ptr @test.0}
; CHECK: [[META8]] = !{i32 0}
; CHECK: [[META9]] = !{!"_dvgpr$test.1"}
; CHECK: [[META10]] = !{ptr @test.1}
; CHECK: [[META11]] = !{!"_dvgpr$test.2"}
; CHECK: [[META12]] = !{ptr @test.2}
; CHECK: [[META13]] = !{ptr @test.gep}
; CHECK: [[META14]] = !{ptr @test.nested.gep}
;.
