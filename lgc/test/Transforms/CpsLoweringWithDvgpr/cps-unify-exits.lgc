
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 4
; RUN: lgc -mcpu=gfx1201 -o - -lgc-use-init-whole-wave -passes="require<lgc-pipeline-state>,lgc-mutate-entry-point" %s | FileCheck --check-prefixes=CHECK %s

; REQUIRES: llvm-main-revision-ge-528172

declare void @lgc.cps.jump(...) #0

define void @unify_jumps(i32 %arg, ptr %table) !lgc.cps !1 !lgc.shaderstage !2 {
; CHECK-LABEL: define amdgpu_cs_chain void @unify_jumps(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]], i32 [[INACTIVE_VGPR2:%.*]], i32 [[INACTIVE_VGPR3:%.*]], i32 [[INACTIVE_VGPR4:%.*]], i32 [[INACTIVE_VGPR5:%.*]], i32 [[INACTIVE_VGPR6:%.*]], i32 [[INACTIVE_VGPR7:%.*]], i32 [[INACTIVE_VGPR8:%.*]], i32 [[INACTIVE_VGPR9:%.*]], i32 [[INACTIVE_VGPR10:%.*]], i32 [[INACTIVE_VGPR11:%.*]], i32 [[INACTIVE_VGPR12:%.*]], i32 [[INACTIVE_VGPR13:%.*]], i32 [[INACTIVE_VGPR14:%.*]], i32 [[INACTIVE_VGPR15:%.*]], i32 [[INACTIVE_VGPR16:%.*]], i32 [[INACTIVE_VGPR17:%.*]], i32 [[INACTIVE_VGPR18:%.*]], i32 [[INACTIVE_VGPR19:%.*]], i32 [[INACTIVE_VGPR20:%.*]], i32 [[INACTIVE_VGPR21:%.*]], i32 [[INACTIVE_VGPR22:%.*]], i32 [[INACTIVE_VGPR23:%.*]], i32 [[INACTIVE_VGPR24:%.*]], i32 [[INACTIVE_VGPR25:%.*]], i32 [[INACTIVE_VGPR26:%.*]], i32 [[INACTIVE_VGPR27:%.*]], i32 [[INACTIVE_VGPR28:%.*]]) #[[ATTR1:[0-9]+]] align 128 !lgc.cps [[META4:![0-9]+]] !lgc.shaderstage [[META5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP38:%.*]] = bitcast <2 x i32> [[TMP26]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP38]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP76:%.*]] = ptrtoint ptr [[TABLE]] to i64
; CHECK-NEXT:    [[TMP77:%.*]] = bitcast i64 [[TMP76]] to <2 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i32> [[TMP77]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[TMP77]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.dead.i32()
; CHECK-NEXT:    [[TMP78:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP78]], label [[TMP79:%.*]], label [[ELSE:%.*]]
; CHECK:       11:
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[ARG]], 3
; CHECK-NEXT:    br i1 [[COND]], label [[THEN1:%.*]], label [[ELSE1:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    br label [[ELSE]]
; CHECK:       else:
; CHECK-NEXT:    [[TABLE_1:%.*]] = getelementptr i32, ptr [[TABLE]], i32 1
; CHECK-NEXT:    [[CR_ELSE:%.*]] = load i32, ptr [[TABLE_1]], align 4
; CHECK-NEXT:    [[ELSE_ARG:%.*]] = uitofp i32 [[ARG]] to float
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast float [[ELSE_ARG]] to i32
; CHECK-NEXT:    br label [[ELSE]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP17:%.*]] = phi i32 [ [[VCR]], [[ENTRY_BLOCK:%.*]] ], [ [[CR_ELSE]], [[ELSE1]] ], [ [[CR_THEN]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP12:%.*]] = phi i32 [ [[ARG]], [[ENTRY_BLOCK]] ], [ poison, [[ELSE1]] ], [ poison, [[THEN1]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[TMP7]], [[ENTRY_BLOCK]] ], [ poison, [[ELSE1]] ], [ poison, [[THEN1]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi i32 [ [[TMP8]], [[ENTRY_BLOCK]] ], [ poison, [[ELSE1]] ], [ poison, [[THEN1]] ]
; CHECK-NEXT:    [[TMP81:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ENTRY_BLOCK]] ], [ [[TMP10]], [[ELSE1]] ], [ [[THEN_ARG]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP82:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ENTRY_BLOCK]] ], [ 5, [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi i32 [ [[INACTIVE_VGPR2]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi i32 [ [[INACTIVE_VGPR3]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP83:%.*]] = phi i32 [ [[INACTIVE_VGPR4]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP84:%.*]] = phi i32 [ [[INACTIVE_VGPR5]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP85:%.*]] = phi i32 [ [[INACTIVE_VGPR6]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP86:%.*]] = phi i32 [ [[INACTIVE_VGPR7]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi i32 [ [[INACTIVE_VGPR8]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP87:%.*]] = phi i32 [ [[INACTIVE_VGPR9]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP88:%.*]] = phi i32 [ [[INACTIVE_VGPR10]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP89:%.*]] = phi i32 [ [[INACTIVE_VGPR11]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP90:%.*]] = phi i32 [ [[INACTIVE_VGPR12]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP91:%.*]] = phi i32 [ [[INACTIVE_VGPR13]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP92:%.*]] = phi i32 [ [[INACTIVE_VGPR14]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP93:%.*]] = phi i32 [ [[INACTIVE_VGPR15]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP94:%.*]] = phi i32 [ [[INACTIVE_VGPR16]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP95:%.*]] = phi i32 [ [[INACTIVE_VGPR17]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP96:%.*]] = phi i32 [ [[INACTIVE_VGPR18]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP98:%.*]] = phi i32 [ [[INACTIVE_VGPR19]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP99:%.*]] = phi i32 [ [[INACTIVE_VGPR20]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP100:%.*]] = phi i32 [ [[INACTIVE_VGPR21]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP101:%.*]] = phi i32 [ [[INACTIVE_VGPR22]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP102:%.*]] = phi i32 [ [[INACTIVE_VGPR23]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP103:%.*]] = phi i32 [ [[INACTIVE_VGPR24]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = phi i32 [ [[INACTIVE_VGPR25]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP104:%.*]] = phi i32 [ [[INACTIVE_VGPR26]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP43:%.*]] = phi i32 [ [[INACTIVE_VGPR27]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP105:%.*]] = phi i32 [ [[INACTIVE_VGPR28]], [[ENTRY_BLOCK]] ], [ [[TMP15]], [[ELSE1]] ], [ [[TMP15]], [[THEN1]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i64 [[TMP16]] to <2 x i32>
; CHECK-NEXT:    [[TMP106:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP107:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP106]], i32 [[TMP17]], 1
; CHECK-NEXT:    [[TMP108:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP107]], i32 [[TMP12]], 2
; CHECK-NEXT:    [[TMP109:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP108]], i32 [[TMP13]], 3
; CHECK-NEXT:    [[TMP110:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP109]], i32 [[TMP14]], 4
; CHECK-NEXT:    [[TMP111:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP110]], i32 [[TMP81]], 5
; CHECK-NEXT:    [[TMP112:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP111]], i32 [[TMP82]], 6
; CHECK-NEXT:    [[TMP113:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP112]], i32 [[TMP18]], 7
; CHECK-NEXT:    [[TMP114:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP113]], i32 [[TMP19]], 8
; CHECK-NEXT:    [[TMP115:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP114]], i32 [[TMP83]], 9
; CHECK-NEXT:    [[TMP116:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP115]], i32 [[TMP84]], 10
; CHECK-NEXT:    [[TMP117:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP116]], i32 [[TMP85]], 11
; CHECK-NEXT:    [[TMP118:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP117]], i32 [[TMP86]], 12
; CHECK-NEXT:    [[TMP119:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP118]], i32 [[TMP24]], 13
; CHECK-NEXT:    [[TMP120:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP119]], i32 [[TMP87]], 14
; CHECK-NEXT:    [[TMP121:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP120]], i32 [[TMP88]], 15
; CHECK-NEXT:    [[TMP122:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP121]], i32 [[TMP89]], 16
; CHECK-NEXT:    [[TMP123:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP122]], i32 [[TMP90]], 17
; CHECK-NEXT:    [[TMP124:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP123]], i32 [[TMP91]], 18
; CHECK-NEXT:    [[TMP125:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP124]], i32 [[TMP92]], 19
; CHECK-NEXT:    [[TMP126:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP125]], i32 [[TMP93]], 20
; CHECK-NEXT:    [[TMP127:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP126]], i32 [[TMP94]], 21
; CHECK-NEXT:    [[TMP128:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP127]], i32 [[TMP95]], 22
; CHECK-NEXT:    [[TMP129:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP128]], i32 [[TMP96]], 23
; CHECK-NEXT:    [[TMP130:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP129]], i32 [[TMP98]], 24
; CHECK-NEXT:    [[TMP131:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP130]], i32 [[TMP99]], 25
; CHECK-NEXT:    [[TMP132:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP131]], i32 [[TMP100]], 26
; CHECK-NEXT:    [[TMP133:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP132]], i32 [[TMP101]], 27
; CHECK-NEXT:    [[TMP134:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP133]], i32 [[TMP102]], 28
; CHECK-NEXT:    [[TMP135:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP134]], i32 [[TMP103]], 29
; CHECK-NEXT:    [[TMP136:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP135]], i32 [[TMP41]], 30
; CHECK-NEXT:    [[TMP137:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP136]], i32 [[TMP104]], 31
; CHECK-NEXT:    [[TMP138:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP137]], i32 [[TMP43]], 32
; CHECK-NEXT:    [[TMP80:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP138]], i32 [[TMP105]], 33
; CHECK-NEXT:    [[TMP25:%.*]] = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP80]], 1
; CHECK-NEXT:    [[TMP27:%.*]] = and i32 [[TMP25]], 7
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i32 [[TMP27]], 0
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP28]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP27]], 3
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP21]])
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[TMP22]], 0
; CHECK-NEXT:    [[TMP29:%.*]] = select i1 [[TMP23]], i32 [[TMP22]], i32 [[TMP20]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp eq i32 [[TMP27]], 2
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP30]])
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0
; CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i32 [[TMP31]], i32 [[TMP29]]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp eq i32 [[TMP27]], 1
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP34]])
; CHECK-NEXT:    [[TMP36:%.*]] = icmp ne i32 [[TMP35]], 0
; CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i32 [[TMP35]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP97:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP37]], i1 true)
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP25]], i32 [[TMP97]])
; CHECK-NEXT:    [[TMP39:%.*]] = icmp eq i32 [[TMP25]], [[TMP42]]
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP39]])
; CHECK-NEXT:    [[TMP44:%.*]] = and i32 [[TMP42]], -64
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <2 x i32> [[TMP11]], i32 [[TMP44]], i64 0
; CHECK-NEXT:    [[TMP46:%.*]] = bitcast <2 x i32> [[TMP45]] to i64
; CHECK-NEXT:    [[TMP47:%.*]] = inttoptr i64 [[TMP46]] to ptr
; CHECK-NEXT:    [[TMP48:%.*]] = and i32 [[TMP42]], 56
; CHECK-NEXT:    [[TMP49:%.*]] = shl i32 [[TMP48]], 1
; CHECK-NEXT:    [[TMP50:%.*]] = add i32 [[TMP49]], 16
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP50]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP52:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP53:%.*]] = bitcast i64 [[TMP52]] to <2 x i32>
; CHECK-NEXT:    [[TMP54:%.*]] = extractelement <2 x i32> [[TMP53]], i64 0
; CHECK-NEXT:    [[TMP55:%.*]] = extractelement <2 x i32> [[TMP53]], i64 1
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <20 x i32> [[TMP56]], i32 [[TMP54]], i64 1
; CHECK-NEXT:    [[TMP58:%.*]] = insertelement <20 x i32> [[TMP57]], i32 [[TMP55]], i64 2
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <20 x i32> [[TMP58]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <20 x i32> [[TMP59]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> [[TMP60]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[TMP44]], i64 17
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <20 x i32> [[TMP73]], i32 [[TMP40]], i64 18
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <20 x i32> [[TMP74]], i32 [[TMP51]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32s(ptr inreg [[TMP47]], i32 inreg [[TMP40]], <20 x i32> inreg [[TMP75]], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP80]], i32 1, i32 [[TMP51]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
;
entry:
  %cond = icmp ult i32 %arg, 3
  br i1 %cond, label %then, label %else

then:                                             ; preds = %entry
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0, align 4
  %then.arg = add i32 %arg, 1
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, i32 poison, i32 poison, i32 poison, i32 %then.arg)
  unreachable

else:                                             ; preds = %entry
  %table.1 = getelementptr i32, ptr %table, i32 1
  %cr.else = load i32, ptr %table.1, align 4
  %else.arg = uitofp i32 %arg to float
  call void (...) @lgc.cps.jump(i32 %cr.else, i32 2, i32 poison, i32 poison, i32 poison, float %else.arg, i32 5)
  unreachable
}

define void @unify_jump_ret(i32 %arg, ptr %table) !lgc.cps !1 !lgc.shaderstage !2 {
; CHECK-LABEL: define amdgpu_cs_chain void @unify_jump_ret(
; CHECK-SAME: i32 inreg [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg [[NUMWORKGROUPSPTR:%.*]], i32 inreg [[PAD0:%.*]], i32 inreg [[PAD1:%.*]], i32 inreg [[PAD2:%.*]], i32 inreg [[PAD3:%.*]], i32 inreg [[PAD4:%.*]], i32 inreg [[PAD5:%.*]], i32 inreg [[PAD6:%.*]], i32 inreg [[PAD7:%.*]], i32 inreg [[PAD8:%.*]], i32 inreg [[PAD9:%.*]], i32 inreg [[PAD10:%.*]], i32 inreg [[PAD11:%.*]], i32 inreg [[SPILLTABLE:%.*]], i32 [[LOCALINVOCATIONID:%.*]], i32 inreg [[MAXOUTGOINGVGPRCOUNT:%.*]], i32 [[VCR:%.*]], i32 [[ARG:%.*]], ptr [[TABLE:%.*]], i32 [[INACTIVE_VGPR:%.*]], i32 [[INACTIVE_VGPR1:%.*]], i32 [[INACTIVE_VGPR2:%.*]], i32 [[INACTIVE_VGPR3:%.*]], i32 [[INACTIVE_VGPR4:%.*]], i32 [[INACTIVE_VGPR5:%.*]], i32 [[INACTIVE_VGPR6:%.*]], i32 [[INACTIVE_VGPR7:%.*]], i32 [[INACTIVE_VGPR8:%.*]], i32 [[INACTIVE_VGPR9:%.*]], i32 [[INACTIVE_VGPR10:%.*]], i32 [[INACTIVE_VGPR11:%.*]], i32 [[INACTIVE_VGPR12:%.*]], i32 [[INACTIVE_VGPR13:%.*]], i32 [[INACTIVE_VGPR14:%.*]], i32 [[INACTIVE_VGPR15:%.*]], i32 [[INACTIVE_VGPR16:%.*]], i32 [[INACTIVE_VGPR17:%.*]], i32 [[INACTIVE_VGPR18:%.*]], i32 [[INACTIVE_VGPR19:%.*]], i32 [[INACTIVE_VGPR20:%.*]], i32 [[INACTIVE_VGPR21:%.*]], i32 [[INACTIVE_VGPR22:%.*]], i32 [[INACTIVE_VGPR23:%.*]], i32 [[INACTIVE_VGPR24:%.*]], i32 [[INACTIVE_VGPR25:%.*]], i32 [[INACTIVE_VGPR26:%.*]], i32 [[INACTIVE_VGPR27:%.*]], i32 [[INACTIVE_VGPR28:%.*]]) #[[ATTR1]] align 128 !lgc.cps [[META4]] !lgc.shaderstage [[META5]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SPILLTABLE]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TABLE]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP5]] to <2 x i32>
; CHECK-NEXT:    [[TMP36:%.*]] = extractelement <2 x i32> [[TMP8]], i64 0
; CHECK-NEXT:    [[TMP40:%.*]] = extractelement <2 x i32> [[TMP8]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @llvm.amdgcn.dead.i32()
; CHECK-NEXT:    [[TMP19:%.*]] = call i1 @llvm.amdgcn.init.whole.wave()
; CHECK-NEXT:    br i1 [[TMP19]], label [[TMP74:%.*]], label [[TAIL_BLOCK:%.*]]
; CHECK:       11:
; CHECK-NEXT:    [[COND:%.*]] = icmp ult i32 [[ARG]], 3
; CHECK-NEXT:    br i1 [[COND]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[TABLE_0:%.*]] = getelementptr i32, ptr [[TABLE]], i32 0
; CHECK-NEXT:    [[CR_THEN:%.*]] = load i32, ptr [[TABLE_0]], align 4
; CHECK-NEXT:    [[THEN_ARG:%.*]] = add i32 [[ARG]], 1
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       else:
; CHECK-NEXT:    br label [[TAIL_BLOCK]]
; CHECK:       tail.block:
; CHECK-NEXT:    [[TMP7:%.*]] = phi i32 [ [[VCR]], [[ENTRY_BLOCK:%.*]] ], [ [[CR_THEN]], [[THEN]] ], [ 0, [[ELSE]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ARG]], [[ENTRY_BLOCK]] ], [ poison, [[THEN]] ], [ poison, [[ELSE]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = phi i32 [ [[TMP36]], [[ENTRY_BLOCK]] ], [ poison, [[THEN]] ], [ poison, [[ELSE]] ]
; CHECK-NEXT:    [[TMP11:%.*]] = phi i32 [ [[TMP40]], [[ENTRY_BLOCK]] ], [ poison, [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ [[INACTIVE_VGPR]], [[ENTRY_BLOCK]] ], [ [[THEN_ARG]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi i32 [ [[INACTIVE_VGPR1]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP80:%.*]] = phi i32 [ [[INACTIVE_VGPR2]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP81:%.*]] = phi i32 [ [[INACTIVE_VGPR3]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP82:%.*]] = phi i32 [ [[INACTIVE_VGPR4]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP83:%.*]] = phi i32 [ [[INACTIVE_VGPR5]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP84:%.*]] = phi i32 [ [[INACTIVE_VGPR6]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP85:%.*]] = phi i32 [ [[INACTIVE_VGPR7]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP86:%.*]] = phi i32 [ [[INACTIVE_VGPR8]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP87:%.*]] = phi i32 [ [[INACTIVE_VGPR9]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP88:%.*]] = phi i32 [ [[INACTIVE_VGPR10]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP89:%.*]] = phi i32 [ [[INACTIVE_VGPR11]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP90:%.*]] = phi i32 [ [[INACTIVE_VGPR12]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP91:%.*]] = phi i32 [ [[INACTIVE_VGPR13]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP92:%.*]] = phi i32 [ [[INACTIVE_VGPR14]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP93:%.*]] = phi i32 [ [[INACTIVE_VGPR15]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP94:%.*]] = phi i32 [ [[INACTIVE_VGPR16]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP95:%.*]] = phi i32 [ [[INACTIVE_VGPR17]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP96:%.*]] = phi i32 [ [[INACTIVE_VGPR18]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP97:%.*]] = phi i32 [ [[INACTIVE_VGPR19]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP98:%.*]] = phi i32 [ [[INACTIVE_VGPR20]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP99:%.*]] = phi i32 [ [[INACTIVE_VGPR21]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP100:%.*]] = phi i32 [ [[INACTIVE_VGPR22]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP101:%.*]] = phi i32 [ [[INACTIVE_VGPR23]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP102:%.*]] = phi i32 [ [[INACTIVE_VGPR24]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP103:%.*]] = phi i32 [ [[INACTIVE_VGPR25]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP104:%.*]] = phi i32 [ [[INACTIVE_VGPR26]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP105:%.*]] = phi i32 [ [[INACTIVE_VGPR27]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP106:%.*]] = phi i32 [ [[INACTIVE_VGPR28]], [[ENTRY_BLOCK]] ], [ [[TMP12]], [[THEN]] ], [ [[TMP12]], [[ELSE]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP17]] to <2 x i32>
; CHECK-NEXT:    [[TMP107:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } poison, i32 [[LOCALINVOCATIONID]], 0
; CHECK-NEXT:    [[TMP108:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP107]], i32 [[TMP7]], 1
; CHECK-NEXT:    [[TMP109:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP108]], i32 [[TMP9]], 2
; CHECK-NEXT:    [[TMP110:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP109]], i32 [[TMP10]], 3
; CHECK-NEXT:    [[TMP111:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP110]], i32 [[TMP11]], 4
; CHECK-NEXT:    [[TMP112:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP111]], i32 [[TMP15]], 5
; CHECK-NEXT:    [[TMP113:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP112]], i32 [[TMP16]], 6
; CHECK-NEXT:    [[TMP114:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP113]], i32 [[TMP80]], 7
; CHECK-NEXT:    [[TMP115:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP114]], i32 [[TMP81]], 8
; CHECK-NEXT:    [[TMP116:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP115]], i32 [[TMP82]], 9
; CHECK-NEXT:    [[TMP117:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP116]], i32 [[TMP83]], 10
; CHECK-NEXT:    [[TMP118:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP117]], i32 [[TMP84]], 11
; CHECK-NEXT:    [[TMP119:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP118]], i32 [[TMP85]], 12
; CHECK-NEXT:    [[TMP120:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP119]], i32 [[TMP86]], 13
; CHECK-NEXT:    [[TMP121:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP120]], i32 [[TMP87]], 14
; CHECK-NEXT:    [[TMP122:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP121]], i32 [[TMP88]], 15
; CHECK-NEXT:    [[TMP123:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP122]], i32 [[TMP89]], 16
; CHECK-NEXT:    [[TMP124:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP123]], i32 [[TMP90]], 17
; CHECK-NEXT:    [[TMP125:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP124]], i32 [[TMP91]], 18
; CHECK-NEXT:    [[TMP126:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP125]], i32 [[TMP92]], 19
; CHECK-NEXT:    [[TMP127:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP126]], i32 [[TMP93]], 20
; CHECK-NEXT:    [[TMP128:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP127]], i32 [[TMP94]], 21
; CHECK-NEXT:    [[TMP129:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP128]], i32 [[TMP95]], 22
; CHECK-NEXT:    [[TMP130:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP129]], i32 [[TMP96]], 23
; CHECK-NEXT:    [[TMP131:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP130]], i32 [[TMP97]], 24
; CHECK-NEXT:    [[TMP132:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP131]], i32 [[TMP98]], 25
; CHECK-NEXT:    [[TMP133:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP132]], i32 [[TMP99]], 26
; CHECK-NEXT:    [[TMP134:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP133]], i32 [[TMP100]], 27
; CHECK-NEXT:    [[TMP135:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP134]], i32 [[TMP101]], 28
; CHECK-NEXT:    [[TMP75:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP135]], i32 [[TMP102]], 29
; CHECK-NEXT:    [[TMP76:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP75]], i32 [[TMP103]], 30
; CHECK-NEXT:    [[TMP77:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP76]], i32 [[TMP104]], 31
; CHECK-NEXT:    [[TMP78:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP77]], i32 [[TMP105]], 32
; CHECK-NEXT:    [[TMP79:%.*]] = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP78]], i32 [[TMP106]], 33
; CHECK-NEXT:    [[TMP18:%.*]] = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP79]], 1
; CHECK-NEXT:    [[TMP20:%.*]] = and i32 [[TMP18]], 7
; CHECK-NEXT:    [[TMP21:%.*]] = icmp ne i32 [[TMP20]], 0
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP21]])
; CHECK-NEXT:    [[TMP23:%.*]] = icmp eq i32 [[TMP20]], 3
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP23]])
; CHECK-NEXT:    [[TMP25:%.*]] = icmp ne i32 [[TMP24]], 0
; CHECK-NEXT:    [[TMP26:%.*]] = select i1 [[TMP25]], i32 [[TMP24]], i32 [[TMP22]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp eq i32 [[TMP20]], 2
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP27]])
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ne i32 [[TMP28]], 0
; CHECK-NEXT:    [[TMP30:%.*]] = select i1 [[TMP29]], i32 [[TMP28]], i32 [[TMP26]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp eq i32 [[TMP20]], 1
; CHECK-NEXT:    [[TMP32:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP31]])
; CHECK-NEXT:    [[TMP33:%.*]] = icmp ne i32 [[TMP32]], 0
; CHECK-NEXT:    [[TMP34:%.*]] = select i1 [[TMP33]], i32 [[TMP32]], i32 [[TMP30]]
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @llvm.cttz.i32(i32 [[TMP34]], i1 true)
; CHECK-NEXT:    [[TMP39:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 [[TMP18]], i32 [[TMP35]])
; CHECK-NEXT:    [[TMP37:%.*]] = icmp eq i32 [[TMP18]], [[TMP39]]
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.ballot.i32(i1 [[TMP37]])
; CHECK-NEXT:    [[TMP41:%.*]] = icmp eq i32 [[TMP39]], 0
; CHECK-NEXT:    br i1 [[TMP41]], label [[RET_BLOCK:%.*]], label [[CHAIN_BLOCK:%.*]]
; CHECK:       chain.block:
; CHECK-NEXT:    [[TMP42:%.*]] = and i32 [[TMP39]], -64
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <2 x i32> [[TMP6]], i32 [[TMP42]], i64 0
; CHECK-NEXT:    [[TMP44:%.*]] = bitcast <2 x i32> [[TMP43]] to i64
; CHECK-NEXT:    [[TMP45:%.*]] = inttoptr i64 [[TMP44]] to ptr
; CHECK-NEXT:    [[TMP46:%.*]] = and i32 [[TMP39]], 56
; CHECK-NEXT:    [[TMP47:%.*]] = shl i32 [[TMP46]], 1
; CHECK-NEXT:    [[TMP48:%.*]] = add i32 [[TMP47]], 16
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.umax.i32(i32 [[TMP48]], i32 [[MAXOUTGOINGVGPRCOUNT]])
; CHECK-NEXT:    [[TMP50:%.*]] = ptrtoint ptr addrspace(4) [[NUMWORKGROUPSPTR]] to i64
; CHECK-NEXT:    [[TMP51:%.*]] = bitcast i64 [[TMP50]] to <2 x i32>
; CHECK-NEXT:    [[TMP52:%.*]] = extractelement <2 x i32> [[TMP51]], i64 0
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <2 x i32> [[TMP51]], i64 1
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <20 x i32> poison, i32 [[GLOBALTABLE]], i64 0
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <20 x i32> [[TMP54]], i32 [[TMP52]], i64 1
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <20 x i32> [[TMP55]], i32 [[TMP53]], i64 2
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <20 x i32> [[TMP56]], i32 [[PAD0]], i64 3
; CHECK-NEXT:    [[TMP58:%.*]] = insertelement <20 x i32> [[TMP57]], i32 [[PAD1]], i64 4
; CHECK-NEXT:    [[TMP59:%.*]] = insertelement <20 x i32> [[TMP58]], i32 [[PAD2]], i64 5
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <20 x i32> [[TMP59]], i32 [[PAD3]], i64 6
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <20 x i32> [[TMP60]], i32 [[PAD4]], i64 7
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <20 x i32> [[TMP61]], i32 [[PAD5]], i64 8
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <20 x i32> [[TMP62]], i32 [[PAD6]], i64 9
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <20 x i32> [[TMP63]], i32 [[PAD7]], i64 10
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <20 x i32> [[TMP64]], i32 [[PAD8]], i64 11
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <20 x i32> [[TMP65]], i32 [[PAD9]], i64 12
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <20 x i32> [[TMP66]], i32 [[PAD10]], i64 13
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <20 x i32> [[TMP67]], i32 [[PAD11]], i64 14
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <20 x i32> [[TMP68]], i32 [[SPILLTABLE]], i64 15
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <20 x i32> [[TMP69]], i32 [[MAXOUTGOINGVGPRCOUNT]], i64 16
; CHECK-NEXT:    [[TMP71:%.*]] = insertelement <20 x i32> [[TMP70]], i32 [[TMP42]], i64 17
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <20 x i32> [[TMP71]], i32 [[TMP38]], i64 18
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <20 x i32> [[TMP72]], i32 [[TMP49]], i64 19
; CHECK-NEXT:    call void (ptr, i32, <20 x i32>, { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }, i32, ...) @llvm.amdgcn.cs.chain.p0.i32.v20i32.sl_i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32i32s(ptr inreg [[TMP45]], i32 inreg [[TMP38]], <20 x i32> inreg [[TMP73]], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } [[TMP79]], i32 1, i32 [[TMP49]], i32 -1, ptr @retry_vgpr_alloc.v20i32)
; CHECK-NEXT:    unreachable
; CHECK:       ret.block:
; CHECK-NEXT:    ret void
;
entry:
  %cond = icmp ult i32 %arg, 3
  br i1 %cond, label %then, label %else

then:                                             ; preds = %entry
  %table.0 = getelementptr i32, ptr %table, i32 0
  %cr.then = load i32, ptr %table.0, align 4
  %then.arg = add i32 %arg, 1
  call void (...) @lgc.cps.jump(i32 %cr.then, i32 2, i32 poison, i32 poison, i32 poison, i32 %then.arg)
  unreachable

else:                                             ; preds = %entry
  ret void
}

; CHECK: !amdgpu.pal.metadata.msgpack = !{[[PAL_MD:![0-9]+]]}
; CHECK: [[PAL_MD]] = {{.*}}unify_jump_ret{{.*}}outgoing_vgpr_count\0D\{{.*}}unify_jumps{{.*}}outgoing_vgpr_count\0E\

attributes #0 = { noreturn }

!continuation.stackAddrspace = !{!0}
!lgc.cps.maxArgumentVgprs = !{!3}

!0 = !{i32 5}
!1 = !{i32 1}
!2 = !{i32 7}
!3 = !{i32 32}
;.
; CHECK: [[META4]] = !{i32 1}
; CHECK: [[META5]] = !{i32 7}
