
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes="require<lgc-pipeline-state>,function(lgc-lower-buffer-operations)" %s | FileCheck --check-prefixes=CHECK %s

define dllexport spir_func void @lgc.shader.CS.main(<4 x i32> inreg %desc0,<4 x i32> inreg %desc1,<4 x i32> inreg %desc2, i32 %number) local_unnamed_addr #0 {
; CHECK-LABEL: @lgc.shader.CS.main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = icmp eq i32 [[NUMBER:%.*]], 2
; CHECK-NEXT:    br i1 [[TMP0]], label [[BRANCH_TRUE:%.*]], label [[BRANCH1:%.*]]
; CHECK:       branch1:
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[NUMBER]], 3
; CHECK-NEXT:    br i1 [[TMP1]], label [[BRANCH_TRUE]], label [[BRANCH2:%.*]]
; CHECK:       branch2:
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i32 [[NUMBER]], 4
; CHECK-NEXT:    br i1 [[TMP2]], label [[BRANCH_TRUE]], label [[BRANCH_MERGE:%.*]]
; CHECK:       branch_true:
; CHECK-NEXT:    [[DOTLCSSA8772_0:%.*]] = phi <4 x i32> [ [[DESC0:%.*]], [[DOTENTRY:%.*]] ], [ [[DESC1:%.*]], [[BRANCH1]] ], [ [[DESC2:%.*]], [[BRANCH2]] ]
; CHECK-NEXT:    br label [[BRANCH_MERGE]]
; CHECK:       branch_merge:
; CHECK-NEXT:    ret void
;
.entry:
  %0 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc0, i1 false)
  %1 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc1, i1 false)
  %2 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc2, i1 false)
  %3 = icmp eq i32 %number, 2
  br i1 %3, label %branch_true, label %branch1

branch1:
  %4 = icmp eq i32 %number, 3
  %5 = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) %0)
  br i1 %4, label %branch_true, label %branch2

branch2:
  %6 = icmp eq i32 %number, 4
  br i1 %6, label %branch_true, label %branch_merge

branch_true:
  %.lcssa8772 = phi ptr addrspace(7) [ %0, %.entry ], [ %1, %branch1 ], [ %2, %branch2 ]
  %7 = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) %.lcssa8772)
  br label %branch_merge

branch_merge:
  ret void
}

; Function Attrs: nounwind memory(none)
declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>, i1) nounwind readnone
declare ptr @llvm.invariant.start.p7(i64 immarg, ptr addrspace(7) nocapture) #2

attributes #0 = { nounwind }
!0 = !{i32 7}
