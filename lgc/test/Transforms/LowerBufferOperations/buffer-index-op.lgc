; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RUN: lgc --mcpu=gfx1100 -o - -passes='require<lgc-pipeline-state>,function(lgc-structurize-buffers)' -force-structured-buffers %s | FileCheck --check-prefixes=STRUCT %s
; RUN: lgc --mcpu=gfx1100 -o - -passes='require<lgc-pipeline-state>,function(lgc-structurize-buffers)' %s | FileCheck --check-prefixes=NOSTRUCT %s

define [12 x i32] @strided_buffer_mark_const_zero_idx(ptr addrspace(7) %buf) {
; STRUCT-LABEL: define [12 x i32] @strided_buffer_mark_const_zero_idx
; STRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]]) {
; STRUCT-NEXT:  entry:
; STRUCT-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 0
; STRUCT-NEXT:    [[RES:%.*]] = load [12 x i32], ptr addrspace(7) [[TMP0]], align 4
; STRUCT-NEXT:    ret [12 x i32] [[RES]]
;
; NOSTRUCT-LABEL: define [12 x i32] @strided_buffer_mark_const_zero_idx
; NOSTRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]]) {
; NOSTRUCT-NEXT:  entry:
; NOSTRUCT-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 0
; NOSTRUCT-NEXT:    [[RES:%.*]] = load [12 x i32], ptr addrspace(7) [[TMP0]], align 4
; NOSTRUCT-NEXT:    ret [12 x i32] [[RES]]
;
entry:
  %elem = call ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7) %buf, i32 48, i32 0) #0
  %res = load [12 x i32], ptr addrspace(7) %elem, align 4
  ret [12 x i32] %res
}

define [12 x i32] @strided_buffer_mark_const_nonzero_idx(ptr addrspace(7) %buf) {
; STRUCT-LABEL: define [12 x i32] @strided_buffer_mark_const_nonzero_idx
; STRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]]) {
; STRUCT-NEXT:  entry:
; STRUCT-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 576
; STRUCT-NEXT:    [[RES:%.*]] = load [12 x i32], ptr addrspace(7) [[TMP0]], align 4
; STRUCT-NEXT:    ret [12 x i32] [[RES]]
;
; NOSTRUCT-LABEL: define [12 x i32] @strided_buffer_mark_const_nonzero_idx
; NOSTRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]]) {
; NOSTRUCT-NEXT:  entry:
; NOSTRUCT-NEXT:    [[TMP0:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 576
; NOSTRUCT-NEXT:    [[RES:%.*]] = load [12 x i32], ptr addrspace(7) [[TMP0]], align 4
; NOSTRUCT-NEXT:    ret [12 x i32] [[RES]]
;
entry:
  %elem = call ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7) %buf, i32 48, i32 12) #0
  %res = load [12 x i32], ptr addrspace(7) %elem, align 4
  ret [12 x i32] %res
}

define [12 x i32] @strided_buffer_mark_nonconst_idx(ptr addrspace(7) %buf, i32 %idx) {
; STRUCT-LABEL: define [12 x i32] @strided_buffer_mark_nonconst_idx
; STRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]], i32 [[IDX:%.*]]) {
; STRUCT-NEXT:  entry:
; STRUCT-NEXT:    [[TMP0:%.*]] = call ptr addrspace(9) @lgc.convert.to.strided.buffer.pointer(ptr addrspace(7) [[BUF]], i32 48)
; STRUCT-NEXT:    [[TMP1:%.*]] = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) [[TMP0]], i32 [[IDX]])
; STRUCT-NEXT:    [[RES:%.*]] = load [12 x i32], ptr addrspace(9) [[TMP1]], align 4
; STRUCT-NEXT:    ret [12 x i32] [[RES]]
;
; NOSTRUCT-LABEL: define [12 x i32] @strided_buffer_mark_nonconst_idx
; NOSTRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]], i32 [[IDX:%.*]]) {
; NOSTRUCT-NEXT:  entry:
; NOSTRUCT-NEXT:    [[TMP0:%.*]] = mul i32 [[IDX]], 48
; NOSTRUCT-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 [[TMP0]]
; NOSTRUCT-NEXT:    [[RES:%.*]] = load [12 x i32], ptr addrspace(7) [[TMP1]], align 4
; NOSTRUCT-NEXT:    ret [12 x i32] [[RES]]
;
entry:
  %elem = call ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7) %buf, i32 48, i32 %idx) #0
  %res = load [12 x i32], ptr addrspace(7) %elem, align 4
  ret [12 x i32] %res
}

define i32 @strided_buffer_mark_small_stride(ptr addrspace(7) %buf, i32 %idx) {
; STRUCT-LABEL: define i32 @strided_buffer_mark_small_stride
; STRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]], i32 [[IDX:%.*]]) {
; STRUCT-NEXT:  entry:
; STRUCT-NEXT:    [[TMP0:%.*]] = mul i32 [[IDX]], 4
; STRUCT-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 [[TMP0]]
; STRUCT-NEXT:    [[RES:%.*]] = load i32, ptr addrspace(7) [[TMP1]], align 4
; STRUCT-NEXT:    ret i32 [[RES]]
;
; NOSTRUCT-LABEL: define i32 @strided_buffer_mark_small_stride
; NOSTRUCT-SAME: (ptr addrspace(7) [[BUF:%.*]], i32 [[IDX:%.*]]) {
; NOSTRUCT-NEXT:  entry:
; NOSTRUCT-NEXT:    [[TMP0:%.*]] = mul i32 [[IDX]], 4
; NOSTRUCT-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr addrspace(7) [[BUF]], i32 [[TMP0]]
; NOSTRUCT-NEXT:    [[RES:%.*]] = load i32, ptr addrspace(7) [[TMP1]], align 4
; NOSTRUCT-NEXT:    ret i32 [[RES]]
;
entry:
  %elem = call ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7) %buf, i32 4, i32 %idx) #0
  %res = load i32, ptr addrspace(7) %elem, align 4
  ret i32 %res
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7), i32, i32) local_unnamed_addr #0

attributes #0 = { nounwind willreturn memory(none) }
