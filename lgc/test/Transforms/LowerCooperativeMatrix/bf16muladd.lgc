; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
; RUN: lgc -o - --mcpu=gfx1100 -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define <8 x i32> @muladd_bf16_bf16(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: define <8 x i32> @muladd_bf16_bf16(
; CHECK-SAME: <8 x i32> [[A:%.*]], <8 x i32> [[B:%.*]], <8 x i32> [[C:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[A]] to <16 x i16>
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[B]] to <16 x i16>
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <8 x i32> [[C]] to <16 x i16>
; CHECK-NEXT:    [[VALUE1:%.*]] = call <16 x i16> @llvm.amdgcn.wmma.bf16.16x16x16.bf16.v16i16.v16i16(<16 x i16> [[TMP1]], <16 x i16> [[TMP2]], <16 x i16> [[TMP3]], i1 false)
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <16 x i16> [[VALUE1]] to <8 x i32>
; CHECK-NEXT:    ret <8 x i32> [[TMP4]]
;
  %value = call <8 x i32> (...) @lgc.cooperative.matrix.muladd__v8i32(<8 x i32> %a, <8 x i32> %b, <8 x i32> %c, i1 false, i1 false, i1 false, i1 false, i32 7, i32 7)
  ret <8 x i32> %value
}

define <8 x float> @muladd_bf16_f32(<8 x i32> %a, <8 x i32> %b, <8 x float> %c) {
; CHECK-LABEL: define <8 x float> @muladd_bf16_f32(
; CHECK-SAME: <8 x i32> [[A:%.*]], <8 x i32> [[B:%.*]], <8 x float> [[C:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <8 x i32> [[A]] to <16 x i16>
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x i32> [[B]] to <16 x i16>
; CHECK-NEXT:    [[VALUE1:%.*]] = call <8 x float> @llvm.amdgcn.wmma.f32.16x16x16.bf16.v8f32.v16i16(<16 x i16> [[TMP1]], <16 x i16> [[TMP2]], <8 x float> [[C]])
; CHECK-NEXT:    ret <8 x float> [[VALUE1]]
;
  %value = call <8 x float> (...) @lgc.cooperative.matrix.muladd__v8f32(<8 x i32> %a, <8 x i32> %b, <8 x float> %c, i1 false, i1 false, i1 false, i1 false, i32 2, i32 7)
  ret <8 x float> %value
}

declare <8 x i32> @lgc.cooperative.matrix.muladd__v8i32(...)
declare <8 x float> @lgc.cooperative.matrix.muladd__v8f32(...)
