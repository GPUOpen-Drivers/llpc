; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define <8 x float> @test_relayout_simple(<8 x float> %ab) {
; CHECK-LABEL: @test_relayout_simple(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = and i32 [[TMP3]], 1
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x float> [[AB:%.*]] to <8 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <8 x float> [[AB]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <8 x float> [[AB]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = and i32 [[TMP3]], 2
; CHECK-NEXT:    [[TMP10:%.*]] = icmp eq i32 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], float [[TMP7]], float [[TMP8]]
; CHECK-NEXT:    [[B1:%.*]] = insertelement <4 x float> poison, float [[TMP11]], i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <8 x float> [[AB]], i64 2
; CHECK-NEXT:    [[TMP13:%.*]] = extractelement <8 x float> [[AB]], i64 3
; CHECK-NEXT:    [[TMP14:%.*]] = and i32 [[TMP3]], 2
; CHECK-NEXT:    [[TMP15:%.*]] = icmp eq i32 [[TMP14]], 0
; CHECK-NEXT:    [[TMP16:%.*]] = select i1 [[TMP15]], float [[TMP12]], float [[TMP13]]
; CHECK-NEXT:    [[B2:%.*]] = insertelement <4 x float> [[B1]], float [[TMP16]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <8 x float> [[AB]], i64 4
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <8 x float> [[AB]], i64 5
; CHECK-NEXT:    [[TMP19:%.*]] = and i32 [[TMP3]], 2
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq i32 [[TMP19]], 0
; CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], float [[TMP17]], float [[TMP18]]
; CHECK-NEXT:    [[B3:%.*]] = insertelement <4 x float> [[B2]], float [[TMP21]], i64 2
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <8 x float> [[AB]], i64 6
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <8 x float> [[AB]], i64 7
; CHECK-NEXT:    [[TMP24:%.*]] = and i32 [[TMP3]], 2
; CHECK-NEXT:    [[TMP25:%.*]] = icmp eq i32 [[TMP24]], 0
; CHECK-NEXT:    [[TMP26:%.*]] = select i1 [[TMP25]], float [[TMP22]], float [[TMP23]]
; CHECK-NEXT:    [[B4:%.*]] = insertelement <4 x float> [[B3]], float [[TMP26]], i64 3
; CHECK-NEXT:    [[TMP27:%.*]] = bitcast <4 x float> [[B4]] to <4 x i32>
; CHECK-NEXT:    [[TMP28:%.*]] = select i1 [[TMP5]], <4 x i32> zeroinitializer, <4 x i32> <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[B5:%.*]] = lshr <4 x i32> [[TMP27]], [[TMP28]]
; CHECK-NEXT:    [[B6:%.*]] = bitcast <4 x i32> [[B5]] to <4 x float>
; CHECK-NEXT:    [[TMP29:%.*]] = shufflevector <4 x float> [[B6]], <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP30]])
; CHECK-NEXT:    [[TMP32:%.*]] = bitcast <8 x float> [[TMP29]] to <8 x i32>
; CHECK-NEXT:    [[TMP33:%.*]] = udiv i32 [[TMP31]], 16
; CHECK-NEXT:    [[TMP34:%.*]] = and i32 [[TMP33]], 1
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i32 [[TMP34]], 0
; CHECK-NEXT:    [[TMP36:%.*]] = shufflevector <8 x i32> [[TMP32]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP37:%.*]] = extractelement <8 x i32> [[TMP36]], i64 0
; CHECK-NEXT:    [[TMP38:%.*]] = extractelement <8 x i32> [[TMP36]], i64 0
; CHECK-NEXT:    [[TMP39:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP37]], i32 [[TMP38]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP40:%.*]] = extractelement <8 x i32> [[TMP36]], i64 1
; CHECK-NEXT:    [[TMP41:%.*]] = extractelement <8 x i32> [[TMP36]], i64 1
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP40]], i32 [[TMP41]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP43:%.*]] = extractelement <8 x i32> [[TMP36]], i64 2
; CHECK-NEXT:    [[TMP44:%.*]] = extractelement <8 x i32> [[TMP36]], i64 2
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP43]], i32 [[TMP44]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP46:%.*]] = extractelement <8 x i32> [[TMP36]], i64 3
; CHECK-NEXT:    [[TMP47:%.*]] = extractelement <8 x i32> [[TMP36]], i64 3
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP46]], i32 [[TMP47]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP49:%.*]] = extractelement <8 x i32> [[TMP36]], i64 4
; CHECK-NEXT:    [[TMP50:%.*]] = extractelement <8 x i32> [[TMP36]], i64 4
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP49]], i32 [[TMP50]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP52:%.*]] = extractelement <8 x i32> [[TMP36]], i64 5
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <8 x i32> [[TMP36]], i64 5
; CHECK-NEXT:    [[TMP54:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP52]], i32 [[TMP53]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP55:%.*]] = extractelement <8 x i32> [[TMP36]], i64 6
; CHECK-NEXT:    [[TMP56:%.*]] = extractelement <8 x i32> [[TMP36]], i64 6
; CHECK-NEXT:    [[TMP57:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP55]], i32 [[TMP56]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP58:%.*]] = extractelement <8 x i32> [[TMP36]], i64 7
; CHECK-NEXT:    [[TMP59:%.*]] = extractelement <8 x i32> [[TMP36]], i64 7
; CHECK-NEXT:    [[TMP60:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP58]], i32 [[TMP59]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <8 x i32> poison, i32 [[TMP39]], i64 0
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <8 x i32> [[TMP61]], i32 [[TMP42]], i64 1
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <8 x i32> [[TMP62]], i32 [[TMP45]], i64 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <8 x i32> [[TMP63]], i32 [[TMP48]], i64 3
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <8 x i32> [[TMP64]], i32 [[TMP51]], i64 4
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <8 x i32> [[TMP65]], i32 [[TMP54]], i64 5
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <8 x i32> [[TMP66]], i32 [[TMP57]], i64 6
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <8 x i32> [[TMP67]], i32 [[TMP60]], i64 7
; CHECK-NEXT:    [[TMP69:%.*]] = select i1 [[TMP35]], <8 x i32> [[TMP36]], <8 x i32> [[TMP68]]
; CHECK-NEXT:    [[TMP70:%.*]] = select i1 [[TMP35]], <8 x i32> [[TMP68]], <8 x i32> [[TMP36]]
; CHECK-NEXT:    [[TMP71:%.*]] = and <8 x i32> [[TMP69]], <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
; CHECK-NEXT:    [[TMP72:%.*]] = shl <8 x i32> [[TMP70]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP73:%.*]] = or <8 x i32> [[TMP71]], [[TMP72]]
; CHECK-NEXT:    [[TMP74:%.*]] = extractelement <8 x i32> [[TMP73]], i64 0
; CHECK-NEXT:    [[TMP75:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP74]])
; CHECK-NEXT:    [[TMP76:%.*]] = extractelement <8 x i32> [[TMP73]], i64 1
; CHECK-NEXT:    [[TMP77:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP76]])
; CHECK-NEXT:    [[TMP78:%.*]] = extractelement <8 x i32> [[TMP73]], i64 2
; CHECK-NEXT:    [[TMP79:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP78]])
; CHECK-NEXT:    [[TMP80:%.*]] = extractelement <8 x i32> [[TMP73]], i64 3
; CHECK-NEXT:    [[TMP81:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP80]])
; CHECK-NEXT:    [[TMP82:%.*]] = extractelement <8 x i32> [[TMP73]], i64 4
; CHECK-NEXT:    [[TMP83:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP82]])
; CHECK-NEXT:    [[TMP84:%.*]] = extractelement <8 x i32> [[TMP73]], i64 5
; CHECK-NEXT:    [[TMP85:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP84]])
; CHECK-NEXT:    [[TMP86:%.*]] = extractelement <8 x i32> [[TMP73]], i64 6
; CHECK-NEXT:    [[TMP87:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP86]])
; CHECK-NEXT:    [[TMP88:%.*]] = extractelement <8 x i32> [[TMP73]], i64 7
; CHECK-NEXT:    [[TMP89:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP88]])
; CHECK-NEXT:    [[TMP90:%.*]] = insertelement <8 x i32> poison, i32 [[TMP75]], i64 0
; CHECK-NEXT:    [[TMP91:%.*]] = insertelement <8 x i32> [[TMP90]], i32 [[TMP77]], i64 1
; CHECK-NEXT:    [[TMP92:%.*]] = insertelement <8 x i32> [[TMP91]], i32 [[TMP79]], i64 2
; CHECK-NEXT:    [[TMP93:%.*]] = insertelement <8 x i32> [[TMP92]], i32 [[TMP81]], i64 3
; CHECK-NEXT:    [[TMP94:%.*]] = insertelement <8 x i32> [[TMP93]], i32 [[TMP83]], i64 4
; CHECK-NEXT:    [[TMP95:%.*]] = insertelement <8 x i32> [[TMP94]], i32 [[TMP85]], i64 5
; CHECK-NEXT:    [[TMP96:%.*]] = insertelement <8 x i32> [[TMP95]], i32 [[TMP87]], i64 6
; CHECK-NEXT:    [[TMP97:%.*]] = insertelement <8 x i32> [[TMP96]], i32 [[TMP89]], i64 7
; CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i32 [[TMP31]], 32
; CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], <8 x i32> [[TMP73]], <8 x i32> [[TMP97]]
; CHECK-NEXT:    [[TMP100:%.*]] = select i1 [[TMP98]], <8 x i32> [[TMP97]], <8 x i32> [[TMP73]]
; CHECK-NEXT:    [[C7:%.*]] = shufflevector <8 x i32> [[TMP99]], <8 x i32> [[TMP100]], <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
; CHECK-NEXT:    [[TMP101:%.*]] = bitcast <8 x i32> [[C7]] to <8 x float>
; CHECK-NEXT:    ret <8 x float> [[TMP101]]
;
  %b = call <8 x float> @lgc.cooperative.matrix.convert.v8f32.i32.v8f32.i32.i32.i32.i32(i32 0, <8 x float> %ab, i32 1, i32 1, i32 0, i32 1)
  %c = call <8 x float> @lgc.cooperative.matrix.convert.v8f32.i32.v8f32.i32.i32.i32.i32(i32 0, <8 x float> %b, i32 1, i32 1, i32 1, i32 0)
  ret <8 x float> %c
}

define <8 x float> @test_relayout_simple_reverse(<8 x float> %cd) {
; CHECK-LABEL: @test_relayout_simple_reverse(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <8 x float> [[CD:%.*]] to <8 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = and i32 [[TMP4]], 1
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq i32 [[TMP5]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <8 x i32> [[TMP3]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <8 x i32> [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <8 x i32> [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP8]], i32 [[TMP9]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <8 x i32> [[TMP7]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <8 x i32> [[TMP7]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP11]], i32 [[TMP12]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <8 x i32> [[TMP7]], i64 2
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <8 x i32> [[TMP7]], i64 2
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP14]], i32 [[TMP15]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <8 x i32> [[TMP7]], i64 3
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <8 x i32> [[TMP7]], i64 3
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP17]], i32 [[TMP18]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <8 x i32> [[TMP7]], i64 4
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <8 x i32> [[TMP7]], i64 4
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP20]], i32 [[TMP21]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <8 x i32> [[TMP7]], i64 5
; CHECK-NEXT:    [[TMP24:%.*]] = extractelement <8 x i32> [[TMP7]], i64 5
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP23]], i32 [[TMP24]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <8 x i32> [[TMP7]], i64 6
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <8 x i32> [[TMP7]], i64 6
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP26]], i32 [[TMP27]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP29:%.*]] = extractelement <8 x i32> [[TMP7]], i64 7
; CHECK-NEXT:    [[TMP30:%.*]] = extractelement <8 x i32> [[TMP7]], i64 7
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP29]], i32 [[TMP30]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <8 x i32> poison, i32 [[TMP10]], i64 0
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <8 x i32> [[TMP32]], i32 [[TMP13]], i64 1
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <8 x i32> [[TMP33]], i32 [[TMP16]], i64 2
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <8 x i32> [[TMP34]], i32 [[TMP19]], i64 3
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <8 x i32> [[TMP35]], i32 [[TMP22]], i64 4
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <8 x i32> [[TMP36]], i32 [[TMP25]], i64 5
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <8 x i32> [[TMP37]], i32 [[TMP28]], i64 6
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <8 x i32> [[TMP38]], i32 [[TMP31]], i64 7
; CHECK-NEXT:    [[TMP40:%.*]] = select i1 [[TMP6]], <8 x i32> [[TMP7]], <8 x i32> [[TMP39]]
; CHECK-NEXT:    [[TMP41:%.*]] = select i1 [[TMP6]], <8 x i32> [[TMP39]], <8 x i32> [[TMP7]]
; CHECK-NEXT:    [[TMP42:%.*]] = and <8 x i32> [[TMP40]], <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
; CHECK-NEXT:    [[TMP43:%.*]] = shl <8 x i32> [[TMP41]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP44:%.*]] = or <8 x i32> [[TMP42]], [[TMP43]]
; CHECK-NEXT:    [[TMP45:%.*]] = extractelement <8 x i32> [[TMP44]], i64 0
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP45]])
; CHECK-NEXT:    [[TMP47:%.*]] = extractelement <8 x i32> [[TMP44]], i64 1
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP47]])
; CHECK-NEXT:    [[TMP49:%.*]] = extractelement <8 x i32> [[TMP44]], i64 2
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP49]])
; CHECK-NEXT:    [[TMP51:%.*]] = extractelement <8 x i32> [[TMP44]], i64 3
; CHECK-NEXT:    [[TMP52:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP51]])
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <8 x i32> [[TMP44]], i64 4
; CHECK-NEXT:    [[TMP54:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP53]])
; CHECK-NEXT:    [[TMP55:%.*]] = extractelement <8 x i32> [[TMP44]], i64 5
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP55]])
; CHECK-NEXT:    [[TMP57:%.*]] = extractelement <8 x i32> [[TMP44]], i64 6
; CHECK-NEXT:    [[TMP58:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP57]])
; CHECK-NEXT:    [[TMP59:%.*]] = extractelement <8 x i32> [[TMP44]], i64 7
; CHECK-NEXT:    [[TMP60:%.*]] = call i32 @llvm.amdgcn.permlane64(i32 [[TMP59]])
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <8 x i32> poison, i32 [[TMP46]], i64 0
; CHECK-NEXT:    [[TMP62:%.*]] = insertelement <8 x i32> [[TMP61]], i32 [[TMP48]], i64 1
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <8 x i32> [[TMP62]], i32 [[TMP50]], i64 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <8 x i32> [[TMP63]], i32 [[TMP52]], i64 3
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <8 x i32> [[TMP64]], i32 [[TMP54]], i64 4
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <8 x i32> [[TMP65]], i32 [[TMP56]], i64 5
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <8 x i32> [[TMP66]], i32 [[TMP58]], i64 6
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <8 x i32> [[TMP67]], i32 [[TMP60]], i64 7
; CHECK-NEXT:    [[TMP69:%.*]] = icmp ult i32 [[TMP2]], 32
; CHECK-NEXT:    [[TMP70:%.*]] = select i1 [[TMP69]], <8 x i32> [[TMP44]], <8 x i32> [[TMP68]]
; CHECK-NEXT:    [[TMP71:%.*]] = select i1 [[TMP69]], <8 x i32> [[TMP68]], <8 x i32> [[TMP44]]
; CHECK-NEXT:    [[B1:%.*]] = shufflevector <8 x i32> [[TMP70]], <8 x i32> [[TMP71]], <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
; CHECK-NEXT:    [[TMP72:%.*]] = bitcast <8 x i32> [[B1]] to <8 x float>
; CHECK-NEXT:    [[TMP73:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP74:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP73]])
; CHECK-NEXT:    [[TMP75:%.*]] = udiv i32 [[TMP74]], 16
; CHECK-NEXT:    [[TMP76:%.*]] = and i32 [[TMP75]], 1
; CHECK-NEXT:    [[TMP77:%.*]] = icmp eq i32 [[TMP76]], 0
; CHECK-NEXT:    [[TMP78:%.*]] = bitcast <8 x float> [[TMP72]] to <8 x i32>
; CHECK-NEXT:    [[TMP79:%.*]] = extractelement <8 x float> [[TMP72]], i64 0
; CHECK-NEXT:    [[TMP80:%.*]] = extractelement <8 x float> [[TMP72]], i64 1
; CHECK-NEXT:    [[TMP81:%.*]] = and i32 [[TMP75]], 2
; CHECK-NEXT:    [[TMP82:%.*]] = icmp eq i32 [[TMP81]], 0
; CHECK-NEXT:    [[TMP83:%.*]] = select i1 [[TMP82]], float [[TMP79]], float [[TMP80]]
; CHECK-NEXT:    [[C2:%.*]] = insertelement <4 x float> poison, float [[TMP83]], i64 0
; CHECK-NEXT:    [[TMP84:%.*]] = extractelement <8 x float> [[TMP72]], i64 2
; CHECK-NEXT:    [[TMP85:%.*]] = extractelement <8 x float> [[TMP72]], i64 3
; CHECK-NEXT:    [[TMP86:%.*]] = and i32 [[TMP75]], 2
; CHECK-NEXT:    [[TMP87:%.*]] = icmp eq i32 [[TMP86]], 0
; CHECK-NEXT:    [[TMP88:%.*]] = select i1 [[TMP87]], float [[TMP84]], float [[TMP85]]
; CHECK-NEXT:    [[C3:%.*]] = insertelement <4 x float> [[C2]], float [[TMP88]], i64 1
; CHECK-NEXT:    [[TMP89:%.*]] = extractelement <8 x float> [[TMP72]], i64 4
; CHECK-NEXT:    [[TMP90:%.*]] = extractelement <8 x float> [[TMP72]], i64 5
; CHECK-NEXT:    [[TMP91:%.*]] = and i32 [[TMP75]], 2
; CHECK-NEXT:    [[TMP92:%.*]] = icmp eq i32 [[TMP91]], 0
; CHECK-NEXT:    [[TMP93:%.*]] = select i1 [[TMP92]], float [[TMP89]], float [[TMP90]]
; CHECK-NEXT:    [[C4:%.*]] = insertelement <4 x float> [[C3]], float [[TMP93]], i64 2
; CHECK-NEXT:    [[TMP94:%.*]] = extractelement <8 x float> [[TMP72]], i64 6
; CHECK-NEXT:    [[TMP95:%.*]] = extractelement <8 x float> [[TMP72]], i64 7
; CHECK-NEXT:    [[TMP96:%.*]] = and i32 [[TMP75]], 2
; CHECK-NEXT:    [[TMP97:%.*]] = icmp eq i32 [[TMP96]], 0
; CHECK-NEXT:    [[TMP98:%.*]] = select i1 [[TMP97]], float [[TMP94]], float [[TMP95]]
; CHECK-NEXT:    [[C5:%.*]] = insertelement <4 x float> [[C4]], float [[TMP98]], i64 3
; CHECK-NEXT:    [[TMP99:%.*]] = bitcast <4 x float> [[C5]] to <4 x i32>
; CHECK-NEXT:    [[TMP100:%.*]] = select i1 [[TMP77]], <4 x i32> zeroinitializer, <4 x i32> <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[C6:%.*]] = lshr <4 x i32> [[TMP99]], [[TMP100]]
; CHECK-NEXT:    [[C7:%.*]] = bitcast <4 x i32> [[C6]] to <4 x float>
; CHECK-NEXT:    [[TMP101:%.*]] = shufflevector <4 x float> [[C7]], <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    ret <8 x float> [[TMP101]]
;
  %b = call <8 x float> @lgc.cooperative.matrix.convert.v8f32.i32.v8f32.i32.i32.i32.i32(i32 0, <8 x float> %cd, i32 1, i32 1, i32 1, i32 0)
  %c = call <8 x float> @lgc.cooperative.matrix.convert.v8f32.i32.v8f32.i32.i32.i32.i32(i32 0, <8 x float> %b, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %c
}

declare i1 @getcc()
declare <8 x float> @process1(<8 x float>)

declare <8 x float> @lgc.cooperative.matrix.load.v8f32.p3.i32.i1.i32.i32.i32(ptr addrspace(3), i32, i1, i32, i32, i32)
declare <8 x float> @lgc.cooperative.matrix.transpose.v8f32.v8f32.i32.i32(<8 x float>, i32, i32)
declare <8 x float> @lgc.cooperative.matrix.convert.v8f32.i32.v8f32.i32.i32.i32.i32(i32, <8 x float>, i32, i32, i32, i32)
declare void @lgc.cooperative.matrix.store.p3.i32.i1.i32.i32.i32.v8f32(ptr addrspace(3), i32, i1, i32, i32, i32, <8 x float>)
declare void @lgc.cooperative.matrix.store.p7.i32.i1.i32.i32.i32.v8f32(ptr addrspace(7), i32, i1, i32, i32, i32, <8 x float>)
