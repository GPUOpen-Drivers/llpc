; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define <8 x float> @convert_f16_to_accumulator(<8 x float> %fact) {
; CHECK-LABEL: @convert_f16_to_accumulator(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = udiv i32 [[TMP1]], 16
; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x float> [[FACT:%.*]] to <8 x i32>
; CHECK-NEXT:    [[TMP6:%.*]] = select i1 [[TMP4]], <8 x i32> zeroinitializer, <8 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[RESHAPE16BIT:%.*]] = lshr <8 x i32> [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[RESHAPE16BIT1:%.*]] = bitcast <8 x i32> [[RESHAPE16BIT]] to <8 x float>
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <8 x float> [[RESHAPE16BIT1]], <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    ret <8 x float> [[TMP7]]
;
  %accum = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %fact, i32 1, i32 1, i32 0, i32 1)
  ret <8 x float> %accum
}

define <8 x float> @convert_f16_to_factor(<8 x float> %accum) {
; CHECK-LABEL: @convert_f16_to_factor(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast <8 x float> [[ACCUM:%.*]] to <8 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = udiv i32 [[TMP1]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = and i32 [[TMP3]], 1
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    [[TMP6:%.*]] = shufflevector <8 x i32> [[TMP2]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <8 x i32> [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <8 x i32> [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP7]], i32 [[TMP8]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP10:%.*]] = extractelement <8 x i32> [[TMP6]], i64 1
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <8 x i32> [[TMP6]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP10]], i32 [[TMP11]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP13:%.*]] = extractelement <8 x i32> [[TMP6]], i64 2
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <8 x i32> [[TMP6]], i64 2
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP13]], i32 [[TMP14]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <8 x i32> [[TMP6]], i64 3
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <8 x i32> [[TMP6]], i64 3
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP16]], i32 [[TMP17]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <8 x i32> [[TMP6]], i64 4
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <8 x i32> [[TMP6]], i64 4
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP19]], i32 [[TMP20]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <8 x i32> [[TMP6]], i64 5
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <8 x i32> [[TMP6]], i64 5
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP22]], i32 [[TMP23]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = extractelement <8 x i32> [[TMP6]], i64 6
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <8 x i32> [[TMP6]], i64 6
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP25]], i32 [[TMP26]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP28:%.*]] = extractelement <8 x i32> [[TMP6]], i64 7
; CHECK-NEXT:    [[TMP29:%.*]] = extractelement <8 x i32> [[TMP6]], i64 7
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.permlanex16(i32 [[TMP28]], i32 [[TMP29]], i32 1985229328, i32 -19088744, i1 false, i1 false)
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <8 x i32> poison, i32 [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <8 x i32> [[TMP31]], i32 [[TMP12]], i64 1
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <8 x i32> [[TMP32]], i32 [[TMP15]], i64 2
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <8 x i32> [[TMP33]], i32 [[TMP18]], i64 3
; CHECK-NEXT:    [[TMP35:%.*]] = insertelement <8 x i32> [[TMP34]], i32 [[TMP21]], i64 4
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <8 x i32> [[TMP35]], i32 [[TMP24]], i64 5
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <8 x i32> [[TMP36]], i32 [[TMP27]], i64 6
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <8 x i32> [[TMP37]], i32 [[TMP30]], i64 7
; CHECK-NEXT:    [[TMP39:%.*]] = select i1 [[TMP5]], <8 x i32> [[TMP6]], <8 x i32> [[TMP38]]
; CHECK-NEXT:    [[TMP40:%.*]] = select i1 [[TMP5]], <8 x i32> [[TMP38]], <8 x i32> [[TMP6]]
; CHECK-NEXT:    [[TMP41:%.*]] = and <8 x i32> [[TMP39]], <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
; CHECK-NEXT:    [[TMP42:%.*]] = shl <8 x i32> [[TMP40]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP43:%.*]] = or <8 x i32> [[TMP41]], [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = bitcast <8 x i32> [[TMP43]] to <8 x float>
; CHECK-NEXT:    ret <8 x float> [[TMP44]]
;
  %fact = call <8 x float> (...) @lgc.cooperative.matrix.convert__v8f32(i32 0, <8 x float> %accum, i32 1, i32 1, i32 1, i32 0)
  ret <8 x float> %fact
}

declare i1 @getcc()
declare <8 x float> @process1(<8 x float>)

declare <8 x float> @lgc.cooperative.matrix.load__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.transpose__v8f32(...)
declare <8 x float> @lgc.cooperative.matrix.convert__v8f32(...)
declare void @lgc.cooperative.matrix.store(...)
