; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define <8 x float> @test_f16_ab_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_f16_ab_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = add i32 0, [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i32 [[TMP4]], 0
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr half, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = load half, ptr addrspace(7) [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <16 x half> poison, half [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = load half, ptr addrspace(7) [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <16 x half> [[TMP8]], half [[TMP11]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = add i32 [[TMP4]], 320
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = load half, ptr addrspace(7) [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <16 x half> [[TMP12]], half [[TMP15]], i64 2
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP4]], 480
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = load half, ptr addrspace(7) [[TMP18]], align 2
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <16 x half> [[TMP16]], half [[TMP19]], i64 3
; CHECK-NEXT:    [[TMP21:%.*]] = add i32 [[TMP4]], 640
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = load half, ptr addrspace(7) [[TMP22]], align 2
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x half> [[TMP20]], half [[TMP23]], i64 4
; CHECK-NEXT:    [[TMP25:%.*]] = add i32 [[TMP4]], 800
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = load half, ptr addrspace(7) [[TMP26]], align 2
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x half> [[TMP24]], half [[TMP27]], i64 5
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP4]], 960
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP29]]
; CHECK-NEXT:    [[TMP31:%.*]] = load half, ptr addrspace(7) [[TMP30]], align 2
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x half> [[TMP28]], half [[TMP31]], i64 6
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 [[TMP4]], 1120
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP35:%.*]] = load half, ptr addrspace(7) [[TMP34]], align 2
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x half> [[TMP32]], half [[TMP35]], i64 7
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP4]], 1280
; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = load half, ptr addrspace(7) [[TMP38]], align 2
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <16 x half> [[TMP36]], half [[TMP39]], i64 8
; CHECK-NEXT:    [[TMP41:%.*]] = add i32 [[TMP4]], 1440
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP41]]
; CHECK-NEXT:    [[TMP43:%.*]] = load half, ptr addrspace(7) [[TMP42]], align 2
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <16 x half> [[TMP40]], half [[TMP43]], i64 9
; CHECK-NEXT:    [[TMP45:%.*]] = add i32 [[TMP4]], 1600
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = load half, ptr addrspace(7) [[TMP46]], align 2
; CHECK-NEXT:    [[TMP48:%.*]] = insertelement <16 x half> [[TMP44]], half [[TMP47]], i64 10
; CHECK-NEXT:    [[TMP49:%.*]] = add i32 [[TMP4]], 1760
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = load half, ptr addrspace(7) [[TMP50]], align 2
; CHECK-NEXT:    [[TMP52:%.*]] = insertelement <16 x half> [[TMP48]], half [[TMP51]], i64 11
; CHECK-NEXT:    [[TMP53:%.*]] = add i32 [[TMP4]], 1920
; CHECK-NEXT:    [[TMP54:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = load half, ptr addrspace(7) [[TMP54]], align 2
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <16 x half> [[TMP52]], half [[TMP55]], i64 12
; CHECK-NEXT:    [[TMP57:%.*]] = add i32 [[TMP4]], 2080
; CHECK-NEXT:    [[TMP58:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP57]]
; CHECK-NEXT:    [[TMP59:%.*]] = load half, ptr addrspace(7) [[TMP58]], align 2
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <16 x half> [[TMP56]], half [[TMP59]], i64 13
; CHECK-NEXT:    [[TMP61:%.*]] = add i32 [[TMP4]], 2240
; CHECK-NEXT:    [[TMP62:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP61]]
; CHECK-NEXT:    [[TMP63:%.*]] = load half, ptr addrspace(7) [[TMP62]], align 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <16 x half> [[TMP60]], half [[TMP63]], i64 14
; CHECK-NEXT:    [[TMP65:%.*]] = add i32 [[TMP4]], 2400
; CHECK-NEXT:    [[TMP66:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP65]]
; CHECK-NEXT:    [[TMP67:%.*]] = load half, ptr addrspace(7) [[TMP66]], align 2
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <16 x half> [[TMP64]], half [[TMP67]], i64 15
; CHECK-NEXT:    [[TMP69:%.*]] = bitcast <16 x half> [[TMP68]] to <8 x float>
; CHECK-NEXT:    ret <8 x float> [[TMP69]]
;
  %a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(7) %ptr, i32 320, i1 false, i32 1, i32 0, i32 0, i32 16)
  ret <8 x float> %a
}

define <8 x float> @test_f16_cd_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_f16_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr half, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = load half, ptr addrspace(7) [[TMP8]], align 2
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <4 x half> poison, half [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = load half, ptr addrspace(7) [[TMP12]], align 2
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <4 x half> [[TMP10]], half [[TMP13]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = load half, ptr addrspace(7) [[TMP16]], align 2
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x half> [[TMP14]], half [[TMP17]], i64 2
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = load half, ptr addrspace(7) [[TMP20]], align 2
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x half> [[TMP18]], half [[TMP21]], i64 3
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <4 x half> [[TMP22]], <4 x half> poison, <16 x i32> <i32 0, i32 poison, i32 1, i32 poison, i32 2, i32 poison, i32 3, i32 poison, i32 4, i32 poison, i32 5, i32 poison, i32 6, i32 poison, i32 7, i32 poison>
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <16 x half> [[TMP23]] to <8 x float>
; CHECK-NEXT:    ret <8 x float> [[TMP24]]
;
  %a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(7) %ptr, i32 320, i1 false, i32 1, i32 1, i32 0, i32 16)
  ret <8 x float> %a
}

define <8 x i32> @test_i16_ab_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_i16_ab_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = add i32 0, [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i32 [[TMP4]], 0
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr addrspace(7) [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <16 x i16> poison, i16 [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr addrspace(7) [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <16 x i16> [[TMP8]], i16 [[TMP11]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = add i32 [[TMP4]], 320
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr addrspace(7) [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <16 x i16> [[TMP12]], i16 [[TMP15]], i64 2
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP4]], 480
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = load i16, ptr addrspace(7) [[TMP18]], align 2
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <16 x i16> [[TMP16]], i16 [[TMP19]], i64 3
; CHECK-NEXT:    [[TMP21:%.*]] = add i32 [[TMP4]], 640
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = load i16, ptr addrspace(7) [[TMP22]], align 2
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <16 x i16> [[TMP20]], i16 [[TMP23]], i64 4
; CHECK-NEXT:    [[TMP25:%.*]] = add i32 [[TMP4]], 800
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = load i16, ptr addrspace(7) [[TMP26]], align 2
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <16 x i16> [[TMP24]], i16 [[TMP27]], i64 5
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP4]], 960
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP29]]
; CHECK-NEXT:    [[TMP31:%.*]] = load i16, ptr addrspace(7) [[TMP30]], align 2
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <16 x i16> [[TMP28]], i16 [[TMP31]], i64 6
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 [[TMP4]], 1120
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP35:%.*]] = load i16, ptr addrspace(7) [[TMP34]], align 2
; CHECK-NEXT:    [[TMP36:%.*]] = insertelement <16 x i16> [[TMP32]], i16 [[TMP35]], i64 7
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP4]], 1280
; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = load i16, ptr addrspace(7) [[TMP38]], align 2
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <16 x i16> [[TMP36]], i16 [[TMP39]], i64 8
; CHECK-NEXT:    [[TMP41:%.*]] = add i32 [[TMP4]], 1440
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP41]]
; CHECK-NEXT:    [[TMP43:%.*]] = load i16, ptr addrspace(7) [[TMP42]], align 2
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <16 x i16> [[TMP40]], i16 [[TMP43]], i64 9
; CHECK-NEXT:    [[TMP45:%.*]] = add i32 [[TMP4]], 1600
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = load i16, ptr addrspace(7) [[TMP46]], align 2
; CHECK-NEXT:    [[TMP48:%.*]] = insertelement <16 x i16> [[TMP44]], i16 [[TMP47]], i64 10
; CHECK-NEXT:    [[TMP49:%.*]] = add i32 [[TMP4]], 1760
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = load i16, ptr addrspace(7) [[TMP50]], align 2
; CHECK-NEXT:    [[TMP52:%.*]] = insertelement <16 x i16> [[TMP48]], i16 [[TMP51]], i64 11
; CHECK-NEXT:    [[TMP53:%.*]] = add i32 [[TMP4]], 1920
; CHECK-NEXT:    [[TMP54:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = load i16, ptr addrspace(7) [[TMP54]], align 2
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <16 x i16> [[TMP52]], i16 [[TMP55]], i64 12
; CHECK-NEXT:    [[TMP57:%.*]] = add i32 [[TMP4]], 2080
; CHECK-NEXT:    [[TMP58:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP57]]
; CHECK-NEXT:    [[TMP59:%.*]] = load i16, ptr addrspace(7) [[TMP58]], align 2
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <16 x i16> [[TMP56]], i16 [[TMP59]], i64 13
; CHECK-NEXT:    [[TMP61:%.*]] = add i32 [[TMP4]], 2240
; CHECK-NEXT:    [[TMP62:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP61]]
; CHECK-NEXT:    [[TMP63:%.*]] = load i16, ptr addrspace(7) [[TMP62]], align 2
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <16 x i16> [[TMP60]], i16 [[TMP63]], i64 14
; CHECK-NEXT:    [[TMP65:%.*]] = add i32 [[TMP4]], 2400
; CHECK-NEXT:    [[TMP66:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP65]]
; CHECK-NEXT:    [[TMP67:%.*]] = load i16, ptr addrspace(7) [[TMP66]], align 2
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <16 x i16> [[TMP64]], i16 [[TMP67]], i64 15
; CHECK-NEXT:    [[TMP69:%.*]] = bitcast <16 x i16> [[TMP68]] to <8 x i32>
; CHECK-NEXT:    ret <8 x i32> [[TMP69]]
;
  %a = call <8 x i32> (...) @lgc.cooperative.matrix.load__v8i32(ptr addrspace(7) %ptr, i32 320, i1 false, i32 4, i32 0, i32 0, i32 16)
  ret <8 x i32> %a
}

define <8 x i32> @test_i16_cd_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_i16_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i16, ptr addrspace(7) [[TMP8]], align 2
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <4 x i16> poison, i16 [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = load i16, ptr addrspace(7) [[TMP12]], align 2
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <4 x i16> [[TMP10]], i16 [[TMP13]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr addrspace(7) [[TMP16]], align 2
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x i16> [[TMP14]], i16 [[TMP17]], i64 2
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i16, ptr addrspace(7) [[TMP20]], align 2
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x i16> [[TMP18]], i16 [[TMP21]], i64 3
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <4 x i16> [[TMP22]], <4 x i16> poison, <16 x i32> <i32 0, i32 poison, i32 1, i32 poison, i32 2, i32 poison, i32 3, i32 poison, i32 4, i32 poison, i32 5, i32 poison, i32 6, i32 poison, i32 7, i32 poison>
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <16 x i16> [[TMP23]] to <8 x i32>
; CHECK-NEXT:    ret <8 x i32> [[TMP24]]
;
  %a = call <8 x i32> (...) @lgc.cooperative.matrix.load__v8i32(ptr addrspace(7) %ptr, i32 320, i1 false, i32 4, i32 1, i32 0, i32 16)
  ret <8 x i32> %a
}

define <8 x float> @test_f32_cd_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_f32_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr float, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr addrspace(7) [[TMP8]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <4 x float> poison, float [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr float, ptr addrspace(7) [[PTR]], i32 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr addrspace(7) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <4 x float> [[TMP10]], float [[TMP13]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr float, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr addrspace(7) [[TMP16]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x float> [[TMP14]], float [[TMP17]], i64 2
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr float, ptr addrspace(7) [[PTR]], i32 [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = load float, ptr addrspace(7) [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x float> [[TMP18]], float [[TMP21]], i64 3
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <4 x float> [[TMP22]], <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    ret <8 x float> [[TMP23]]
;
  %a = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(7) %ptr, i32 640, i1 false, i32 2, i32 1, i32 0, i32 16)
  ret <8 x float> %a
}

define <8 x i32> @test_i32_cd_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_i32_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr addrspace(7) [[TMP8]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <4 x i32> poison, i32 [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr addrspace(7) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <4 x i32> [[TMP10]], i32 [[TMP13]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr addrspace(7) [[TMP16]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x i32> [[TMP14]], i32 [[TMP17]], i64 2
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr addrspace(7) [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x i32> [[TMP18]], i32 [[TMP21]], i64 3
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <4 x i32> [[TMP22]], <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    ret <8 x i32> [[TMP23]]
;
  %a = call <8 x i32> (...) @lgc.cooperative.matrix.load__v8i32(ptr addrspace(7) %ptr, i32 640, i1 false, i32 5, i32 1, i32 0, i32 16)
  ret <8 x i32> %a
}

declare <8 x float> @lgc.cooperative.matrix.load__v8f32(...)
declare <8 x i32> @lgc.cooperative.matrix.load__v8i32(...)

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}

!0 = !{i32 128, i32 2, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 -2108299168, i32 -1199997545, i32 1667044824, i32 -422575072, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 -1}
!3 = !{i32 219437737, i32 -1317595285, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!8 = !{i32 5}
!9 = !{i32 7}
