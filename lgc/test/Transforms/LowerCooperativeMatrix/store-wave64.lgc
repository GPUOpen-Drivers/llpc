; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define void @test_f16_ab_layout(ptr addrspace(7) %ptr, <8 x float> %a) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_f16_ab_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = add i32 0, [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x float> [[A:%.*]] to <16 x half>
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP4]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr half, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <16 x half> [[TMP5]], i64 0
; CHECK-NEXT:    store half [[TMP8]], ptr addrspace(7) [[TMP7]], align 2
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <16 x half> [[TMP5]], i64 1
; CHECK-NEXT:    store half [[TMP11]], ptr addrspace(7) [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP4]], 320
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <16 x half> [[TMP5]], i64 2
; CHECK-NEXT:    store half [[TMP14]], ptr addrspace(7) [[TMP13]], align 2
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP4]], 480
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <16 x half> [[TMP5]], i64 3
; CHECK-NEXT:    store half [[TMP17]], ptr addrspace(7) [[TMP16]], align 2
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP4]], 640
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <16 x half> [[TMP5]], i64 4
; CHECK-NEXT:    store half [[TMP20]], ptr addrspace(7) [[TMP19]], align 2
; CHECK-NEXT:    [[TMP21:%.*]] = add i32 [[TMP4]], 800
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <16 x half> [[TMP5]], i64 5
; CHECK-NEXT:    store half [[TMP23]], ptr addrspace(7) [[TMP22]], align 2
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP4]], 960
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP24]]
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <16 x half> [[TMP5]], i64 6
; CHECK-NEXT:    store half [[TMP26]], ptr addrspace(7) [[TMP25]], align 2
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP4]], 1120
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = extractelement <16 x half> [[TMP5]], i64 7
; CHECK-NEXT:    store half [[TMP29]], ptr addrspace(7) [[TMP28]], align 2
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP4]], 1280
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP30]]
; CHECK-NEXT:    [[TMP32:%.*]] = extractelement <16 x half> [[TMP5]], i64 8
; CHECK-NEXT:    store half [[TMP32]], ptr addrspace(7) [[TMP31]], align 2
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 [[TMP4]], 1440
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP35:%.*]] = extractelement <16 x half> [[TMP5]], i64 9
; CHECK-NEXT:    store half [[TMP35]], ptr addrspace(7) [[TMP34]], align 2
; CHECK-NEXT:    [[TMP36:%.*]] = add i32 [[TMP4]], 1600
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP36]]
; CHECK-NEXT:    [[TMP38:%.*]] = extractelement <16 x half> [[TMP5]], i64 10
; CHECK-NEXT:    store half [[TMP38]], ptr addrspace(7) [[TMP37]], align 2
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[TMP4]], 1760
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP39]]
; CHECK-NEXT:    [[TMP41:%.*]] = extractelement <16 x half> [[TMP5]], i64 11
; CHECK-NEXT:    store half [[TMP41]], ptr addrspace(7) [[TMP40]], align 2
; CHECK-NEXT:    [[TMP42:%.*]] = add i32 [[TMP4]], 1920
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = extractelement <16 x half> [[TMP5]], i64 12
; CHECK-NEXT:    store half [[TMP44]], ptr addrspace(7) [[TMP43]], align 2
; CHECK-NEXT:    [[TMP45:%.*]] = add i32 [[TMP4]], 2080
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = extractelement <16 x half> [[TMP5]], i64 13
; CHECK-NEXT:    store half [[TMP47]], ptr addrspace(7) [[TMP46]], align 2
; CHECK-NEXT:    [[TMP48:%.*]] = add i32 [[TMP4]], 2240
; CHECK-NEXT:    [[TMP49:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP48]]
; CHECK-NEXT:    [[TMP50:%.*]] = extractelement <16 x half> [[TMP5]], i64 14
; CHECK-NEXT:    store half [[TMP50]], ptr addrspace(7) [[TMP49]], align 2
; CHECK-NEXT:    [[TMP51:%.*]] = add i32 [[TMP4]], 2400
; CHECK-NEXT:    [[TMP52:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP51]]
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <16 x half> [[TMP5]], i64 15
; CHECK-NEXT:    store half [[TMP53]], ptr addrspace(7) [[TMP52]], align 2
; CHECK-NEXT:    ret void
;
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 320, i1 false, i32 1, i32 0, i32 0, i32 16, <8 x float> %a)
  ret void
}

define void @test_f16_cd_layout(ptr addrspace(7) %ptr, <8 x float> %a) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_f16_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x float> [[A:%.*]] to <16 x half>
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <16 x half> [[TMP7]], <16 x half> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr half, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <4 x half> [[TMP8]], i64 0
; CHECK-NEXT:    store half [[TMP11]], ptr addrspace(7) [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <4 x half> [[TMP8]], i64 1
; CHECK-NEXT:    store half [[TMP14]], ptr addrspace(7) [[TMP13]], align 2
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <4 x half> [[TMP8]], i64 2
; CHECK-NEXT:    store half [[TMP17]], ptr addrspace(7) [[TMP16]], align 2
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr half, ptr addrspace(7) [[PTR]], i32 [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <4 x half> [[TMP8]], i64 3
; CHECK-NEXT:    store half [[TMP20]], ptr addrspace(7) [[TMP19]], align 2
; CHECK-NEXT:    ret void
;
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 320, i1 false, i32 1, i32 1, i32 0, i32 16, <8 x float> %a)
  ret void
}

define void @test_i16_ab_layout(ptr addrspace(7) %ptr, <8 x i32> %a) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_i16_ab_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = add i32 0, [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i32> [[A:%.*]] to <16 x i16>
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP4]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <16 x i16> [[TMP5]], i64 0
; CHECK-NEXT:    store i16 [[TMP8]], ptr addrspace(7) [[TMP7]], align 2
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <16 x i16> [[TMP5]], i64 1
; CHECK-NEXT:    store i16 [[TMP11]], ptr addrspace(7) [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP4]], 320
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <16 x i16> [[TMP5]], i64 2
; CHECK-NEXT:    store i16 [[TMP14]], ptr addrspace(7) [[TMP13]], align 2
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP4]], 480
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <16 x i16> [[TMP5]], i64 3
; CHECK-NEXT:    store i16 [[TMP17]], ptr addrspace(7) [[TMP16]], align 2
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP4]], 640
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <16 x i16> [[TMP5]], i64 4
; CHECK-NEXT:    store i16 [[TMP20]], ptr addrspace(7) [[TMP19]], align 2
; CHECK-NEXT:    [[TMP21:%.*]] = add i32 [[TMP4]], 800
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <16 x i16> [[TMP5]], i64 5
; CHECK-NEXT:    store i16 [[TMP23]], ptr addrspace(7) [[TMP22]], align 2
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP4]], 960
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP24]]
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <16 x i16> [[TMP5]], i64 6
; CHECK-NEXT:    store i16 [[TMP26]], ptr addrspace(7) [[TMP25]], align 2
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP4]], 1120
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = extractelement <16 x i16> [[TMP5]], i64 7
; CHECK-NEXT:    store i16 [[TMP29]], ptr addrspace(7) [[TMP28]], align 2
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP4]], 1280
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP30]]
; CHECK-NEXT:    [[TMP32:%.*]] = extractelement <16 x i16> [[TMP5]], i64 8
; CHECK-NEXT:    store i16 [[TMP32]], ptr addrspace(7) [[TMP31]], align 2
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 [[TMP4]], 1440
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP35:%.*]] = extractelement <16 x i16> [[TMP5]], i64 9
; CHECK-NEXT:    store i16 [[TMP35]], ptr addrspace(7) [[TMP34]], align 2
; CHECK-NEXT:    [[TMP36:%.*]] = add i32 [[TMP4]], 1600
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP36]]
; CHECK-NEXT:    [[TMP38:%.*]] = extractelement <16 x i16> [[TMP5]], i64 10
; CHECK-NEXT:    store i16 [[TMP38]], ptr addrspace(7) [[TMP37]], align 2
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[TMP4]], 1760
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP39]]
; CHECK-NEXT:    [[TMP41:%.*]] = extractelement <16 x i16> [[TMP5]], i64 11
; CHECK-NEXT:    store i16 [[TMP41]], ptr addrspace(7) [[TMP40]], align 2
; CHECK-NEXT:    [[TMP42:%.*]] = add i32 [[TMP4]], 1920
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = extractelement <16 x i16> [[TMP5]], i64 12
; CHECK-NEXT:    store i16 [[TMP44]], ptr addrspace(7) [[TMP43]], align 2
; CHECK-NEXT:    [[TMP45:%.*]] = add i32 [[TMP4]], 2080
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = extractelement <16 x i16> [[TMP5]], i64 13
; CHECK-NEXT:    store i16 [[TMP47]], ptr addrspace(7) [[TMP46]], align 2
; CHECK-NEXT:    [[TMP48:%.*]] = add i32 [[TMP4]], 2240
; CHECK-NEXT:    [[TMP49:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP48]]
; CHECK-NEXT:    [[TMP50:%.*]] = extractelement <16 x i16> [[TMP5]], i64 14
; CHECK-NEXT:    store i16 [[TMP50]], ptr addrspace(7) [[TMP49]], align 2
; CHECK-NEXT:    [[TMP51:%.*]] = add i32 [[TMP4]], 2400
; CHECK-NEXT:    [[TMP52:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP51]]
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <16 x i16> [[TMP5]], i64 15
; CHECK-NEXT:    store i16 [[TMP53]], ptr addrspace(7) [[TMP52]], align 2
; CHECK-NEXT:    ret void
;
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 320, i1 false, i32 4, i32 0, i32 0, i32 16, <8 x i32> %a)
  ret void
}

define void @test_i16_cd_layout(ptr addrspace(7) %ptr, <8 x i32> %a) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_i16_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x i32> [[A:%.*]] to <16 x i16>
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <16 x i16> [[TMP7]], <16 x i16> poison, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <4 x i16> [[TMP8]], i64 0
; CHECK-NEXT:    store i16 [[TMP11]], ptr addrspace(7) [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <4 x i16> [[TMP8]], i64 1
; CHECK-NEXT:    store i16 [[TMP14]], ptr addrspace(7) [[TMP13]], align 2
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <4 x i16> [[TMP8]], i64 2
; CHECK-NEXT:    store i16 [[TMP17]], ptr addrspace(7) [[TMP16]], align 2
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i16, ptr addrspace(7) [[PTR]], i32 [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <4 x i16> [[TMP8]], i64 3
; CHECK-NEXT:    store i16 [[TMP20]], ptr addrspace(7) [[TMP19]], align 2
; CHECK-NEXT:    ret void
;
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 320, i1 false, i32 4, i32 1, i32 0, i32 16, <8 x i32> %a)
  ret void
}

define void @test_f32_cd_layout(ptr addrspace(7) %ptr, <8 x float> %a) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_f32_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <8 x float> [[A:%.*]], <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr float, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = extractelement <4 x float> [[TMP7]], i64 0
; CHECK-NEXT:    store float [[TMP10]], ptr addrspace(7) [[TMP9]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr float, ptr addrspace(7) [[PTR]], i32 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = extractelement <4 x float> [[TMP7]], i64 1
; CHECK-NEXT:    store float [[TMP13]], ptr addrspace(7) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr float, ptr addrspace(7) [[PTR]], i32 [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <4 x float> [[TMP7]], i64 2
; CHECK-NEXT:    store float [[TMP16]], ptr addrspace(7) [[TMP15]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr float, ptr addrspace(7) [[PTR]], i32 [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <4 x float> [[TMP7]], i64 3
; CHECK-NEXT:    store float [[TMP19]], ptr addrspace(7) [[TMP18]], align 4
; CHECK-NEXT:    ret void
;
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 640, i1 false, i32 2, i32 1, i32 0, i32 16, <8 x float> %a)
  ret void
}

define void @test_i32_cd_layout(ptr addrspace(7) %ptr, <8 x i32> %a) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; CHECK-LABEL: @test_i32_cd_layout(
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 160
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <8 x i32> [[A:%.*]], <8 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = extractelement <4 x i32> [[TMP7]], i64 0
; CHECK-NEXT:    store i32 [[TMP10]], ptr addrspace(7) [[TMP9]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP6]], 640
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 [[TMP11]]
; CHECK-NEXT:    [[TMP13:%.*]] = extractelement <4 x i32> [[TMP7]], i64 1
; CHECK-NEXT:    store i32 [[TMP13]], ptr addrspace(7) [[TMP12]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = add i32 [[TMP6]], 1280
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <4 x i32> [[TMP7]], i64 2
; CHECK-NEXT:    store i32 [[TMP16]], ptr addrspace(7) [[TMP15]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP6]], 1920
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <4 x i32> [[TMP7]], i64 3
; CHECK-NEXT:    store i32 [[TMP19]], ptr addrspace(7) [[TMP18]], align 4
; CHECK-NEXT:    ret void
;
  call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) %ptr, i32 640, i1 false, i32 5, i32 1, i32 0, i32 16, <8 x i32> %a)
  ret void
}

declare void @lgc.cooperative.matrix.store(...)

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}

!0 = !{i32 128, i32 2, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 -2108299168, i32 -1199997545, i32 1667044824, i32 -422575072, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 -1}
!3 = !{i32 219437737, i32 -1317595285, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!8 = !{i32 5}
!9 = !{i32 7}
