; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
; RUN: lgc -mcpu=gfx1030 -o - -passes=lgc-lower-gpurt %s | FileCheck --check-prefixes=CHECK %s
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Test the result of lowering GPURT dialect op calls like @lgc.gpurt.make.pc().

; ModuleID = 'lgcPipeline'
declare i64 @lgc.gpurt.make.pc__i32(i32)
declare <2 x i32> @lgc.gpurt.make.pc__v2i32(i32)
declare void @dummy.use__i64(i64 %val)
declare void @dummy.use__v2i32(<2 x i32> %val)

define spir_func void @test(i32 %debug_in) {
; CHECK-LABEL: define spir_func void @test(
; CHECK-SAME: i32 [[DEBUG_IN:%.*]]) {
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP11:%.*]] = lshr i64 [[TMP6]], 32
; CHECK-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP11]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> poison, i32 [[DEBUG_IN]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i32> [[TMP4]], i32 [[TMP3]], i64 1
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <2 x i32> [[TMP5]] to i64
; CHECK-NEXT:    call void @dummy.use__i64(i64 [[TMP1]])
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP8:%.*]] = lshr i64 [[TMP7]], 32
; CHECK-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <2 x i32> poison, i32 [[DEBUG_IN]], i64 0
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP10]], i32 [[TMP9]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast i64 [[TMP12]] to <2 x i32>
; CHECK-NEXT:    call void @dummy.use__v2i32(<2 x i32> [[TMP13]])
; CHECK-NEXT:    ret void
;
  %1 = call i64 @lgc.gpurt.make.pc__i32(i32 %debug_in)
  call void @dummy.use__i64(i64 %1)
  %2 = call <2 x i32> @lgc.gpurt.make.pc__v2i32(i32 %debug_in)
  call void @dummy.use__v2i32(<2 x i32> %2)
  ret void
}
