; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
; RUN: lgc --mcpu=gfx1100 -o - -passes='require<lgc-pipeline-state>,function(lgc-patch-buffer-op)' %s | FileCheck --check-prefixes=GFX11 %s

define amdgpu_kernel void @strided_buffer_desc_to_ptr(<4 x i32> inreg %desc, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 0, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %res = load float, ptr addrspace(9) %buf, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[INDEX]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_offset(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_offset
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.off = getelementptr inbounds i8, ptr addrspace(9) %buf.idx, i32 8
  %res = load float, ptr addrspace(9) %buf.off, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_zero(<4 x i32> inreg %desc, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_zero
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 0, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 0)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = add i32 [[INDEX]], [[INDEX]]
; GFX11-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[TMP0]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GFX11-NEXT:    store float [[TMP2]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_new(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_new
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = add i32 [[INDEX]], 4
; GFX11-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[TMP0]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GFX11-NEXT:    store float [[TMP2]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 4)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_old(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_old
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = add i32 4, [[INDEX]]
; GFX11-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[TMP0]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GFX11-NEXT:    store float [[TMP2]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 4)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_both(<4 x i32> inreg %desc, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_both
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 6, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 4)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 2)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_offset_index(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_kernel void @strided_buffer_desc_to_ptr_offset_index
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.off = getelementptr inbounds i8, ptr addrspace(9) %buf, i32 8
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.off, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  store float %res, ptr %out, align 4
  ret void
}

define float @addr_and_stride_to_ptr(i64 %addr, i32 %stride) {
; GFX11-LABEL: define float @addr_and_stride_to_ptr
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[STRIDE:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 0, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %res = load float, ptr addrspace(9) %buf, align 4
  ret float %res
}

define float @addr_and_stride_to_ptr_index(i64 %addr, i32 %index, i32 %stride) {
; GFX11-LABEL: define float @addr_and_stride_to_ptr_index
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[INDEX:%.*]], i32 [[STRIDE:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 [[INDEX]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  ret float %res
}

define float @addr_and_stride_to_ptr_index_offset(i64 %addr, i32 %index, i32 %stride) {
; GFX11-LABEL: define float @addr_and_stride_to_ptr_index_offset
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[INDEX:%.*]], i32 [[STRIDE:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.offs = getelementptr inbounds i8, ptr addrspace(9) %buf.idx, i32 8
  %res = load float, ptr addrspace(9) %buf.offs, align 4
  ret float %res
}

define float @addr_and_stride_to_ptr_offset_index(i64 %addr, i32 %index, i32 %stride) {
; GFX11-LABEL: define float @addr_and_stride_to_ptr_offset_index
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[INDEX:%.*]], i32 [[STRIDE:%.*]]) {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %buf.offs = getelementptr inbounds i8, ptr addrspace(9) %buf, i32 8
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.offs, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  ret float %res
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32>) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64, i32) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9), i32) #0

attributes #0 = { nounwind willreturn memory(none) }
