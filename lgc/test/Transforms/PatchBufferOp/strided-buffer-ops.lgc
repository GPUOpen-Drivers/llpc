; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
; RUN: lgc --mcpu=gfx1100 -o - -passes='require<lgc-pipeline-state>,module(lgc-lower-desc),module(lgc-patch-entry-point-mutate),function(lgc-patch-buffer-op)' %s | FileCheck --check-prefixes=GFX11 %s

define amdgpu_kernel void @strided_buffer_desc_to_ptr(<4 x i32> inreg %desc, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0:[0-9]+]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 0, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %res = load float, ptr addrspace(9) %buf, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[INDEX]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_offset(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index_offset
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.off = getelementptr inbounds i8, ptr addrspace(9) %buf.idx, i32 8
  %res = load float, ptr addrspace(9) %buf.off, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_zero(<4 x i32> inreg %desc, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index_add_zero
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 0, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 0)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index_add_twice
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = add i32 [[INDEX]], [[INDEX]]
; GFX11-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[TMP0]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GFX11-NEXT:    store float [[TMP2]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_new(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index_add_twice_constant_new
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = add i32 [[INDEX]], 4
; GFX11-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[TMP0]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GFX11-NEXT:    store float [[TMP2]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 4)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_old(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index_add_twice_constant_old
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = add i32 4, [[INDEX]]
; GFX11-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[TMP0]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP2:%.*]] = bitcast i32 [[TMP1]] to float
; GFX11-NEXT:    store float [[TMP2]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 4)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_index_add_twice_constant_both(<4 x i32> inreg %desc, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_index_add_twice_constant_both
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 6, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 4)
  %buf.idx.2 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.idx, i32 2)
  %res = load float, ptr addrspace(9) %buf.idx.2, align 4
  store float %res, ptr %out, align 4
  ret void
}

define amdgpu_kernel void @strided_buffer_desc_to_ptr_offset_index(<4 x i32> inreg %desc, i32 %index, ptr %out) {
; GFX11-LABEL: define amdgpu_gfx void @strided_buffer_desc_to_ptr_offset_index
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[DESC]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i32 [[TMP0]] to float
; GFX11-NEXT:    store float [[TMP1]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32> %desc)
  %buf.off = getelementptr inbounds i8, ptr addrspace(9) %buf, i32 8
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.off, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  store float %res, ptr %out, align 4
  ret void
}

define float @addr_and_stride_to_ptr(i64 %addr, i32 %stride) {
; GFX11-LABEL: define amdgpu_gfx float @addr_and_stride_to_ptr
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[STRIDE:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 0, i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %res = load float, ptr addrspace(9) %buf, align 4
  ret float %res
}

define float @addr_and_stride_to_ptr_index(i64 %addr, i32 %index, i32 %stride) {
; GFX11-LABEL: define amdgpu_gfx float @addr_and_stride_to_ptr_index
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[INDEX:%.*]], i32 [[STRIDE:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 [[INDEX]], i32 0, i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  ret float %res
}

define float @addr_and_stride_to_ptr_index_offset(i64 %addr, i32 %index, i32 %stride) {
; GFX11-LABEL: define amdgpu_gfx float @addr_and_stride_to_ptr_index_offset
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[INDEX:%.*]], i32 [[STRIDE:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf, i32 %index)
  %buf.offs = getelementptr inbounds i8, ptr addrspace(9) %buf.idx, i32 8
  %res = load float, ptr addrspace(9) %buf.offs, align 4
  ret float %res
}

define float @addr_and_stride_to_ptr_offset_index(i64 %addr, i32 %index, i32 %stride) {
; GFX11-LABEL: define amdgpu_gfx float @addr_and_stride_to_ptr_offset_index
; GFX11-SAME: (i64 [[ADDR:%.*]], i32 [[INDEX:%.*]], i32 [[STRIDE:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = trunc i64 [[ADDR]] to i32
; GFX11-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0
; GFX11-NEXT:    [[TMP2:%.*]] = lshr i64 [[ADDR]], 32
; GFX11-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; GFX11-NEXT:    [[TMP4:%.*]] = shl i32 [[STRIDE]], 16
; GFX11-NEXT:    [[TMP5:%.*]] = or i32 [[TMP3]], [[TMP4]]
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[TMP5]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> [[TMP7]], i32 536956844, i64 3
; GFX11-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.buffer.load.i32(<4 x i32> [[TMP8]], i32 [[INDEX]], i32 ptrtoint (ptr addrspace(6) getelementptr inbounds (i8, ptr addrspace(6) null, i32 8) to i32), i32 0, i32 0)
; GFX11-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; GFX11-NEXT:    ret float [[TMP10]]
;
entry:
  %buf = call ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64 %addr, i32 %stride)
  %buf.offs = getelementptr inbounds i8, ptr addrspace(9) %buf, i32 8
  %buf.idx = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %buf.offs, i32 %index)
  %res = load float, ptr addrspace(9) %buf.idx, align 4
  ret float %res
}

define amdgpu_kernel void @constant_strided_buffer_desc_to_ptr_index(<4 x i32> inreg %desc, i32 %index, ptr %out) #0 !lgc.shaderstage !4 {
; GFX11-LABEL: define amdgpu_gfx void @constant_strided_buffer_desc_to_ptr_index
; GFX11-SAME: (<4 x i32> inreg [[DESC:%.*]], i32 [[INDEX:%.*]], ptr [[OUT:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[USERDATA1:%.*]], i32 inreg noundef [[USERDATA2:%.*]], i32 inreg noundef [[USERDATA3:%.*]], i32 inreg noundef [[USERDATA4:%.*]], i32 inreg noundef [[USERDATA5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], <3 x i32> inreg noundef [[WORKGROUPID:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR1:[0-9]+]] !lgc.shaderstage [[META6:![0-9]+]] {
; GFX11-NEXT:  entry:
; GFX11-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; GFX11-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; GFX11-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[PAD11]], i64 0
; GFX11-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; GFX11-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; GFX11-NEXT:    [[TMP5:%.*]] = insertelement <2 x i32> poison, i32 [[USERDATA3]], i64 0
; GFX11-NEXT:    [[TMP6:%.*]] = insertelement <2 x i32> [[TMP5]], i32 [[USERDATA4]], i64 1
; GFX11-NEXT:    [[TMP7:%.*]] = extractelement <2 x i32> [[TMP6]], i64 0
; GFX11-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[TMP6]], i64 1
; GFX11-NEXT:    [[TMP9:%.*]] = insertelement <4 x i32> poison, i32 [[TMP7]], i64 0
; GFX11-NEXT:    [[TMP10:%.*]] = and i32 [[TMP8]], 65535
; GFX11-NEXT:    [[TMP11:%.*]] = or i32 [[TMP10]], 1048576
; GFX11-NEXT:    [[TMP12:%.*]] = insertelement <4 x i32> [[TMP9]], i32 [[TMP11]], i64 1
; GFX11-NEXT:    [[TMP13:%.*]] = insertelement <4 x i32> [[TMP12]], i32 -1, i64 2
; GFX11-NEXT:    [[TMP14:%.*]] = insertelement <4 x i32> [[TMP13]], i32 805392300, i64 3
; GFX11-NEXT:    [[TMP15:%.*]] = extractelement <4 x i32> [[TMP14]], i64 1
; GFX11-NEXT:    [[TMP16:%.*]] = lshr i32 [[TMP15]], 16
; GFX11-NEXT:    [[TMP17:%.*]] = and i32 [[TMP16]], 16383
; GFX11-NEXT:    [[TMP18:%.*]] = mul i32 24, [[TMP17]]
; GFX11-NEXT:    [[TMP19:%.*]] = add i32 0, [[TMP18]]
; GFX11-NEXT:    [[TMP20:%.*]] = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> [[TMP14]], i32 [[TMP19]], i32 0), !invariant.load [[META7:![0-9]+]]
; GFX11-NEXT:    [[TMP21:%.*]] = bitcast i32 [[TMP20]] to float
; GFX11-NEXT:    store float [[TMP21]], ptr [[OUT]], align 4
; GFX11-NEXT:    ret void
;
entry:
  %145 = call ptr addrspace(9) @lgc.load.strided.buffer.desc(i64 8589934592, i32 0, i32 0, i32 4, i32 16)
  %146 = call ptr @llvm.invariant.start.p9(i64 -1, ptr addrspace(9) %145)
  %147 = call ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9) %145, i32 24)
  %res = load float, ptr addrspace(9) %147, align 16
  store float %res, ptr %out, align 4
  ret void
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.strided.buffer.desc.to.ptr(<4 x i32>) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.strided.buffer.addr.and.stride.to.ptr(i64, i32) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.strided.index.add(ptr addrspace(9), i32) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(9) @lgc.load.strided.buffer.desc(i64, i32, i32, i32, i32) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p9(i64 immarg, ptr addrspace(9) nocapture) #1

attributes #0 = { nounwind willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llpc.compute.mode = !{!0}

!lgc.user.data.nodes = !{!1, !2, !3}

!0 = !{i32 16, i32 16, i32 1}

!1 = !{!"DescriptorTableVaPtr", i32 7, i32 255, i32 3, i32 1, i32 1}
!2 = !{!"DescriptorMutable", i32 17, i32 0, i32 0, i32 40, i64 4294967296, i32 0, i32 8}
!3 = !{!"DescriptorConstBufferCompact", i32 15, i32 255, i32 4, i32 2, i64 8589934592, i32 0, i32 2}
!4 = !{i32 7}
