; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes='require<lgc-pipeline-state>,function(lgc-patch-buffer-op)' %s | FileCheck --check-prefixes=CHECK %s

; TODO: This one is too pessimistic: the descriptor is really uniform but we
;       can't know this because the initial divergence analysis treats
;       lgc.buffer.desc.to.ptr as a source of divergence, which causes the
;       phi to be divergent -- and the pass can't distinguish between a phi
;       that's divergent due to its inputs vs. one that's divergent due to a
;       sync divergence.
define amdgpu_gfx float @uniform_phi(<4 x i32> inreg %desc0, <4 x i32> inreg %desc1, i1 inreg %sel) !lgc.shaderstage !0 {
; CHECK-LABEL: @uniform_phi(
; CHECK-NEXT:    br i1 [[SEL:%.*]], label [[A:%.*]], label [[B:%.*]]
; CHECK:       a:
; CHECK-NEXT:    br label [[TAIL:%.*]]
; CHECK:       b:
; CHECK-NEXT:    br label [[TAIL]]
; CHECK:       tail:
; CHECK-NEXT:    [[PTR_0:%.*]] = phi <4 x i32> [ [[DESC0:%.*]], [[A]] ], [ [[DESC1:%.*]], [[B]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = extractelement <4 x i32> [[PTR_0]], i64 2
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ult i32 0, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <4 x i32> [[PTR_0]], <4 x i32> poison, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[TMP4:%.*]] = and <2 x i32> [[TMP3]], <i32 -1, i32 65535>
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i32> [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(1)
; CHECK-NEXT:    [[TMP7:%.*]] = select i1 [[TMP2]], i32 0, i32 0
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr addrspace(1) [[TMP6]], i32 [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr addrspace(1) [[TMP8]], align 4
; CHECK-NEXT:    ret float [[TMP9]]
;
  br i1 %sel, label %a, label %b

a:
  %ptr0 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc0)
  br label %tail

b:
  %ptr1 = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc1)
  br label %tail

tail:
  %ptr = phi ptr addrspace(7) [ %ptr0, %a ], [ %ptr1, %b ]
  %r = load float, ptr addrspace(7) %ptr
  ret float %r
}

declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>) nounwind readnone

!0 = !{i32 7}
