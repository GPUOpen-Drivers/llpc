; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
; RUN: lgc -mcpu=gfx1010 -passes=lgc-patch-peephole-opt -o - %s | FileCheck --check-prefixes=CHECK %s

; Test that log2 underflow transform is correctly applied.

target triple = "amdgcn--amdpal"

define dllexport spir_func float @lgc.shader.FS.main(float %x, float %y, float %z) local_unnamed_addr #0 !lgc.shaderstage !0 {
; CHECK-LABEL: define dllexport spir_func float @lgc.shader.FS.main
; CHECK-SAME: (float [[X:%.*]], float [[Y:%.*]], float [[Z:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !lgc.shaderstage !0 {
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[MUL0A:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[X]], 0x3F9C71C720000000
; CHECK-NEXT:    [[SUB0A:%.*]] = fsub reassoc nnan nsz arcp contract afn float 1.000000e+00, [[MUL0A]]
; CHECK-NEXT:    [[TMP0:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.maxnum.f32(float 0.000000e+00, float [[SUB0A]])
; CHECK-NEXT:    [[LOG0A:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float [[TMP0]])
; CHECK-NEXT:    [[MUL0B:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[X]], 0x3F9C71C720000000
; CHECK-NEXT:    [[SUB0B:%.*]] = fsub reassoc nnan nsz arcp contract afn float [[MUL0B]], 2.000000e+00
; CHECK-NEXT:    [[TMP1:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.maxnum.f32(float 0.000000e+00, float [[SUB0B]])
; CHECK-NEXT:    [[LOG0B:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float [[TMP1]])
; CHECK-NEXT:    [[MUL1:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[Y]], 0x3F9C71C720000000
; CHECK-NEXT:    [[SUB1:%.*]] = fsub reassoc nsz arcp contract afn float 1.000000e+00, [[MUL1]]
; CHECK-NEXT:    [[LOG1:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float [[SUB1]])
; CHECK-NEXT:    [[MUL2A:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[Z]], 0x3F9C71C720000000
; CHECK-NEXT:    [[ADD2A:%.*]] = fadd reassoc nnan nsz arcp contract afn float 1.000000e+00, [[MUL2A]]
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.maxnum.f32(float 0.000000e+00, float [[ADD2A]])
; CHECK-NEXT:    [[LOG2A:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float [[TMP2]])
; CHECK-NEXT:    [[MUL2B:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[Z]], 0x3F9C71C720000000
; CHECK-NEXT:    [[ADD2B:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[MUL2B]], 2.000000e+00
; CHECK-NEXT:    [[TMP3:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.maxnum.f32(float 0.000000e+00, float [[ADD2B]])
; CHECK-NEXT:    [[LOG2B:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float [[TMP3]])
; CHECK-NEXT:    [[RET_0:%.*]] = fadd float [[LOG0A]], [[LOG0B]]
; CHECK-NEXT:    [[RET_1:%.*]] = fadd float [[RET_0]], [[LOG1]]
; CHECK-NEXT:    [[RET_2:%.*]] = fadd float [[RET_1]], [[LOG2A]]
; CHECK-NEXT:    [[RET_3:%.*]] = fadd float [[RET_2]], [[LOG2B]]
; CHECK-NEXT:    ret float [[RET_3]]
;
.entry:
  %mul0a = fmul reassoc nnan nsz arcp contract afn float %x, 0x3F9C71C720000000
  %sub0a = fsub reassoc nnan nsz arcp contract afn float 1.000000e+00, %mul0a
  %log0a = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float %sub0a)

  %mul0b = fmul reassoc nnan nsz arcp contract afn float %x, 0x3F9C71C720000000
  %sub0b = fsub reassoc nnan nsz arcp contract afn float %mul0b, 2.000000e+00
  %log0b = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float %sub0b)

  %mul1 = fmul reassoc nnan nsz arcp contract afn float %y, 0x3F9C71C720000000
  %sub1 = fsub reassoc nsz arcp contract afn float 1.000000e+00, %mul1
  %log1 = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float %sub1)

  %mul2a = fmul reassoc nnan nsz arcp contract afn float %z, 0x3F9C71C720000000
  %add2a = fadd reassoc nnan nsz arcp contract afn float 1.000000e+00, %mul2a
  %log2a = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float %add2a)

  %mul2b = fmul reassoc nnan nsz arcp contract afn float %z, 0x3F9C71C720000000
  %add2b = fadd reassoc nnan nsz arcp contract afn float %mul2b, 2.000000e+00
  %log2b = call reassoc nnan nsz arcp contract afn float @llvm.log2.f32(float %add2b)

  %ret.0 = fadd float %log0a, %log0b
  %ret.1 = fadd float %ret.0, %log1
  %ret.2 = fadd float %ret.1, %log2a
  %ret.3 = fadd float %ret.2, %log2b
  ret float %ret.3
}

declare float @llvm.log2.f32(float) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!0 = !{i32 6}
