
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - -passes="lgc-builder-replayer" %s | FileCheck -check-prefixes=CHECK %s

define dllexport void @vs() !lgc.shaderstage !1 {
.entry:
  ret void
}

define dllexport void @ps(i32 %value1) !lgc.shaderstage !2 {
.entry:
    call i32 @lgc.create.subgroup.broadcast.first.i32(i32 %value1)
    ret void
}

declare i32 @lgc.create.subgroup.broadcast.first.i32(...)

!llpc.fragment.mode = !{!0}
; waveOpsExcludeHelperLanes
!0 = !{i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0}
; VS/PS
!1 = !{i32 1}
!2 = !{i32 6}

; CHECK-LABEL: @ps(i32 %value1)
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @llvm.amdgcn.live.mask()
; CHECK-NEXT:    [[TMP1:%.*]] = and i1 [[TMP0]], true
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i64 [[TMP2]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.cttz.i64(i64 [[TMP2]], i1 true)
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.readlane.i32(i32 %value1, i32 [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = select i1 [[TMP3]], i32 0, i32 [[TMP6]]
; CHECK-NEXT:    ret void
;
