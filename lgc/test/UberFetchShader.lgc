; RUN: lgc -mcpu=gfx1030 -o - -passes=lgc-vertex-fetch %s | FileCheck --check-prefixes=CHECK %s

; CHECK-LABEL: define dllexport spir_func void @lgc.shader.VS.main()
; Get the descriptor of Uber Fetch Shader buffer
; CHECK: [[Desc:%[0-9]*]] = call i64 @lgc.load.user.data__i64(i32 4)

; CHECK: [[DESCPTR:%[0-9]*]] = inttoptr i64 [[Desc]] to ptr addrspace(4)
; location mask
; CHECK: load i64, ptr addrspace(4) [[DESCPTR]], align 8

; CHECK: [[UBERINFOPTR:%[0-9]*]] = getelementptr i64, ptr addrspace(4) [[DESCPTR]], i32 1
; CHECK: [[CURUBERINFOPTR:%[0-9]*]] = getelementptr <4 x i32>, ptr addrspace(4) [[UBERINFOPTR]], i32 0
; CHECK: [[UBERINFO:%[0-9]*]] = load <4 x i32>, ptr addrspace(4) [[CURUBERINFOPTR]], align 16

; Read the first dword: vertex attribute
; CHECK: [[attr:%[0-9]*]] = extractelement <4 x i32> [[UBERINFO]], i64 0

; Read the second dword: Attribute offset
; CHECK: [[offset:%[0-9]*]] = extractelement <4 x i32> [[UBERINFO]], i64 1

; Read the third dword: Reciprocal of instance divisor
; CHECK: [[divisor:%[0-9]*]] = extractelement <4 x i32> [[UBERINFO]], i64 2

; Read the fourth dword: Buffer format
; CHECK:[[format:%[0-9]*]] = extractelement <4 x i32> [[UBERINFO]], i64 3

; parse vertex attribute
; Attribute binding in vertex buffer table (attr & 0xFF)
; CHECK: and i32 [[attr]], 255
; Whether vertex input rate is per-instance (attr & 0x100)
; CHECK: and i32 [[attr]], 256
; Whether it is a packed format (attr & 0x400)
; CHECK: and i32 [[attr]], 1024
; Byte size per component (attr[12~15])
; CHECK: call i32 @llvm.amdgcn.ubfe.i32(i32 [[attr]], i32 12, i32 4)
; x channel mask (attr & 0x100000)
; CHECK: and i32 [[attr]], 65536
; y channel mask (attr & 0x200000)
; CHECK: and i32 [[attr]], 131072
; z channel mask (attr & 0x400000)
; CHECK: and i32 [[attr]], 262144
; w channel mask (attr & 0x800000)
; CHECK: and i32 [[attr]], 524288
; Whether is BGRA format (attr & 0x100000)
; CHECK: and i32 [[attr]], 1048576

; Load the whole vertex
; CHECK: call <4 x i32> @llvm.amdgcn.struct.buffer.load.format.v4i32(<4 x i32>
; Load per channel, 4 channels
; CHECK: call i32 @llvm.amdgcn.struct.buffer.load.format.i32(<4 x i32>
; CHECK: call i32 @llvm.amdgcn.struct.buffer.load.format.i32(<4 x i32>
; CHECK: call i32 @llvm.amdgcn.struct.buffer.load.format.i32(<4 x i32>
; CHECK: call i32 @llvm.amdgcn.struct.buffer.load.format.i32(<4 x i32>

define dllexport spir_func void @lgc.shader.VS.main() local_unnamed_addr #0 !spirv.ExecutionModel !10 !lgc.shaderstage !11 {
.entry:
  %0 = call <4 x float> @lgc.input.import.generic__v4f32(i1 false, i32 0, i32 0, i32 0, i32 poison) #1
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @lgc.input.import.generic__v4f32(i1, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @lgc.output.export.builtin.CullDistance.i32.a1f32(i32, [1 x float]) #0

; Function Attrs: nounwind
declare void @lgc.output.export.builtin.ClipDistance.i32.a1f32(i32, [1 x float]) #0

; Function Attrs: nounwind
declare void @lgc.output.export.builtin.PointSize.i32.f32(i32, float) #0

; Function Attrs: nounwind
declare void @lgc.output.export.builtin.Position.i32.v4f32(i32, <4 x float>) #0

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly willreturn }

!lgc.client = !{!0}
!lgc.options = !{!1}
!lgc.options.VS = !{!2}
!lgc.options.FS = !{!3}
!lgc.user.data.nodes = !{!4, !5}
!lgc.vertex.inputs = !{!6}
!lgc.color.export.formats = !{!7}
!lgc.input.assembly.state = !{!8}
!amdgpu.pal.metadata.msgpack = !{!9}

!0 = !{!"Vulkan"}
!1 = !{i32 -1078354702, i32 -917677750, i32 -891297186, i32 -500497739, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 256}
!2 = !{i32 225099809, i32 -29817230, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!3 = !{i32 2068278405, i32 41923448, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!4 = !{!"IndirectUserDataVaPtr", i32 8, i32 0, i32 0, i32 1, i32 4}
!5 = !{!"DescriptorBufferCompact", i32 10, i32 0, i32 1, i32 2, i32 -1, i32 5, i32 2}
!6 = !{i32 0, i32 0, i32 0, i32 12, i32 13, i32 7, i32 -1}
!7 = !{i32 10}
!8 = !{i32 4, i32 3}
!9 = !{!"\82\B0amdpal.pipelines\91\84\AA.registers\80\B0.spill_threshold\CE\FF\FF\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CF\FE\\\EC.\94m\CC0\CFT<\CD\D2rp1\F6\AD.llpc_version\A457.0\AEamdpal.version\92\02\03"}
!10 = !{i32 0}
!11 = !{i32 1}
!12 = !{i32 4}
!13 = !{i32 6}
