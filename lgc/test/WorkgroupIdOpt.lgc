; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
; RUN: lgc -mcpu=gfx1100 -passes=lgc-mutate-entry-point -o - %s | FileCheck --check-prefixes=CHECK %s
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9-p32:32:32"
target triple = "amdgcn--amdpal"

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !spirv.ExecutionModel !3 !lgc.shaderstage !4 {
; CHECK-LABEL: define dllexport amdgpu_cs void @lgc.shader.CS.main(
; CHECK-SAME: i32 inreg noundef [[GLOBALTABLE:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[DUMMYINIT2:%.*]], i32 inreg noundef [[DUMMYINIT3:%.*]], i32 inreg noundef [[DUMMYINIT4:%.*]], i32 inreg noundef [[DUMMYINIT5:%.*]], i32 inreg noundef [[DUMMYINIT6:%.*]], i32 inreg noundef [[DUMMYINIT7:%.*]], i32 inreg noundef [[DUMMYINIT8:%.*]], i32 inreg noundef [[DUMMYINIT9:%.*]], i32 inreg noundef [[DUMMYINIT10:%.*]], i32 inreg noundef [[DUMMYINIT11:%.*]], i32 inreg noundef [[DUMMYINIT12:%.*]], i32 inreg noundef [[DUMMYINIT13:%.*]], i32 inreg noundef [[DUMMYINIT14:%.*]], i32 inreg noundef [[DUMMYINIT15:%.*]], <2 x i32> inreg noundef [[WORKGROUPID2:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META5:![0-9]+]] !lgc.shaderstage [[META6:![0-9]+]] {
; CHECK-NEXT:  [[_ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[USERDATA0]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP4]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP4]], i32 -1) ]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP4]], i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = call ptr addrspace(7) @lgc.buffer.load.desc.to.ptr(ptr addrspace(4) [[TMP5]], i1 false, i1 false, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = and i32 [[LOCALINVOCATIONID]], 1023
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <3 x i32> poison, i32 [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = lshr i32 [[LOCALINVOCATIONID]], 10
; CHECK-NEXT:    [[TMP10:%.*]] = and i32 [[TMP9]], 1023
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <3 x i32> [[TMP8]], i32 [[TMP10]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = lshr i32 [[TMP9]], 10
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <3 x i32> [[TMP11]], i32 [[TMP12]], i64 2
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <3 x i32> [[TMP13]], i32 0, i64 2
; CHECK-NEXT:    [[TMP15:%.*]] = call <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32> [[TMP14]], i32 0) #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <3 x i32> [[TMP15]], i64 2
; CHECK-NEXT:    [[TMP17:%.*]] = mul i32 3, [[TMP16]]
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <3 x i32> [[TMP15]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP17]], [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = mul i32 2, [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <3 x i32> [[TMP15]], i64 0
; CHECK-NEXT:    [[TMP22:%.*]] = add i32 [[TMP20]], [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = and i32 [[TMP22]], 15
; CHECK-NEXT:    [[TMP24:%.*]] = lshr i32 [[TMP22]], 4
; CHECK-NEXT:    [[TMP25:%.*]] = icmp ult i32 [[TMP22]], 16
; CHECK-NEXT:    br i1 [[TMP25]], label %[[IF0_THEN:.*]], label %[[IF0_ELSE:.*]]
; CHECK:       [[IF0_THEN]]:
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <2 x i32> [[WORKGROUPID2]], i64 0
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <2 x i32> [[WORKGROUPID2]], i64 1
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr <{ [32 x i32] }>, ptr addrspace(7) [[TMP6]], i32 0, i32 0, i32 [[TMP22]]
; CHECK-NEXT:    store i32 [[TMP28]], ptr addrspace(7) [[TMP29]], align 4
; CHECK-NEXT:    br label %[[IF0_END:.*]]
; CHECK:       [[IF0_ELSE]]:
; CHECK-NEXT:    [[TMP30:%.*]] = extractelement <2 x i32> [[WORKGROUPID2]], i64 0
; CHECK-NEXT:    [[TMP31:%.*]] = extractelement <2 x i32> [[WORKGROUPID2]], i64 1
; CHECK-NEXT:    [[TMP32:%.*]] = add i32 [[TMP30]], [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr <{ [32 x i32] }>, ptr addrspace(7) [[TMP6]], i32 0, i32 0, i32 [[TMP22]]
; CHECK-NEXT:    store i32 [[TMP32]], ptr addrspace(7) [[TMP33]], align 4
; CHECK-NEXT:    br label %[[IF0_END]]
; CHECK:       [[IF0_END]]:
; CHECK-NEXT:    [[WORKGROUPID1:%.*]] = extractelement <2 x i32> [[WORKGROUPID2]], i64 0
; CHECK-NEXT:    [[TMP40:%.*]] = extractelement <2 x i32> [[WORKGROUPID2]], i64 1
; CHECK-NEXT:    br i1 [[TMP25]], label %[[IF1_THEN:.*]], label %[[IF1_ELSE:.*]]
; CHECK:       [[IF1_THEN]]:
; CHECK-NEXT:    [[TMP34:%.*]] = add i32 [[TMP22]], 1
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr <{ [32 x i32] }>, ptr addrspace(7) [[TMP6]], i32 0, i32 0, i32 [[TMP34]]
; CHECK-NEXT:    [[TMP36:%.*]] = add i32 [[WORKGROUPID1]], 5
; CHECK-NEXT:    store i32 [[TMP36]], ptr addrspace(7) [[TMP35]], align 4
; CHECK-NEXT:    br label %[[IF1_END:.*]]
; CHECK:       [[IF1_ELSE]]:
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[TMP22]], 2
; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr <{ [32 x i32] }>, ptr addrspace(7) [[TMP6]], i32 0, i32 0, i32 [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = add i32 [[WORKGROUPID1]], 10
; CHECK-NEXT:    store i32 [[TMP39]], ptr addrspace(7) [[TMP38]], align 4
; CHECK-NEXT:    br label %[[IF1_END]]
; CHECK:       [[IF1_END]]:
; CHECK-NEXT:    ret void
;
.entry:
  %0 = call i64 @llvm.amdgcn.s.getpc()
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = call i32 @lgc.load.user.data__i32(i32 0)
  %3 = insertelement <2 x i32> %1, i32 %2, i64 0
  %4 = bitcast <2 x i32> %3 to i64
  %5 = inttoptr i64 %4 to ptr addrspace(4)
  call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) %5, i32 4), "dereferenceable"(ptr addrspace(4) %5, i32 -1) ]
  %6 = getelementptr i8, ptr addrspace(4) %5, i32 0
  %7 = call ptr addrspace(7) @lgc.buffer.load.desc.to.ptr(ptr addrspace(4) %6, i1 false, i1 false, i1 false)
  %8 = call i32 @lgc.shader.input.LocalInvocationId(i32 50) #2
  %9 = and i32 %8, 1023
  %10 = insertelement <3 x i32> poison, i32 %9, i64 0
  %11 = lshr i32 %8, 10
  %12 = and i32 %11, 1023
  %13 = insertelement <3 x i32> %10, i32 %12, i64 1
  %14 = lshr i32 %11, 10
  %15 = insertelement <3 x i32> %13, i32 %14, i64 2
  %16 = insertelement <3 x i32> %15, i32 0, i64 2
  %17 = call <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32> %16, i32 0) #2
  %18 = extractelement <3 x i32> %17, i64 2
  %19 = mul i32 3, %18
  %20 = extractelement <3 x i32> %17, i64 1
  %21 = add i32 %19, %20
  %22 = mul i32 2, %21
  %23 = extractelement <3 x i32> %17, i64 0
  %24 = add i32 %22, %23
  %25 = and i32 %24, 15
  %26 = lshr i32 %24, 4
  %27 = icmp ult i32 %24, 16
  br i1 %27, label %if0.then, label %if0.else

if0.then:                                         ; preds = %.entry
  %28 = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #2
  %29 = extractelement <3 x i32> %28, i64 0
  %30 = extractelement <3 x i32> %28, i64 1
  %31 = add i32 %29, %30
  %32 = getelementptr <{ [32 x i32] }>, ptr addrspace(7) %7, i32 0, i32 0, i32 %24
  store i32 %31, ptr addrspace(7) %32, align 4
  br label %if0.end

if0.else:                                         ; preds = %.entry
  %33 = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #2
  %34 = extractelement <3 x i32> %33, i64 0
  %35 = extractelement <3 x i32> %33, i64 1
  %36 = add i32 %34, %35
  %37 = getelementptr <{ [32 x i32] }>, ptr addrspace(7) %7, i32 0, i32 0, i32 %24
  store i32 %36, ptr addrspace(7) %37, align 4
  br label %if0.end

if0.end:                                          ; preds = %if0.else, %if0.then
  %38 = call <3 x i32> @lgc.shader.input.WorkgroupId(i32 0) #2
  br i1 %27, label %if1.then, label %if1.else

if1.then:                                         ; preds = %if0.end
  %40 = extractelement <3 x i32> %38, i64 0
  %41 = add i32 %24, 1
  %42 = getelementptr <{ [32 x i32] }>, ptr addrspace(7) %7, i32 0, i32 0, i32 %41
  %43 = add i32 %40, 5
  store i32 %43, ptr addrspace(7) %42, align 4
  br label %if1.end

if1.else:                                         ; preds = %if0.end
  %44 = extractelement <3 x i32> %38, i64 0
  %45 = add i32 %24, 2
  %46 = getelementptr <{ [32 x i32] }>, ptr addrspace(7) %7, i32 0, i32 0, i32 %45
  %47 = add i32 %44, 10
  store i32 %47, ptr addrspace(7) %46, align 4
  br label %if1.end

if1.end:                                          ; preds = %if1.else, %if1.then
  ret void
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.load.buffer.desc(i64, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind memory(none)
declare i32 @lgc.shader.input.LocalInvocationId(i32) #2

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.reconfigure.local.invocation.id(<3 x i32>, i32) #2

; Function Attrs: nounwind memory(none)
declare <3 x i32> @lgc.shader.input.WorkgroupId(i32) #2

; Function Attrs: nounwind willreturn memory(none)
declare i32 @lgc.load.user.data__i32(i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i64 @llvm.amdgcn.s.getpc() #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #4

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.buffer.load.desc.to.ptr(ptr addrspace(4), i1, i1, i1) #1

attributes #0 = { nounwind "denormal-fp-math-f32"="preserve-sign" "target-features"=",+wavefrontsize32" }
attributes #1 = { nounwind willreturn memory(none) }
attributes #2 = { nounwind memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }

!llpc.compute.mode = !{!0}
!lgc.user.data.nodes = !{!1, !2}

!0 = !{i32 2, i32 3, i32 1}
!1 = !{!"DescriptorTableVaPtr", i32 7, i32 128, i32 0, i32 1, i32 1}
!2 = !{!"DescriptorBuffer", i32 6, i32 128, i32 0, i32 4, i64 0, i32 0, i32 4}
!3 = !{i32 5}
!4 = !{i32 7}
;.
; CHECK: [[META5]] = !{i32 5}
; CHECK: [[META6]] = !{i32 7}
;.
