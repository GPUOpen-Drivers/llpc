; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RUN: lgc -mcpu=gfx1010 -print-after=lgc-builder-replayer -o - %s 2>&1 | FileCheck --check-prefixes=CHECK %s
; ModuleID = 'lgcPipeline'
source_filename = "lgcPipeline"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8-p32:32:32"
target triple = "amdgcn--amdpal"

; Function Attrs: nounwind
define dllexport spir_func void @lgc.shader.FS.main() local_unnamed_addr #0 !spirv.ExecutionModel !22 !lgc.shaderstage !23 {
; CHECK-LABEL: define dllexport spir_func void @lgc.shader.FS.main(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META22:![0-9]+]] !lgc.shaderstage [[META23:![0-9]+]] {
; CHECK-NEXT:  [[_ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast i64 [[TMP4]] to <2 x i32>
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP6]] to <2 x i32>
; CHECK-NEXT:    [[TMP8:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i64 [[TMP8]] to <2 x i32>
; CHECK-NEXT:    [[TMP10:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i64 [[TMP10]] to <2 x i32>
; CHECK-NEXT:    [[TMP12:%.*]] = call ptr addrspace(4) @lgc.user.data(i32 28)
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 (...) @lgc.input.import.interpolated__i32(i1 false, i32 3, i32 0, i32 0, i32 poison, i32 1, i32 poison)
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr addrspace(4) [[TMP12]], align 4
; CHECK-NEXT:    br label %[[BB15:.*]]
; CHECK:       [[BB15]]:
; CHECK-NEXT:    [[DOT010:%.*]] = phi <4 x float> [ zeroinitializer, [[DOTENTRY:%.*]] ], [ [[TMP94:%.*]], %[[TMP19:.*]] ]
; CHECK-NEXT:    [[DOT09:%.*]] = phi <4 x float> [ zeroinitializer, [[DOTENTRY]] ], [ [[TMP92:%.*]], %[[TMP19]] ]
; CHECK-NEXT:    [[DOT0:%.*]] = phi i32 [ [[TMP14]], [[DOTENTRY]] ], [ [[TMP95:%.*]], %[[TMP19]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds <{ i32, i32 }>, ptr addrspace(4) [[TMP12]], i64 0, i32 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr addrspace(4) [[TMP16]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = icmp slt i32 [[DOT0]], [[TMP17]]
; CHECK-NEXT:    [[COND_FREEZE:%.*]] = freeze i1 [[TMP18]]
; CHECK-NEXT:    br i1 [[COND_FREEZE]], label %[[TMP19]], label %[[BB81:.*]]
; CHECK:       [[TMP19]]:
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @lgc.load.user.data__i32(i32 40)
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <2 x i32> [[TMP11]], i32 [[TMP20]], i64 0
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast <2 x i32> [[TMP21]] to i64
; CHECK-NEXT:    [[TMP23:%.*]] = inttoptr i64 [[TMP22]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP23]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP23]], i32 -1) ]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP23]], i32 0
; CHECK-NEXT:    [[TMP25:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP24]], align 4, !invariant.load [[META24:![0-9]+]]
; CHECK-NEXT:    [[TMP26:%.*]] = call <4 x i32> @llvm.amdgcn.image.load.1d.v4i32.i32.v8i32(i32 15, i32 [[DOT0]], <8 x i32> [[TMP25]], i32 0, i32 0), !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <4 x i32> [[TMP26]], i64 0
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @lgc.load.user.data__i32(i32 36)
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP28]], i64 0
; CHECK-NEXT:    [[TMP30:%.*]] = bitcast <2 x i32> [[TMP29]] to i64
; CHECK-NEXT:    [[TMP31:%.*]] = inttoptr i64 [[TMP30]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP31]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP31]], i32 -1) ]
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP31]], i32 16
; CHECK-NEXT:    [[TMP33:%.*]] = mul i32 [[TMP27]], 32
; CHECK-NEXT:    [[TMP34:%.*]] = sext i32 [[TMP33]] to i64
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP32]], i64 [[TMP34]]
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @lgc.load.user.data__i32(i32 36)
; CHECK-NEXT:    [[TMP37:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP36]], i64 0
; CHECK-NEXT:    [[TMP38:%.*]] = bitcast <2 x i32> [[TMP37]] to i64
; CHECK-NEXT:    [[TMP39:%.*]] = inttoptr i64 [[TMP38]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP39]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP39]], i32 -1) ]
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP39]], i32 0
; CHECK-NEXT:    [[TMP41:%.*]] = ptrtoint ptr addrspace(4) [[TMP35]] to i32
; CHECK-NEXT:    [[TMP42:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP40]], align 4, !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP54:%.*]] = call <4 x i32> @llvm.amdgcn.readfirstlane.v4i32(<4 x i32> [[TMP42]])
; CHECK-NEXT:    [[TMP43:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP41]])
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP43]], i32 [[TMP41]])
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <2 x i32> [[TMP5]], i32 [[TMP46]], i64 0
; CHECK-NEXT:    [[TMP51:%.*]] = bitcast <2 x i32> [[TMP50]] to i64
; CHECK-NEXT:    [[TMP52:%.*]] = inttoptr i64 [[TMP51]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP53:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP52]], align 4, !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP55:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32.v8i32.v4i32(i32 15, float 0.000000e+00, float 0.000000e+00, <8 x i32> [[TMP53]], <4 x i32> [[TMP54]], i1 false, i32 0, i32 0)
; CHECK-NEXT:    [[TMP56:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.waterfall.end.v4f32(i32 [[TMP43]], <4 x float> [[TMP55]])
; CHECK-NEXT:    [[TMP57:%.*]] = mul i32 [[TMP13]], 32
; CHECK-NEXT:    [[TMP58:%.*]] = sext i32 [[TMP57]] to i64
; CHECK-NEXT:    [[TMP59:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP32]], i64 [[TMP58]]
; CHECK-NEXT:    [[TMP60:%.*]] = ptrtoint ptr addrspace(4) [[TMP59]] to i32
; CHECK-NEXT:    [[TMP61:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP40]], align 4, !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP73:%.*]] = call <4 x i32> @llvm.amdgcn.readfirstlane.v4i32(<4 x i32> [[TMP61]])
; CHECK-NEXT:    [[TMP62:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP60]])
; CHECK-NEXT:    [[TMP65:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP62]], i32 [[TMP60]])
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP65]], i64 0
; CHECK-NEXT:    [[TMP70:%.*]] = bitcast <2 x i32> [[TMP69]] to i64
; CHECK-NEXT:    [[TMP71:%.*]] = inttoptr i64 [[TMP70]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP72:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP71]], align 4, !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP74:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32.v8i32.v4i32(i32 15, float 0.000000e+00, float 0.000000e+00, <8 x i32> [[TMP72]], <4 x i32> [[TMP73]], i1 false, i32 0, i32 0)
; CHECK-NEXT:    [[TMP75:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.waterfall.end.v4f32(i32 [[TMP62]], <4 x float> [[TMP74]])
; CHECK-NEXT:    [[TMP76:%.*]] = ptrtoint ptr addrspace(4) [[TMP35]] to i32
; CHECK-NEXT:    [[TMP67:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP40]], align 4, !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP89:%.*]] = call <4 x i32> @llvm.amdgcn.readfirstlane.v4i32(<4 x i32> [[TMP67]])
; CHECK-NEXT:    [[TMP78:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP76]])
; CHECK-NEXT:    [[TMP81:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP78]], i32 [[TMP76]])
; CHECK-NEXT:    [[TMP85:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP81]], i64 0
; CHECK-NEXT:    [[TMP86:%.*]] = bitcast <2 x i32> [[TMP85]] to i64
; CHECK-NEXT:    [[TMP87:%.*]] = inttoptr i64 [[TMP86]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP88:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP87]], align 4, !invariant.load [[META24]]
; CHECK-NEXT:    [[TMP90:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32.v8i32.v4i32(i32 15, float 0.000000e+00, float 0.000000e+00, <8 x i32> [[TMP88]], <4 x i32> [[TMP89]], i1 false, i32 0, i32 0)
; CHECK-NEXT:    [[TMP91:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.waterfall.end.v4f32(i32 [[TMP78]], <4 x float> [[TMP90]])
; CHECK-NEXT:    [[TMP92]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[DOT09]], [[TMP91]]
; CHECK-NEXT:    [[TMP93:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP56]], [[TMP75]]
; CHECK-NEXT:    [[TMP94]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[DOT010]], [[TMP93]]
; CHECK-NEXT:    [[TMP95]] = add i32 [[DOT0]], 1
; CHECK-NEXT:    br label %[[BB15]], !llvm.loop [[LOOP25:![0-9]+]]
; CHECK:       [[BB81]]:
; CHECK-NEXT:    ret void
;
.entry:
  %0 = call ptr addrspace(4) (...) @lgc.create.load.push.constants.ptr.p4()
  %1 = call i32 (...) @lgc.create.read.generic.input__i32(i32 3, i32 0, i32 0, i32 0, i32 17, i32 poison)
  %2 = load i32, ptr addrspace(4) %0, align 4
  br label %3

3:                                                ; preds = %7, %.entry
  %.010 = phi <4 x float> [ zeroinitializer, %.entry ], [ %30, %7 ]
  %.09 = phi <4 x float> [ zeroinitializer, %.entry ], [ %28, %7 ]
  %.0 = phi i32 [ %2, %.entry ], [ %31, %7 ]
  %4 = getelementptr inbounds <{ i32, i32 }>, ptr addrspace(4) %0, i64 0, i32 1
  %5 = load i32, ptr addrspace(4) %4, align 4
  %6 = icmp slt i32 %.0, %5
  %cond.freeze = freeze i1 %6
  br i1 %cond.freeze, label %7, label %32

7:                                                ; preds = %3
  %8 = call ptr addrspace(4) (...) @lgc.create.get.desc.ptr.p4(i32 4, i32 4, i64 1, i32 12)
  %9 = call i32 (...) @lgc.create.get.desc.stride__i32(i32 4, i32 4, i64 1, i32 12)
  %11 = call <4 x i32> (...) @lgc.create.image.load.v4i32(i32 0, i32 1536, ptr addrspace(4) %8, i32 %.0)
  %12 = extractelement <4 x i32> %11, i64 0
  %13 = call ptr addrspace(4) (...) @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 6)
  %14 = call i32 (...) @lgc.create.get.desc.stride__i32(i32 1, i32 1, i64 0, i32 6)
  %15 = mul i32 %12, %14
  %16 = sext i32 %15 to i64
  %17 = getelementptr i8, ptr addrspace(4) %13, i64 %16
  %19 = call ptr addrspace(4) (...) @lgc.create.get.desc.ptr.p4(i32 2, i32 2, i64 0, i32 5)
  %21 = call reassoc nnan nsz arcp contract afn <4 x float> (...) @lgc.create.image.sample.v4f32(i32 1, i32 24, ptr addrspace(4) %17, ptr addrspace(4) %19, i32 1, <2 x float> zeroinitializer)
  %22 = mul i32 %1, %14
  %23 = sext i32 %22 to i64
  %24 = getelementptr i8, ptr addrspace(4) %13, i64 %23
  %26 = call reassoc nnan nsz arcp contract afn <4 x float> (...) @lgc.create.image.sample.v4f32(i32 1, i32 24, ptr addrspace(4) %24, ptr addrspace(4) %19, i32 1, <2 x float> zeroinitializer)
  %27 = call reassoc nnan nsz arcp contract afn <4 x float> (...) @lgc.create.image.sample.v4f32(i32 1, i32 24, ptr addrspace(4) %17, ptr addrspace(4) %19, i32 1, <2 x float> zeroinitializer)
  %28 = fadd reassoc nnan nsz arcp contract afn <4 x float> %.09, %27
  %29 = fadd reassoc nnan nsz arcp contract afn <4 x float> %21, %26
  %30 = fadd reassoc nnan nsz arcp contract afn <4 x float> %.010, %29
  %31 = add i32 %.0, 1
  br label %3, !llvm.loop !25

32:                                               ; preds = %3
  ret void
}

; Function Attrs: nounwind willreturn memory(read)
declare ptr addrspace(4) @lgc.create.load.push.constants.ptr.p4(...) local_unnamed_addr #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @lgc.create.read.generic.input__i32(...) local_unnamed_addr #1

; Function Attrs: nounwind memory(none)
declare ptr addrspace(4) @lgc.create.get.desc.ptr.p4(...) local_unnamed_addr #2

; Function Attrs: nounwind memory(none)
declare i32 @lgc.create.get.desc.stride__i32(...) local_unnamed_addr #2

; Function Attrs: nounwind willreturn memory(read)
declare <4 x i32> @lgc.create.image.load.v4i32(...) local_unnamed_addr #1

; Function Attrs: nounwind willreturn memory(read)
declare <4 x float> @lgc.create.image.sample.v4f32(...) local_unnamed_addr #1

attributes #0 = { nounwind "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { nounwind willreturn memory(read) }
attributes #2 = { nounwind memory(none) }

!lgc.client = !{!0}
!lgc.options = !{!1}
!lgc.options.VS = !{!2}
!lgc.options.FS = !{!3}
!lgc.user.data.nodes = !{!4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15}
!lgc.vertex.inputs = !{!16, !17, !18}
!lgc.color.export.formats = !{!19}
!lgc.rasterizer.state = !{!20}
!amdgpu.pal.metadata.msgpack = !{!21}

!0 = !{!"Vulkan"}
!1 = !{i32 1397006593, i32 1762399868, i32 679484448, i32 1745956893, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 272, i32 0, i32 0, i32 1, i32 256, i32 256, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16777216}
!2 = !{i32 1156202838, i32 -1602642692, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!3 = !{i32 -1603553139, i32 446675175, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
!4 = !{!"IndirectUserDataVaPtr", i32 8, i32 2, i32 0, i32 1, i32 4}
!5 = !{!"DescriptorTableVaPtr", i32 7, i32 66, i32 11, i32 1, i32 3}
!6 = !{!"DescriptorBufferCompact", i32 10, i32 66, i32 0, i32 2, i64 93, i32 17, i32 2}
!7 = !{!"DescriptorBuffer", i32 6, i32 66, i32 2, i32 4, i64 93, i32 0, i32 4}
!8 = !{!"DescriptorBuffer", i32 6, i32 66, i32 6, i32 4, i64 93, i32 1, i32 4}
!9 = !{!"StreamOutTableVaPtr", i32 11, i32 4, i32 3, i32 1, i32 0}
!10 = !{!"PushConst", i32 9, i32 66, i32 7, i32 2, i64 4294967295, i32 0, i32 4}
!11 = !{!"DescriptorTableVaPtr", i32 7, i32 66, i32 9, i32 1, i32 2}
!12 = !{!"DescriptorSampler", i32 2, i32 66, i32 0, i32 4, i64 0, i32 5, i32 4}
!13 = !{!"DescriptorResource", i32 1, i32 66, i32 4, i32 32768, i64 0, i32 6, i32 8}
!14 = !{!"DescriptorTableVaPtr", i32 7, i32 66, i32 10, i32 1, i32 1}
!15 = !{!"DescriptorTexelBuffer", i32 4, i32 66, i32 0, i32 4, i64 1, i32 12, i32 4}
!16 = !{i32 0, i32 0, i32 0, i32 40, i32 14, i32 7}
!17 = !{i32 1, i32 0, i32 16, i32 40, i32 11, i32 7}
!18 = !{i32 2, i32 0, i32 24, i32 40, i32 14, i32 5}
!19 = !{i32 14, i32 7, i32 0, i32 0, i32 15}
!20 = !{i32 0, i32 0, i32 0, i32 1}
!21 = !{!"\82\B0amdpal.pipelines\91\83\B0.spill_threshold\CD\FF\FF\B0.user_data_limit\00\AF.xgl_cache_info\82\B3.128_bit_cache_hash\92\CF\9BN7\81A[\8A\DB\CF\9Daz\E2A\8F\88\AD\AD.llpc_version\A470.1\AEamdpal.version\92\03\00"}
!22 = !{i32 4}
!23 = !{i32 6}
!24 = !{}
!25 = distinct !{!25}
;.
; CHECK: [[META22]] = !{i32 4}
; CHECK: [[META23]] = !{i32 6}
; CHECK: [[META24]] = !{}
; CHECK: [[LOOP25]] = distinct !{[[LOOP25]]}
;.
