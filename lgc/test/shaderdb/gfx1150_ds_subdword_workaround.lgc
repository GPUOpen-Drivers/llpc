
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - --mcpu=gfx1100 -filetype=asm %s | FileCheck -check-prefixes=CHECK %s
; RUN: lgc -o - --mcpu=gfx1150 -filetype=asm %s | FileCheck -check-prefixes=CHECK %s
; RUN: lgc -o - -workaround-subdword-write --mcpu=gfx1150 -filetype=asm %s | FileCheck -check-prefixes=WAR %s

define dllexport spir_func void @store32(i32 %value, i32 %index) !lgc.shaderstage !0 {
.entry:
  %gep = getelementptr [16384 x i32], ptr addrspace(3) @Lds, i32 0, i32 %index
  store i32 %value, ptr addrspace(3) %gep, align 4
  ret void
}

define dllexport spir_func void @store16(i16 %value, i32 %index) !lgc.shaderstage !0 {
.entry:
  %gep = getelementptr [16384 x i32], ptr addrspace(3) @Lds, i32 0, i32 %index
  store i16 %value, ptr addrspace(3) %gep, align 2
  ret void
}

define dllexport spir_func void @store8(i8 %value, i32 %index) !lgc.shaderstage !0 {
.entry:
  %gep = getelementptr [16384 x i32], ptr addrspace(3) @Lds, i32 0, i32 %index
  store i8 %value, ptr addrspace(3) %gep, align 1
  ret void
}

@Lds = external addrspace(3) global [16384 x i32], align 4

attributes #0 = { nounwind }

; ShaderStage::Compute
!0 = !{i32 7}

; Setting Threadgroup Dimensions to 64 x 1 x 1
!llpc.compute.mode = !{!1}
!1 = !{i32 64, i32 1, i32 1}
; REQUIRES: do-not-run-me

; CHECK-LABEL: amdgpu_cs_main:
; CHECK:         v_lshlrev_b32_e32 v1, 2, v1
; CHECK-NEXT:    ds_store_b32 v1, v0
; CHECK-NEXT:    s_endpgm
;
; CHECK-LABEL: amdgpu_cs_main.1:
; CHECK:         v_lshlrev_b32_e32 v1, 2, v1
; CHECK-NEXT:    ds_store_b16 v1, v0
; CHECK-NEXT:    s_endpgm
;
; CHECK-LABEL: amdgpu_cs_main.2:
; CHECK:         v_lshlrev_b32_e32 v1, 2, v1
; CHECK-NEXT:    ds_store_b8 v1, v0
; CHECK-NEXT:    s_endpgm
;
; WAR-LABEL: amdgpu_cs_main:
; WAR:         v_lshlrev_b32_e32 v1, 2, v1
; WAR-NEXT:    ds_store_b32 v1, v0
; WAR-NEXT:    s_endpgm
;
; WAR-LABEL: amdgpu_cs_main.1:
; WAR:         v_lshlrev_b32_e32 v1, 2, v1
; WAR-NEXT:    s_mov_b64 s[0:1], exec
; WAR-NEXT:  .LBB1_1:
; WAR-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; WAR-NEXT:    v_readfirstlane_b32 s0, v1
; WAR-NEXT:    v_cmp_eq_u32_e64 s[0:1], s0, v1
; WAR-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; WAR-NEXT:    s_and_saveexec_b64 s[0:1], s[0:1]
; WAR-NEXT:    ds_store_b16 v1, v0
; WAR-NEXT:    s_xor_b64 exec, exec, s[0:1]
; WAR-NEXT:    s_cbranch_execnz .LBB1_1
; WAR-NEXT:    s_endpgm
;
; WAR-LABEL: amdgpu_cs_main.2:
; WAR:         v_lshlrev_b32_e32 v1, 2, v1
; WAR-NEXT:    s_mov_b64 s[0:1], exec
; WAR-NEXT:  .LBB2_1:
; WAR-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; WAR-NEXT:    v_readfirstlane_b32 s0, v1
; WAR-NEXT:    v_cmp_eq_u32_e64 s[0:1], s0, v1
; WAR-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; WAR-NEXT:    s_and_saveexec_b64 s[0:1], s[0:1]
; WAR-NEXT:    ds_store_b8 v1, v0
; WAR-NEXT:    s_xor_b64 exec, exec, s[0:1]
; WAR-NEXT:    s_cbranch_execnz .LBB2_1
; WAR-NEXT:    s_endpgm
