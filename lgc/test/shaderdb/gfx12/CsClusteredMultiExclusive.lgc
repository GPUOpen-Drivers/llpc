
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc -o - --mcpu=gfx1201 -filetype=asm %s | FileCheck -check-prefixes=CHECK %s
; REQUIRES: do-not-run-me
; ModuleID = 'lgcPipeline'
source_filename = "LLPC module"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn--amdpal"

define dllexport void @"lgc.shader.CS.AD79A66CC9667A89:CSMain"() !lgc.shaderstage !10 {
  %1 = call <3 x i32> (...) @lgc.create.read.builtin.input.v3i32(i32 27, i32 0, i32 poison, i32 poison)
  %2 = extractelement <3 x i32> %1, i64 0
  %3 = lshr i32 %2, 2
  %4 = call <4 x i32> (...) @lgc.create.subgroup.partition.v4i32(i32 %3)
  %5 = shufflevector <4 x i32> %4, <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %6 = call i32 (...) @lgc.create.subgroup.clustered.multi.exclusive.i32(i32 0, i32 %3, <4 x i32> %5)
  %7 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 4294967296, i32 0, i32 0, i32 267)
  %8 = shl i32 %2, 2
  %9 = sext i32 %8 to i64
  %10 = getelementptr i8, ptr addrspace(7) %7, i64 %9
  store i32 %6, ptr addrspace(7) %10, align 4
  ret void
}

; Function Attrs: nounwind willreturn memory(read)
declare <3 x i32> @lgc.create.read.builtin.input.v3i32(...) #0

; Function Attrs: convergent nounwind
declare <4 x i32> @lgc.create.subgroup.partition.v4i32(...) #1

; Function Attrs: convergent nounwind
declare i32 @lgc.create.subgroup.clustered.multi.exclusive.i32(...) #1

; Function Attrs: nounwind willreturn memory(read)
declare ptr addrspace(7) @lgc.load.buffer.desc(i64, i32, i32, i32) local_unnamed_addr #0

attributes #0 = { nounwind willreturn memory(read) }
attributes #1 = { convergent nounwind }

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}
!lgc.user.data.nodes = !{!4, !5, !6, !7, !8, !9}

!0 = !{i32 32, i32 1, i32 1}
!1 = !{!"DX12"}
!2 = !{i32 -1503530489, i32 546690824, i32 1491131267, i32 955349830, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 256, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 256}
!3 = !{i32 -1503530481, i32 546690824, i32 1491131267, i32 955349830, i32 0, i32 0, i32 0, i32 -1, i32 -1}
!4 = !{!"DescriptorTableVaPtr", i32 7, i32 255, i32 3, i32 1, i32 2}
!5 = !{!"DescriptorMutable", i32 17, i32 0, i32 0, i32 16, i64 0, i32 0, i32 8}
!6 = !{!"DescriptorMutable", i32 17, i32 0, i32 16, i32 8, i64 4294967296, i32 0, i32 8}
!7 = !{!"DescriptorTableVaPtr", i32 7, i32 0, i32 0, i32 1, i32 2}
!8 = !{!"DescriptorConstBufferCompact", i32 15, i32 0, i32 0, i32 2, i64 10737355485, i32 1, i32 2}
!9 = !{!"DescriptorMutable", i32 17, i32 0, i32 2, i32 8, i64 6442388189, i32 0, i32 4}
!10 = !{i32 7}
; CHECK-LABEL: amdgpu_cs_main:
; CHECK:         v_and_b32_e32 v1, 0x3ff, v0
; CHECK-NEXT:    v_bfe_u32 v3, v0, 2, 8
; CHECK-NEXT:    s_mov_b32 s0, s1
; CHECK-NEXT:    s_mov_b32 s1, 0
; CHECK-NEXT:  .LBB0_1:
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_readfirstlane_b32 s2, v3
; CHECK-NEXT:    v_cmp_eq_u32_e64 s3, s2, v3
; CHECK-NEXT:    v_mov_b32_e32 v2, s2
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_1) | instid1(SALU_CYCLE_1)
; CHECK-NEXT:    v_mov_b32_e32 v0, s3
; CHECK-NEXT:    s_or_b32 s1, s3, s1
; CHECK-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s1
; CHECK-NEXT:    s_cbranch_execnz .LBB0_1
; CHECK-NEXT:    s_or_b32 exec_lo, exec_lo, s1
; CHECK-NEXT:    v_mbcnt_lo_u32_b32 v3, -1, 0
; CHECK-NEXT:    s_getpc_b64 s[2:3]
; CHECK-NEXT:    v_lshlrev_b32_e32 v1, 2, v1
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_sext_i32_i16 s3, s3
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_mov_b32 s1, s3
; CHECK-NEXT:    v_bfe_u32 v4, v0, 0, v3
; CHECK-NEXT:    s_load_b128 s[0:3], s[0:1], 0x40
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_2) | instid1(VALU_DEP_3)
; CHECK-NEXT:    v_clz_i32_u32_e32 v5, v4
; CHECK-NEXT:    v_cmp_ne_u32_e32 vcc_lo, 0, v4
; CHECK-NEXT:    v_and_b32_e32 v4, 28, v3
; CHECK-NEXT:    v_lshlrev_b32_e32 v5, 2, v5
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_add_nc_u32_e32 v4, -4, v4
; CHECK-NEXT:    v_xor_b32_e32 v5, 0x7c, v5
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2)
; CHECK-NEXT:    v_lshlrev_b32_e64 v4, v4, 15
; CHECK-NEXT:    ds_bpermute_b32 v2, v5, v2
; CHECK-NEXT:    v_add_nc_u32_e32 v5, -1, v3
; CHECK-NEXT:    v_and_b32_e32 v4, v4, v0
; CHECK-NEXT:    s_wait_kmcnt 0x0
; CHECK-NEXT:    s_bfe_u32 s4, s1, 0xe0010
; CHECK-NEXT:    s_and_b32 s1, s1, 0xc000ffff
; CHECK-NEXT:    s_max_u32 s4, s4, 1
; CHECK-NEXT:    v_lshlrev_b32_e64 v5, v5, 1
; CHECK-NEXT:    s_mul_i32 s2, s4, s2
; CHECK-NEXT:    s_or_b32 s3, s3, 0x30000000
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_and_b32_e32 v5, v5, v0
; CHECK-NEXT:    v_ctz_i32_b32_e32 v7, v5
; CHECK-NEXT:    s_wait_dscnt 0x0
; CHECK-NEXT:    v_cndmask_b32_e32 v2, 0, v2, vcc_lo
; CHECK-NEXT:    v_cmp_ne_u32_e32 vcc_lo, 0, v5
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_2) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_permlane16_var_b32 v5, v2, v7 op_sel:[0,1]
; CHECK-NEXT:    s_and_b32 vcc_lo, 0xaaaaaaaa, vcc_lo
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    v_dual_cndmask_b32 v5, 0, v5 :: v_dual_and_b32 v6, 30, v3
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_add_nc_u32_e32 v6, -2, v6
; CHECK-NEXT:    v_add_nc_u32_e32 v2, v5, v2
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_lshlrev_b32_e64 v6, v6, 3
; CHECK-NEXT:    v_and_b32_e32 v6, v6, v0
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_clz_i32_u32_e32 v7, v6
; CHECK-NEXT:    v_cmp_ne_u32_e32 vcc_lo, 0, v6
; CHECK-NEXT:    v_xor_b32_e32 v7, 31, v7
; CHECK-NEXT:    s_and_b32 vcc_lo, 0xcccccccc, vcc_lo
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_2) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_permlane16_var_b32 v6, v2, v7 op_sel:[0,1]
; CHECK-NEXT:    v_clz_i32_u32_e32 v7, v4
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    v_cndmask_b32_e32 v6, 0, v6, vcc_lo
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(SKIP_1) | instid1(VALU_DEP_3)
; CHECK-NEXT:    v_xor_b32_e32 v7, 31, v7
; CHECK-NEXT:    v_cmp_ne_u32_e32 vcc_lo, 0, v4
; CHECK-NEXT:    v_add_nc_u32_e32 v2, v2, v6
; CHECK-NEXT:    s_and_b32 vcc_lo, vcc_lo, 0xf0f0f0f0
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_2) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_permlane16_var_b32 v4, v2, v7 op_sel:[0,1]
; CHECK-NEXT:    v_and_b32_e32 v5, 24, v3
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    v_dual_cndmask_b32 v4, 0, v4 :: v_dual_and_b32 v3, 16, v3
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_add_nc_u32_e32 v5, -8, v5
; CHECK-NEXT:    v_add_nc_u32_e32 v3, -16, v3
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(NEXT) | instid1(VALU_DEP_3)
; CHECK-NEXT:    v_add_nc_u32_e32 v2, v4, v2
; CHECK-NEXT:    v_lshlrev_b32_e64 v5, v5, 0xff
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(NEXT) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_lshlrev_b32_e64 v3, v3, 0xffff
; CHECK-NEXT:    v_and_b32_e32 v5, v5, v0
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_and_b32_e32 v0, v3, v0
; CHECK-NEXT:    v_clz_i32_u32_e32 v6, v5
; CHECK-NEXT:    v_cmp_ne_u32_e32 vcc_lo, 0, v5
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(NEXT) | instid1(VALU_DEP_3)
; CHECK-NEXT:    v_clz_i32_u32_e32 v4, v0
; CHECK-NEXT:    v_xor_b32_e32 v6, 31, v6
; CHECK-NEXT:    s_and_b32 vcc_lo, vcc_lo, 0xff00ff00
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_xor_b32_e32 v4, 31, v4
; CHECK-NEXT:    v_permlane16_var_b32 v3, v2, v6 op_sel:[0,1]
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_2)
; CHECK-NEXT:    v_cndmask_b32_e32 v3, 0, v3, vcc_lo
; CHECK-NEXT:    v_cmp_ne_u32_e32 vcc_lo, 0, v0
; CHECK-NEXT:    v_add_nc_u32_e32 v2, v3, v2
; CHECK-NEXT:    s_and_b32 vcc_lo, vcc_lo, 0xffff0000
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_permlanex16_var_b32 v0, v2, v4 op_sel:[0,1]
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    v_cndmask_b32_e32 v0, 0, v0, vcc_lo
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; CHECK-NEXT:    v_add_nc_u32_e32 v0, v0, v2
; CHECK-NEXT:    buffer_store_b32 v0, v1, s[0:3], null offen
; CHECK-NEXT:    s_nop 0
; CHECK-NEXT:    s_sendmsg sendmsg(MSG_DEALLOC_VGPRS)
; CHECK-NEXT:    s_endpgm
