
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
; RUN: lgc -mcpu=gfx1201 -print-after=lgc-lower-buffer-operations -o 2>&1 - < %s | FileCheck --check-prefixes=CHECK %s

define amdgpu_gfx void @atomicrmw_scope_system(<4 x i32> inreg %desc) !lgc.shaderstage !0 {
; CHECK-LABEL: define amdgpu_gfx void @atomicrmw_scope_system(
; CHECK-SAME: <4 x i32> inreg [[DESC:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[PAD0:%.*]], i32 inreg noundef [[PAD1:%.*]], i32 inreg noundef [[PAD2:%.*]], i32 inreg noundef [[PAD3:%.*]], i32 inreg noundef [[PAD4:%.*]], i32 inreg noundef [[PAD5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0:[0-9]+]] !lgc.shaderstage [[META0:![0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.raw.buffer.atomic.add.i32{{(.v4i32)?}}(i32 1, <4 x i32> [[DESC]], i32 0, i32 0, i32 24)
; CHECK-NEXT:    ret void
;
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %add = atomicrmw add ptr addrspace(7) %ptr, i32 1 monotonic, align 4
  ret void
}

define amdgpu_gfx void @atomicrmw_scope_singlethread(<4 x i32> inreg %desc) !lgc.shaderstage !0 {
; CHECK-LABEL: define amdgpu_gfx void @atomicrmw_scope_singlethread(
; CHECK-SAME: <4 x i32> inreg [[DESC:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[PAD0:%.*]], i32 inreg noundef [[PAD1:%.*]], i32 inreg noundef [[PAD2:%.*]], i32 inreg noundef [[PAD3:%.*]], i32 inreg noundef [[PAD4:%.*]], i32 inreg noundef [[PAD5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] !lgc.shaderstage [[META0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.raw.buffer.atomic.add.i32{{(.v4i32)?}}(i32 1, <4 x i32> [[DESC]], i32 0, i32 0, i32 0)
; CHECK-NEXT:    ret void
;
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %add = atomicrmw add ptr addrspace(7) %ptr, i32 1 syncscope("singlethread") monotonic, align 4
  ret void
}

define amdgpu_gfx void @atomicrmw_scope_agent(<4 x i32> inreg %desc) !lgc.shaderstage !0 {
; CHECK-LABEL: define amdgpu_gfx void @atomicrmw_scope_agent(
; CHECK-SAME: <4 x i32> inreg [[DESC:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[PAD0:%.*]], i32 inreg noundef [[PAD1:%.*]], i32 inreg noundef [[PAD2:%.*]], i32 inreg noundef [[PAD3:%.*]], i32 inreg noundef [[PAD4:%.*]], i32 inreg noundef [[PAD5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] !lgc.shaderstage [[META0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.raw.buffer.atomic.add.i32{{(.v4i32)?}}(i32 1, <4 x i32> [[DESC]], i32 0, i32 0, i32 16)
; CHECK-NEXT:    ret void
;
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %add = atomicrmw add ptr addrspace(7) %ptr, i32 1 syncscope("agent") monotonic, align 4
  ret void
}

define amdgpu_gfx void @atomicrmw_scope_workgroup(<4 x i32> inreg %desc) !lgc.shaderstage !0 {
; CHECK-LABEL: define amdgpu_gfx void @atomicrmw_scope_workgroup(
; CHECK-SAME: <4 x i32> inreg [[DESC:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[PAD0:%.*]], i32 inreg noundef [[PAD1:%.*]], i32 inreg noundef [[PAD2:%.*]], i32 inreg noundef [[PAD3:%.*]], i32 inreg noundef [[PAD4:%.*]], i32 inreg noundef [[PAD5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] !lgc.shaderstage [[META0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.raw.buffer.atomic.add.i32{{(.v4i32)?}}(i32 1, <4 x i32> [[DESC]], i32 0, i32 0, i32 8)
; CHECK-NEXT:    ret void
;
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %add = atomicrmw add ptr addrspace(7) %ptr, i32 1 syncscope("workgroup") monotonic, align 4
  ret void
}

define amdgpu_gfx void @atomicrmw_scope_wavefront(<4 x i32> inreg %desc) !lgc.shaderstage !0 {
; CHECK-LABEL: define amdgpu_gfx void @atomicrmw_scope_wavefront(
; CHECK-SAME: <4 x i32> inreg [[DESC:%.*]], i32 inreg noundef [[GLOBALTABLE:%.*]], ptr addrspace(4) inreg noundef [[NUMWORKGROUPSPTR:%.*]], i32 inreg noundef [[PAD0:%.*]], i32 inreg noundef [[PAD1:%.*]], i32 inreg noundef [[PAD2:%.*]], i32 inreg noundef [[PAD3:%.*]], i32 inreg noundef [[PAD4:%.*]], i32 inreg noundef [[PAD5:%.*]], i32 inreg noundef [[PAD6:%.*]], i32 inreg noundef [[PAD7:%.*]], i32 inreg noundef [[PAD8:%.*]], i32 inreg noundef [[PAD9:%.*]], i32 inreg noundef [[PAD10:%.*]], i32 inreg noundef [[PAD11:%.*]], i32 inreg noundef [[SPILLTABLE:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0]] !lgc.shaderstage [[META0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.raw.buffer.atomic.add.i32{{(.v4i32)?}}(i32 1, <4 x i32> [[DESC]], i32 0, i32 0, i32 0)
; CHECK-NEXT:    ret void
;
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %add = atomicrmw add ptr addrspace(7) %ptr, i32 1 syncscope("wavefront") monotonic, align 4
  ret void
}

declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>, i1) nounwind readnone

!0 = !{i32 7}
