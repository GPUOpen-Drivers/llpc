
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc
; RUN: lgc --mcpu=gfx1201 -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=GFX12 %s

define <2 x i32> @test_i4_32X16_ab_layout(ptr addrspace(7) %ptr) !spirv.ExecutionModel !8 !lgc.shaderstage !9 {
; GFX12-LABEL: @test_i4_32X16_ab_layout(
; GFX12-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; GFX12-NEXT:    [[TMP3:%.*]] = srem i32 [[TMP2]], 16
; GFX12-NEXT:    [[TMP4:%.*]] = udiv i32 [[TMP2]], 16
; GFX12-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], 8
; GFX12-NEXT:    [[TMP6:%.*]] = lshr i32 [[TMP3]], 1
; GFX12-NEXT:    [[TMP7:%.*]] = mul i32 [[TMP5]], 128
; GFX12-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], [[TMP6]]
; GFX12-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 0
; GFX12-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR:%.*]], i32 [[TMP9]]
; GFX12-NEXT:    [[TMP11:%.*]] = load atomic i8, ptr addrspace(7) [[TMP10]] unordered, align 1
; GFX12-NEXT:    [[TMP12:%.*]] = add i32 [[TMP8]], 128
; GFX12-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP12]]
; GFX12-NEXT:    [[TMP14:%.*]] = load atomic i8, ptr addrspace(7) [[TMP13]] unordered, align 1
; GFX12-NEXT:    [[TMP15:%.*]] = add i32 [[TMP8]], 256
; GFX12-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP15]]
; GFX12-NEXT:    [[TMP17:%.*]] = load atomic i8, ptr addrspace(7) [[TMP16]] unordered, align 1
; GFX12-NEXT:    [[TMP18:%.*]] = add i32 [[TMP8]], 384
; GFX12-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP18]]
; GFX12-NEXT:    [[TMP20:%.*]] = load atomic i8, ptr addrspace(7) [[TMP19]] unordered, align 1
; GFX12-NEXT:    [[TMP21:%.*]] = add i32 [[TMP8]], 512
; GFX12-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP21]]
; GFX12-NEXT:    [[TMP23:%.*]] = load atomic i8, ptr addrspace(7) [[TMP22]] unordered, align 1
; GFX12-NEXT:    [[TMP24:%.*]] = add i32 [[TMP8]], 640
; GFX12-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP24]]
; GFX12-NEXT:    [[TMP26:%.*]] = load atomic i8, ptr addrspace(7) [[TMP25]] unordered, align 1
; GFX12-NEXT:    [[TMP27:%.*]] = add i32 [[TMP8]], 768
; GFX12-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP27]]
; GFX12-NEXT:    [[TMP29:%.*]] = load atomic i8, ptr addrspace(7) [[TMP28]] unordered, align 1
; GFX12-NEXT:    [[TMP30:%.*]] = add i32 [[TMP8]], 896
; GFX12-NEXT:    [[TMP31:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP30]]
; GFX12-NEXT:    [[TMP32:%.*]] = load atomic i8, ptr addrspace(7) [[TMP31]] unordered, align 1
; GFX12-NEXT:    [[TMP33:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP34:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP33]])
; GFX12-NEXT:    [[TMP35:%.*]] = and i32 [[TMP34]], 1
; GFX12-NEXT:    [[TMP36:%.*]] = icmp eq i32 [[TMP35]], 0
; GFX12-NEXT:    [[TMP37:%.*]] = and i8 [[TMP11]], 15
; GFX12-NEXT:    [[TMP38:%.*]] = and i8 [[TMP14]], 15
; GFX12-NEXT:    [[TMP39:%.*]] = shl i8 [[TMP38]], 4
; GFX12-NEXT:    [[TMP40:%.*]] = or i8 [[TMP37]], [[TMP39]]
; GFX12-NEXT:    [[TMP41:%.*]] = and i8 [[TMP11]], -16
; GFX12-NEXT:    [[TMP42:%.*]] = lshr i8 [[TMP11]], 4
; GFX12-NEXT:    [[TMP43:%.*]] = and i8 [[TMP14]], -16
; GFX12-NEXT:    [[TMP44:%.*]] = or i8 [[TMP42]], [[TMP43]]
; GFX12-NEXT:    [[TMP45:%.*]] = insertelement <4 x i8> poison, i8 [[TMP40]], i64 0
; GFX12-NEXT:    [[TMP46:%.*]] = insertelement <4 x i8> poison, i8 [[TMP44]], i64 0
; GFX12-NEXT:    [[TMP47:%.*]] = select i1 [[TMP36]], <4 x i8> [[TMP45]], <4 x i8> [[TMP46]]
; GFX12-NEXT:    [[TMP48:%.*]] = and i8 [[TMP17]], 15
; GFX12-NEXT:    [[TMP49:%.*]] = and i8 [[TMP20]], 15
; GFX12-NEXT:    [[TMP50:%.*]] = shl i8 [[TMP49]], 4
; GFX12-NEXT:    [[TMP51:%.*]] = or i8 [[TMP48]], [[TMP50]]
; GFX12-NEXT:    [[TMP52:%.*]] = and i8 [[TMP17]], -16
; GFX12-NEXT:    [[TMP53:%.*]] = lshr i8 [[TMP17]], 4
; GFX12-NEXT:    [[TMP54:%.*]] = and i8 [[TMP20]], -16
; GFX12-NEXT:    [[TMP55:%.*]] = or i8 [[TMP53]], [[TMP54]]
; GFX12-NEXT:    [[TMP56:%.*]] = insertelement <4 x i8> [[TMP47]], i8 [[TMP51]], i64 1
; GFX12-NEXT:    [[TMP57:%.*]] = insertelement <4 x i8> [[TMP47]], i8 [[TMP55]], i64 1
; GFX12-NEXT:    [[TMP58:%.*]] = select i1 [[TMP36]], <4 x i8> [[TMP56]], <4 x i8> [[TMP57]]
; GFX12-NEXT:    [[TMP59:%.*]] = and i8 [[TMP23]], 15
; GFX12-NEXT:    [[TMP60:%.*]] = and i8 [[TMP26]], 15
; GFX12-NEXT:    [[TMP61:%.*]] = shl i8 [[TMP60]], 4
; GFX12-NEXT:    [[TMP62:%.*]] = or i8 [[TMP59]], [[TMP61]]
; GFX12-NEXT:    [[TMP63:%.*]] = and i8 [[TMP23]], -16
; GFX12-NEXT:    [[TMP64:%.*]] = lshr i8 [[TMP23]], 4
; GFX12-NEXT:    [[TMP65:%.*]] = and i8 [[TMP26]], -16
; GFX12-NEXT:    [[TMP66:%.*]] = or i8 [[TMP64]], [[TMP65]]
; GFX12-NEXT:    [[TMP67:%.*]] = insertelement <4 x i8> [[TMP58]], i8 [[TMP62]], i64 2
; GFX12-NEXT:    [[TMP68:%.*]] = insertelement <4 x i8> [[TMP58]], i8 [[TMP66]], i64 2
; GFX12-NEXT:    [[TMP69:%.*]] = select i1 [[TMP36]], <4 x i8> [[TMP67]], <4 x i8> [[TMP68]]
; GFX12-NEXT:    [[TMP70:%.*]] = and i8 [[TMP29]], 15
; GFX12-NEXT:    [[TMP71:%.*]] = and i8 [[TMP32]], 15
; GFX12-NEXT:    [[TMP72:%.*]] = shl i8 [[TMP71]], 4
; GFX12-NEXT:    [[TMP73:%.*]] = or i8 [[TMP70]], [[TMP72]]
; GFX12-NEXT:    [[TMP74:%.*]] = and i8 [[TMP29]], -16
; GFX12-NEXT:    [[TMP75:%.*]] = lshr i8 [[TMP29]], 4
; GFX12-NEXT:    [[TMP76:%.*]] = and i8 [[TMP32]], -16
; GFX12-NEXT:    [[TMP77:%.*]] = or i8 [[TMP75]], [[TMP76]]
; GFX12-NEXT:    [[TMP78:%.*]] = insertelement <4 x i8> [[TMP69]], i8 [[TMP73]], i64 3
; GFX12-NEXT:    [[TMP79:%.*]] = insertelement <4 x i8> [[TMP69]], i8 [[TMP77]], i64 3
; GFX12-NEXT:    [[TMP80:%.*]] = select i1 [[TMP36]], <4 x i8> [[TMP78]], <4 x i8> [[TMP79]]
; GFX12-NEXT:    [[TMP81:%.*]] = shufflevector <4 x i8> [[TMP80]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; GFX12-NEXT:    [[TMP82:%.*]] = bitcast <8 x i8> [[TMP81]] to <2 x i32>
; GFX12-NEXT:    [[TMP83:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP84:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP83]])
; GFX12-NEXT:    [[TMP85:%.*]] = srem i32 [[TMP84]], 16
; GFX12-NEXT:    [[TMP86:%.*]] = udiv i32 [[TMP84]], 16
; GFX12-NEXT:    [[TMP87:%.*]] = mul i32 [[TMP86]], 4
; GFX12-NEXT:    [[TMP88:%.*]] = mul i32 [[TMP85]], 128
; GFX12-NEXT:    [[TMP89:%.*]] = add i32 [[TMP87]], [[TMP88]]
; GFX12-NEXT:    [[TMP90:%.*]] = add i32 [[TMP89]], 0
; GFX12-NEXT:    [[TMP91:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP90]]
; GFX12-NEXT:    [[TMP92:%.*]] = load atomic i8, ptr addrspace(7) [[TMP91]] unordered, align 16
; GFX12-NEXT:    [[TMP93:%.*]] = insertelement <4 x i8> poison, i8 [[TMP92]], i64 0
; GFX12-NEXT:    [[TMP94:%.*]] = add i32 [[TMP89]], 1
; GFX12-NEXT:    [[TMP95:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP94]]
; GFX12-NEXT:    [[TMP96:%.*]] = load atomic i8, ptr addrspace(7) [[TMP95]] unordered, align 1
; GFX12-NEXT:    [[TMP97:%.*]] = insertelement <4 x i8> [[TMP93]], i8 [[TMP96]], i64 1
; GFX12-NEXT:    [[TMP98:%.*]] = add i32 [[TMP89]], 2
; GFX12-NEXT:    [[TMP99:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP98]]
; GFX12-NEXT:    [[TMP100:%.*]] = load atomic i8, ptr addrspace(7) [[TMP99]] unordered, align 2
; GFX12-NEXT:    [[TMP101:%.*]] = insertelement <4 x i8> [[TMP97]], i8 [[TMP100]], i64 2
; GFX12-NEXT:    [[TMP102:%.*]] = add i32 [[TMP89]], 3
; GFX12-NEXT:    [[TMP103:%.*]] = getelementptr i8, ptr addrspace(7) [[PTR]], i32 [[TMP102]]
; GFX12-NEXT:    [[TMP104:%.*]] = load atomic i8, ptr addrspace(7) [[TMP103]] unordered, align 1
; GFX12-NEXT:    [[TMP105:%.*]] = insertelement <4 x i8> [[TMP101]], i8 [[TMP104]], i64 3
; GFX12-NEXT:    [[TMP106:%.*]] = shufflevector <4 x i8> [[TMP105]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; GFX12-NEXT:    [[TMP107:%.*]] = bitcast <8 x i8> [[TMP106]] to <2 x i32>
; GFX12-NEXT:    ret <2 x i32> [[TMP82]]
;
  %a = call <2 x i32> (...) @lgc.xdl.cooperative.matrix.load__v2i32(ptr addrspace(7) %ptr, i32 128, i1 false, i32 10, i32 5, i32 2, i32 16, i32 32)
  %b = call <2 x i32> (...) @lgc.xdl.cooperative.matrix.load__v2i32(ptr addrspace(7) %ptr, i32 128, i1 true, i32 10, i32 5, i32 2, i32 16, i32 32)
  ret <2 x i32> %a
}

declare <2 x i32> @lgc.xdl.cooperative.matrix.load__v2i32(...)

!llpc.compute.mode = !{!0}
!lgc.client = !{!1}
!lgc.options = !{!2}
!lgc.options.CS = !{!3}

!0 = !{i32 128, i32 2, i32 1}
!1 = !{!"Vulkan"}
!2 = !{i32 -2108299168, i32 -1199997545, i32 1667044824, i32 -422575072, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 -1}
!3 = !{i32 219437737, i32 -1317595285, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800}
!8 = !{i32 5}
!9 = !{i32 7}
