; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RUN: lgc --mcpu=gfx1201 -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=GFX12 %s

define <2 x i32> @convert_f16_to_fp8(<4 x float> %load) local_unnamed_addr #0 !lgc.shaderstage !0 {
; GFX12-LABEL: define <2 x i32> @convert_f16_to_fp8
; GFX12-SAME: (<4 x float> [[LOAD:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {{.*}}.shaderstage [[META4:![0-9]+]] {
; GFX12-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; GFX12-NEXT:    [[TMP3:%.*]] = bitcast <4 x float> [[LOAD]] to <8 x half>
; GFX12-NEXT:    [[TMP4:%.*]] = shufflevector <8 x half> [[TMP3]], <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; GFX12-NEXT:    [[CASTOPCONVERT:%.*]] = fpext <4 x half> [[TMP4]] to <4 x float>
; GFX12-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[CASTOPCONVERT]], i64 0
; GFX12-NEXT:    [[TMP6:%.*]] = extractelement <4 x float> [[CASTOPCONVERT]], i64 1
; GFX12-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.cvt.pk.fp8.f32(float [[TMP5]], float [[TMP6]], i32 0, i1 false)
; GFX12-NEXT:    [[TMP8:%.*]] = extractelement <4 x float> [[CASTOPCONVERT]], i64 2
; GFX12-NEXT:    [[TMP9:%.*]] = extractelement <4 x float> [[CASTOPCONVERT]], i64 3
; GFX12-NEXT:    [[TMP10:%.*]] = call i32 @llvm.amdgcn.cvt.pk.fp8.f32(float [[TMP8]], float [[TMP9]], i32 [[TMP7]], i1 true)
; GFX12-NEXT:    [[TMP11:%.*]] = insertelement <1 x i32> poison, i32 [[TMP10]], i64 0
; GFX12-NEXT:    [[TMP12:%.*]] = bitcast <1 x i32> [[TMP11]] to <4 x i8>
; GFX12-NEXT:    [[TMP13:%.*]] = shufflevector <4 x i8> [[TMP12]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; GFX12-NEXT:    [[TMP14:%.*]] = bitcast <8 x i8> [[TMP13]] to <2 x i32>
; GFX12-NEXT:    ret <2 x i32> [[TMP14]]
;
  %convert = call <2 x i32> (...) @lgc.xdl.cooperative.matrix.convert__v2i32(i32 45, <4 x float> %load, i32 1, i32 8, i32 4, i32 4)
  ret <2 x i32> %convert
}

define <4 x float> @convert_fp8_to_fp16(<2 x i32> %load) local_unnamed_addr #0 !lgc.shaderstage !0 {
; GFX12-LABEL: define <4 x float> @convert_fp8_to_fp16
; GFX12-SAME: (<2 x i32> [[LOAD:%.*]]) local_unnamed_addr #[[ATTR0]] {{.*}}.shaderstage [[META4]] {
; GFX12-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; GFX12-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[LOAD]] to <8 x i8>
; GFX12-NEXT:    [[TMP4:%.*]] = shufflevector <8 x i8> [[TMP3]], <8 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; GFX12-NEXT:    [[TMP5:%.*]] = bitcast <4 x i8> [[TMP4]] to <1 x i32>
; GFX12-NEXT:    [[TMP6:%.*]] = extractelement <1 x i32> [[TMP5]], i64 0
; GFX12-NEXT:    [[TMP7:%.*]] = call <2 x float> @llvm.amdgcn.cvt.pk.f32.fp8(i32 [[TMP6]], i1 false)
; GFX12-NEXT:    [[TMP8:%.*]] = call <2 x float> @llvm.amdgcn.cvt.pk.f32.fp8(i32 [[TMP6]], i1 true)
; GFX12-NEXT:    [[TMP9:%.*]] = extractelement <2 x float> [[TMP7]], i32 0
; GFX12-NEXT:    [[TMP10:%.*]] = insertelement <4 x float> poison, float [[TMP9]], i64 0
; GFX12-NEXT:    [[TMP11:%.*]] = extractelement <2 x float> [[TMP7]], i32 1
; GFX12-NEXT:    [[TMP12:%.*]] = insertelement <4 x float> [[TMP10]], float [[TMP11]], i64 1
; GFX12-NEXT:    [[TMP13:%.*]] = extractelement <2 x float> [[TMP8]], i32 0
; GFX12-NEXT:    [[TMP14:%.*]] = insertelement <4 x float> [[TMP12]], float [[TMP13]], i64 2
; GFX12-NEXT:    [[TMP15:%.*]] = extractelement <2 x float> [[TMP8]], i32 1
; GFX12-NEXT:    [[TMP16:%.*]] = insertelement <4 x float> [[TMP14]], float [[TMP15]], i64 3
; GFX12-NEXT:    [[CASTOPCONVERT:%.*]] = fptrunc <4 x float> [[TMP16]] to <4 x half>
; GFX12-NEXT:    [[TMP17:%.*]] = shufflevector <4 x half> [[CASTOPCONVERT]], <4 x half> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; GFX12-NEXT:    [[TMP18:%.*]] = bitcast <8 x half> [[TMP17]] to <4 x float>
; GFX12-NEXT:    ret <4 x float> [[TMP18]]
;
  %convert = call <4 x float> (...) @lgc.xdl.cooperative.matrix.convert__v4f32(i32 46, <2 x i32> %load, i32 8, i32 1, i32 4, i32 4)
  ret <4 x float> %convert
}

define <8 x float> @muladd_(<2 x i32> %load, <2 x i32> %load1, <8 x float> %load2) local_unnamed_addr #0 !lgc.shaderstage !0 {
; GFX12-LABEL: define <8 x float> @muladd_
; GFX12-SAME: (<2 x i32> [[LOAD:%.*]], <2 x i32> [[LOAD1:%.*]], <8 x float> [[LOAD2:%.*]]) local_unnamed_addr #[[ATTR0]] {{.*}}.shaderstage [[META4]] {
; GFX12-NEXT:    [[TMP1:%.*]] = extractelement <2 x i32> [[LOAD]], i32 0
; GFX12-NEXT:    [[TMP2:%.*]] = extractelement <2 x i32> [[LOAD1]], i32 0
; GFX12-NEXT:    [[SHUFFLEVECTOR:%.*]] = shufflevector <8 x float> [[LOAD2]], <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; GFX12-NEXT:    [[MULADD1:%.*]] = call <4 x float> @llvm.amdgcn.wmma.f32.16x16x16.fp8.bf8.v4f32.i32(i32 [[TMP1]], i32 [[TMP2]], <4 x float> [[SHUFFLEVECTOR]])
; GFX12-NEXT:    [[TMP3:%.*]] = shufflevector <4 x float> [[MULADD1]], <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; GFX12-NEXT:    ret <8 x float> [[TMP3]]
;
  %mulAdd = call <8 x float> (...) @lgc.xdl.cooperative.matrix.muladd__v8f32(<2 x i32> %load, <2 x i32> %load1, <8 x float> %load2, i1 true, i1 true, i1 false, i1 false, i32 8, i32 9, i32 2, i32 2, i32 1)
  ret <8 x float> %mulAdd
}

declare <2 x i32> @lgc.xdl.cooperative.matrix.convert__v2i32(...)
declare <8 x float> @lgc.xdl.cooperative.matrix.muladd__v8f32(...)
declare <4 x float> @lgc.xdl.cooperative.matrix.convert__v4f32(...)

attributes #0 = { nounwind }

!llpc.compute.mode = !{!3}

!lgc.wave.size = !{!4}
!lgc.subgroup.size = !{!4}

; ShaderStage::Compute
!0 = !{i32 7}
; Compute mode, containing workgroup size
!3 = !{i32 128, i32 1, i32 1}
!4 = !{i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64}
; CHECK: [[META4]] = !{i32 7}
;
