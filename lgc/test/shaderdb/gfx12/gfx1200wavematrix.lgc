
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 2
; RUN: lgc --mcpu=gfx1201 -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=GFX12 %s

define <2 x i32> @convert_f16_to_fp8(<4 x float> %load) {
; GFX12-LABEL: define <2 x i32> @convert_f16_to_fp8
; GFX12-SAME: (<4 x float> [[LOAD:%.*]]) {
; GFX12-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP2:%.*]] = bitcast <4 x float> [[LOAD]] to <8 x half>
; GFX12-NEXT:    [[CASTOPCONVERT:%.*]] = fpext <8 x half> [[TMP2]] to <8 x float>
; GFX12-NEXT:    [[TMP3:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 0
; GFX12-NEXT:    [[TMP4:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 1
; GFX12-NEXT:    [[TMP5:%.*]] = call i32 @llvm.amdgcn.cvt.pk.fp8.f32(float [[TMP3]], float [[TMP4]], i32 0, i1 false)
; GFX12-NEXT:    [[TMP6:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 2
; GFX12-NEXT:    [[TMP7:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 3
; GFX12-NEXT:    [[TMP8:%.*]] = call i32 @llvm.amdgcn.cvt.pk.fp8.f32(float [[TMP6]], float [[TMP7]], i32 [[TMP5]], i1 true)
; GFX12-NEXT:    [[TMP9:%.*]] = insertelement <2 x i32> poison, i32 [[TMP8]], i64 0
; GFX12-NEXT:    [[TMP10:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 4
; GFX12-NEXT:    [[TMP11:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 5
; GFX12-NEXT:    [[TMP12:%.*]] = call i32 @llvm.amdgcn.cvt.pk.fp8.f32(float [[TMP10]], float [[TMP11]], i32 0, i1 false)
; GFX12-NEXT:    [[TMP13:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 6
; GFX12-NEXT:    [[TMP14:%.*]] = extractelement <8 x float> [[CASTOPCONVERT]], i64 7
; GFX12-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.cvt.pk.fp8.f32(float [[TMP13]], float [[TMP14]], i32 [[TMP12]], i1 true)
; GFX12-NEXT:    [[TMP16:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP15]], i64 1
; GFX12-NEXT:    [[TMP17:%.*]] = bitcast <2 x i32> [[TMP16]] to <8 x i8>
; GFX12-NEXT:    [[TMP18:%.*]] = bitcast <8 x i8> [[TMP17]] to <2 x i32>
; GFX12-NEXT:    ret <2 x i32> [[TMP18]]
;
  %convert = call <2 x i32> (...) @lgc.xdl.cooperative.matrix.convert__v2i32(i32 45, <4 x float> %load, i32 1, i32 8, i32 4, i32 4)
  ret <2 x i32> %convert
}

define <4 x float> @convert_fp8_to_fp16(<2 x i32> %load) {
; GFX12-LABEL: define <4 x float> @convert_fp8_to_fp16
; GFX12-SAME: (<2 x i32> [[LOAD:%.*]]) {
; GFX12-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; GFX12-NEXT:    [[TMP2:%.*]] = bitcast <2 x i32> [[LOAD]] to <8 x i8>
; GFX12-NEXT:    [[TMP3:%.*]] = bitcast <8 x i8> [[TMP2]] to <2 x i32>
; GFX12-NEXT:    [[TMP4:%.*]] = extractelement <2 x i32> [[TMP3]], i64 0
; GFX12-NEXT:    [[TMP5:%.*]] = call <2 x float> @llvm.amdgcn.cvt.pk.f32.fp8(i32 [[TMP4]], i1 false)
; GFX12-NEXT:    [[TMP6:%.*]] = call <2 x float> @llvm.amdgcn.cvt.pk.f32.fp8(i32 [[TMP4]], i1 true)
; GFX12-NEXT:    [[TMP7:%.*]] = shufflevector <2 x float> [[TMP5]], <2 x float> [[TMP6]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; GFX12-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[TMP3]], i64 1
; GFX12-NEXT:    [[TMP9:%.*]] = call <2 x float> @llvm.amdgcn.cvt.pk.f32.fp8(i32 [[TMP8]], i1 false)
; GFX12-NEXT:    [[TMP10:%.*]] = call <2 x float> @llvm.amdgcn.cvt.pk.f32.fp8(i32 [[TMP8]], i1 true)
; GFX12-NEXT:    [[TMP11:%.*]] = shufflevector <2 x float> [[TMP9]], <2 x float> [[TMP10]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; GFX12-NEXT:    [[TMP12:%.*]] = shufflevector <4 x float> [[TMP7]], <4 x float> [[TMP11]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; GFX12-NEXT:    [[CASTOPCONVERT:%.*]] = fptrunc <8 x float> [[TMP12]] to <8 x half>
; GFX12-NEXT:    [[TMP13:%.*]] = bitcast <8 x half> [[CASTOPCONVERT]] to <4 x float>
; GFX12-NEXT:    ret <4 x float> [[TMP13]]
;
  %convert = call <4 x float> (...) @lgc.xdl.cooperative.matrix.convert__v4f32(i32 46, <2 x i32> %load, i32 8, i32 1, i32 4, i32 4)
  ret <4 x float> %convert
}

define <8 x float> @muladd_(<2 x i32> %load, <2 x i32> %load1, <8 x float> %load2) {
; GFX12-LABEL: define <8 x float> @muladd_
; GFX12-SAME: (<2 x i32> [[LOAD:%.*]], <2 x i32> [[LOAD1:%.*]], <8 x float> [[LOAD2:%.*]]) {
; GFX12-NEXT:    [[TMP1:%.*]] = shufflevector <2 x i32> [[LOAD]], <2 x i32> poison, <2 x i32> <i32 0, i32 1>
; GFX12-NEXT:    [[TMP2:%.*]] = shufflevector <2 x i32> [[LOAD1]], <2 x i32> poison, <2 x i32> <i32 0, i32 1>
; GFX12-NEXT:    [[MULADD1:%.*]] = call <8 x float> @llvm.amdgcn.wmma.f32.16x16x16.fp8.bf8.v8f32.v2i32(<2 x i32> [[TMP1]], <2 x i32> [[TMP2]], <8 x float> [[LOAD2]])
; GFX12-NEXT:    ret <8 x float> [[MULADD1]]
;
  %mulAdd = call <8 x float> (...) @lgc.xdl.cooperative.matrix.muladd__v8f32(<2 x i32> %load, <2 x i32> %load1, <8 x float> %load2, i1 true, i1 true, i1 false, i1 false, i32 8, i32 9, i32 2, i32 2, i32 1)
  ret <8 x float> %mulAdd
}

define <4 x i32> @muladd_16x16x16_iu4(i32 %loadA, i32 %loadB, <4 x i32> %loadC) {
; GFX12-LABEL: define <4 x i32> @muladd_16x16x16_iu4
; GFX12-SAME: (i32 [[LOADA:%.*]], i32 [[LOADB:%.*]], <4 x i32> [[LOADC:%.*]]) {
; GFX12-NEXT:    [[MULADD1:%.*]] = call <4 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu4.v4i32.i32(i1 true, i32 [[LOADA]], i1 true, i32 [[LOADB]], <4 x i32> [[LOADC]], i1 false)
; GFX12-NEXT:    ret <4 x i32> [[MULADD1]]
;
  %mulAdd = call <4 x i32> (...) @lgc.xdl.cooperative.matrix.muladd__v4i32(i32 %loadA, i32 %loadB, <4 x i32> %loadC, i1 true, i1 true, i1 false, i1 false, i32 10, i32 10, i32 5, i32 5, i32 1)
  ret <4 x i32> %mulAdd
}

define <4 x i32> @muladd_16x16x32_iu4(i32 %loadA, i32 %loadB, <4 x i32> %loadC) {
; GFX12-LABEL: define <4 x i32> @muladd_16x16x32_iu4
; GFX12-SAME: (i32 [[LOADA:%.*]], i32 [[LOADB:%.*]], <4 x i32> [[LOADC:%.*]]) {
; GFX12-NEXT:    [[MULADD1:%.*]] = call <4 x i32> @llvm.amdgcn.wmma.i32.16x16x32.iu4.v4i32.i32(i1 true, i32 [[LOADA]], i1 true, i32 [[LOADB]], <4 x i32> [[LOADC]], i1 false)
; GFX12-NEXT:    ret <4 x i32> [[MULADD1]]
;
  %mulAdd = call <4 x i32> (...) @lgc.xdl.cooperative.matrix.muladd__v4i32(i32 %loadA, i32 %loadB, <4 x i32> %loadC, i1 true, i1 true, i1 false, i1 false, i32 10, i32 10, i32 5, i32 5, i32 2)
  ret <4 x i32> %mulAdd
}

declare <2 x i32> @lgc.xdl.cooperative.matrix.convert__v2i32(...)
declare <8 x float> @lgc.xdl.cooperative.matrix.muladd__v8f32(...)
declare <4 x float> @lgc.xdl.cooperative.matrix.convert__v4f32(...)
declare <4 x i32> @lgc.xdl.cooperative.matrix.muladd__v4i32(...)
