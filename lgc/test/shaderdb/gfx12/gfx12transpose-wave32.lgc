; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RUN: lgc --mcpu=gfx1201 -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define <2 x i32> @transpose_i8(<2 x i32> %matrix) local_unnamed_addr #0 !lgc.shaderstage !0 {
; CHECK-LABEL: define <2 x i32> @transpose_i8(
; CHECK-SAME: <2 x i32> [[MATRIX:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !lgc.shaderstage [[META4:![0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[TMP2]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP4]], i32 14570689)
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP6]], i32 14570689)
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i32> poison, i32 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP7]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = extractelement <2 x i32> [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP10]], i32 [[TMP11]], i32 67110402)
; CHECK-NEXT:    [[TMP13:%.*]] = extractelement <2 x i32> [[TMP9]], i64 1
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP13]], i32 [[TMP14]], i32 67110402)
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <2 x i32> poison, i32 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP17:%.*]] = insertelement <2 x i32> [[TMP16]], i32 [[TMP15]], i64 1
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <2 x i32> [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP20:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP18]], i32 [[TMP19]], i32 17105671)
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <2 x i32> [[TMP9]], i64 1
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP21]], i32 [[TMP22]], i32 17105671)
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <2 x i32> poison, i32 [[TMP20]], i64 0
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <2 x i32> [[TMP24]], i32 [[TMP23]], i64 1
; CHECK-NEXT:    [[TMP26:%.*]] = select i1 [[TMP3]], <2 x i32> [[TMP17]], <2 x i32> [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <2 x i32> [[TMP26]], i64 0
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP27]], i32 11788826)
; CHECK-NEXT:    [[TMP29:%.*]] = extractelement <2 x i32> [[TMP26]], i64 1
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP29]], i32 11788826)
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <2 x i32> poison, i32 [[TMP28]], i64 0
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <2 x i32> [[TMP31]], i32 [[TMP30]], i64 1
; CHECK-NEXT:    [[TMP33:%.*]] = and i32 [[TMP1]], 2
; CHECK-NEXT:    [[TMP34:%.*]] = icmp eq i32 [[TMP33]], 0
; CHECK-NEXT:    [[TMP35:%.*]] = extractelement <2 x i32> [[TMP32]], i64 0
; CHECK-NEXT:    [[TMP36:%.*]] = extractelement <2 x i32> [[TMP26]], i64 0
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP35]], i32 [[TMP36]], i32 117834498)
; CHECK-NEXT:    [[TMP38:%.*]] = extractelement <2 x i32> [[TMP32]], i64 1
; CHECK-NEXT:    [[TMP39:%.*]] = extractelement <2 x i32> [[TMP26]], i64 1
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP38]], i32 [[TMP39]], i32 117834498)
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <2 x i32> poison, i32 [[TMP37]], i64 0
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <2 x i32> [[TMP41]], i32 [[TMP40]], i64 1
; CHECK-NEXT:    [[TMP43:%.*]] = extractelement <2 x i32> [[TMP32]], i64 0
; CHECK-NEXT:    [[TMP44:%.*]] = extractelement <2 x i32> [[TMP26]], i64 0
; CHECK-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP43]], i32 [[TMP44]], i32 16778500)
; CHECK-NEXT:    [[TMP46:%.*]] = extractelement <2 x i32> [[TMP32]], i64 1
; CHECK-NEXT:    [[TMP47:%.*]] = extractelement <2 x i32> [[TMP26]], i64 1
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP46]], i32 [[TMP47]], i32 16778500)
; CHECK-NEXT:    [[TMP49:%.*]] = insertelement <2 x i32> poison, i32 [[TMP45]], i64 0
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <2 x i32> [[TMP49]], i32 [[TMP48]], i64 1
; CHECK-NEXT:    [[TMP51:%.*]] = select i1 [[TMP34]], <2 x i32> [[TMP42]], <2 x i32> [[TMP50]]
; CHECK-NEXT:    [[SHUFFLEVECTOR:%.*]] = shufflevector <2 x i32> [[TMP51]], <2 x i32> poison, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[TMP52:%.*]] = extractelement <2 x i32> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP53:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP52]], i32 356, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP54:%.*]] = extractelement <2 x i32> [[SHUFFLEVECTOR]], i64 1
; CHECK-NEXT:    [[TMP55:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP54]], i32 356, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <2 x i32> poison, i32 [[TMP53]], i64 0
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <2 x i32> [[TMP56]], i32 [[TMP55]], i64 1
; CHECK-NEXT:    [[TMP58:%.*]] = and i32 [[TMP1]], 4
; CHECK-NEXT:    [[TMP59:%.*]] = icmp ne i32 [[TMP58]], 0
; CHECK-NEXT:    [[TMP60:%.*]] = xor i1 [[TMP59]], true
; CHECK-NEXT:    [[TMP61:%.*]] = extractelement <2 x i32> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP62:%.*]] = extractelement <2 x i32> [[TMP57]], i64 1
; CHECK-NEXT:    [[TMP63:%.*]] = select i1 [[TMP59]], i32 [[TMP62]], i32 [[TMP61]]
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <2 x i32> poison, i32 [[TMP63]], i64 0
; CHECK-NEXT:    [[TMP65:%.*]] = extractelement <2 x i32> [[SHUFFLEVECTOR]], i64 1
; CHECK-NEXT:    [[TMP66:%.*]] = extractelement <2 x i32> [[TMP57]], i64 0
; CHECK-NEXT:    [[TMP67:%.*]] = select i1 [[TMP60]], i32 [[TMP66]], i32 [[TMP65]]
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <2 x i32> [[TMP64]], i32 [[TMP67]], i64 1
; CHECK-NEXT:    [[TMP69:%.*]] = extractelement <2 x i32> [[TMP68]], i64 0
; CHECK-NEXT:    [[TMP70:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP69]], i32 [[TMP69]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP71:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i32(i32 -16776961)
; CHECK-NEXT:    [[TMP72:%.*]] = select i1 [[TMP71]], i32 [[TMP69]], i32 [[TMP70]]
; CHECK-NEXT:    [[TMP73:%.*]] = insertelement <2 x i32> poison, i32 [[TMP72]], i64 0
; CHECK-NEXT:    [[TMP74:%.*]] = extractelement <2 x i32> [[TMP68]], i64 1
; CHECK-NEXT:    [[TMP75:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP74]], i32 [[TMP74]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP76:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i32(i32 -16776961)
; CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i32 [[TMP74]], i32 [[TMP75]]
; CHECK-NEXT:    [[TMP78:%.*]] = insertelement <2 x i32> [[TMP73]], i32 [[TMP77]], i64 1
; CHECK-NEXT:    [[SHUFFLEVECTOR1:%.*]] = shufflevector <2 x i32> [[TMP78]], <2 x i32> poison, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    ret <2 x i32> [[SHUFFLEVECTOR1]]
;
  %result = call <2 x i32> (...) @lgc.xdl.cooperative.matrix.transpose__v2i32(<2 x i32> %matrix, i32 3, i32 4)
  ret <2 x i32> %result
}

define <4 x float> @transpose_f16(<4 x float> %matrix) local_unnamed_addr #0 !lgc.shaderstage !0 {
; CHECK-LABEL: define <4 x float> @transpose_f16(
; CHECK-SAME: <4 x float> [[MATRIX:%.*]]) local_unnamed_addr #[[ATTR0]] !lgc.shaderstage [[META4]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[TMP2]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = extractelement <4 x float> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast float [[TMP4]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP5]], i32 14570689)
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i32 [[TMP6]] to float
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <4 x float> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast float [[TMP8]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP9]], i32 14570689)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i32 [[TMP10]] to float
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <4 x float> [[MATRIX]], i64 2
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast float [[TMP12]] to i32
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP13]], i32 14570689)
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i32 [[TMP14]] to float
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <4 x float> [[MATRIX]], i64 3
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast float [[TMP16]] to i32
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP17]], i32 14570689)
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32 [[TMP18]] to float
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <4 x float> poison, float [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <4 x float> [[TMP20]], float [[TMP11]], i64 1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x float> [[TMP21]], float [[TMP15]], i64 2
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <4 x float> [[TMP22]], float [[TMP19]], i64 3
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <4 x float> [[MATRIX]] to <4 x i32>
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast <4 x float> [[TMP23]] to <4 x i32>
; CHECK-NEXT:    [[TMP26:%.*]] = and <4 x i32> [[TMP24]], splat (i32 -65536)
; CHECK-NEXT:    [[TMP27:%.*]] = shl <4 x i32> [[TMP25]], splat (i32 16)
; CHECK-NEXT:    [[TMP28:%.*]] = select i1 [[TMP3]], <4 x i32> [[TMP27]], <4 x i32> [[TMP26]]
; CHECK-NEXT:    [[TMP29:%.*]] = and <4 x i32> [[TMP24]], splat (i32 65535)
; CHECK-NEXT:    [[TMP30:%.*]] = lshr <4 x i32> [[TMP25]], splat (i32 16)
; CHECK-NEXT:    [[TMP31:%.*]] = select i1 [[TMP3]], <4 x i32> [[TMP29]], <4 x i32> [[TMP30]]
; CHECK-NEXT:    [[TMP32:%.*]] = or <4 x i32> [[TMP28]], [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = bitcast <4 x i32> [[TMP32]] to <4 x float>
; CHECK-NEXT:    [[SHUFFLEVECTOR:%.*]] = shufflevector <4 x float> [[TMP33]], <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP34:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP35:%.*]] = bitcast float [[TMP34]] to i32
; CHECK-NEXT:    [[TMP36:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP35]], i32 354, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP37:%.*]] = bitcast i32 [[TMP36]] to float
; CHECK-NEXT:    [[TMP38:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 1
; CHECK-NEXT:    [[TMP39:%.*]] = bitcast float [[TMP38]] to i32
; CHECK-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP39]], i32 354, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP41:%.*]] = bitcast i32 [[TMP40]] to float
; CHECK-NEXT:    [[TMP42:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 2
; CHECK-NEXT:    [[TMP43:%.*]] = bitcast float [[TMP42]] to i32
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP43]], i32 354, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP45:%.*]] = bitcast i32 [[TMP44]] to float
; CHECK-NEXT:    [[TMP46:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 3
; CHECK-NEXT:    [[TMP47:%.*]] = bitcast float [[TMP46]] to i32
; CHECK-NEXT:    [[TMP48:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP47]], i32 354, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP49:%.*]] = bitcast i32 [[TMP48]] to float
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <4 x float> poison, float [[TMP37]], i64 0
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <4 x float> [[TMP50]], float [[TMP41]], i64 1
; CHECK-NEXT:    [[TMP52:%.*]] = insertelement <4 x float> [[TMP51]], float [[TMP45]], i64 2
; CHECK-NEXT:    [[TMP53:%.*]] = insertelement <4 x float> [[TMP52]], float [[TMP49]], i64 3
; CHECK-NEXT:    [[TMP54:%.*]] = and i32 [[TMP1]], 2
; CHECK-NEXT:    [[TMP55:%.*]] = icmp ne i32 [[TMP54]], 0
; CHECK-NEXT:    [[TMP56:%.*]] = xor i1 [[TMP55]], true
; CHECK-NEXT:    [[TMP57:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP58:%.*]] = extractelement <4 x float> [[TMP53]], i64 1
; CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP55]], float [[TMP58]], float [[TMP57]]
; CHECK-NEXT:    [[TMP60:%.*]] = insertelement <4 x float> poison, float [[TMP59]], i64 0
; CHECK-NEXT:    [[TMP61:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 1
; CHECK-NEXT:    [[TMP62:%.*]] = extractelement <4 x float> [[TMP53]], i64 0
; CHECK-NEXT:    [[TMP63:%.*]] = select i1 [[TMP56]], float [[TMP62]], float [[TMP61]]
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <4 x float> [[TMP60]], float [[TMP63]], i64 1
; CHECK-NEXT:    [[TMP65:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 2
; CHECK-NEXT:    [[TMP66:%.*]] = extractelement <4 x float> [[TMP53]], i64 3
; CHECK-NEXT:    [[TMP67:%.*]] = select i1 [[TMP55]], float [[TMP66]], float [[TMP65]]
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <4 x float> [[TMP64]], float [[TMP67]], i64 2
; CHECK-NEXT:    [[TMP69:%.*]] = extractelement <4 x float> [[SHUFFLEVECTOR]], i64 3
; CHECK-NEXT:    [[TMP70:%.*]] = extractelement <4 x float> [[TMP53]], i64 2
; CHECK-NEXT:    [[TMP71:%.*]] = select i1 [[TMP56]], float [[TMP70]], float [[TMP69]]
; CHECK-NEXT:    [[TMP72:%.*]] = insertelement <4 x float> [[TMP68]], float [[TMP71]], i64 3
; CHECK-NEXT:    [[TMP73:%.*]] = extractelement <4 x float> [[TMP72]], i64 0
; CHECK-NEXT:    [[TMP74:%.*]] = bitcast float [[TMP73]] to i32
; CHECK-NEXT:    [[TMP75:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP74]], i32 356, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP76:%.*]] = bitcast i32 [[TMP75]] to float
; CHECK-NEXT:    [[TMP77:%.*]] = extractelement <4 x float> [[TMP72]], i64 1
; CHECK-NEXT:    [[TMP78:%.*]] = bitcast float [[TMP77]] to i32
; CHECK-NEXT:    [[TMP79:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP78]], i32 356, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP80:%.*]] = bitcast i32 [[TMP79]] to float
; CHECK-NEXT:    [[TMP81:%.*]] = extractelement <4 x float> [[TMP72]], i64 2
; CHECK-NEXT:    [[TMP82:%.*]] = bitcast float [[TMP81]] to i32
; CHECK-NEXT:    [[TMP83:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP82]], i32 356, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP84:%.*]] = bitcast i32 [[TMP83]] to float
; CHECK-NEXT:    [[TMP85:%.*]] = extractelement <4 x float> [[TMP72]], i64 3
; CHECK-NEXT:    [[TMP86:%.*]] = bitcast float [[TMP85]] to i32
; CHECK-NEXT:    [[TMP87:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP86]], i32 356, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP88:%.*]] = bitcast i32 [[TMP87]] to float
; CHECK-NEXT:    [[TMP89:%.*]] = insertelement <4 x float> poison, float [[TMP76]], i64 0
; CHECK-NEXT:    [[TMP90:%.*]] = insertelement <4 x float> [[TMP89]], float [[TMP80]], i64 1
; CHECK-NEXT:    [[TMP91:%.*]] = insertelement <4 x float> [[TMP90]], float [[TMP84]], i64 2
; CHECK-NEXT:    [[TMP92:%.*]] = insertelement <4 x float> [[TMP91]], float [[TMP88]], i64 3
; CHECK-NEXT:    [[TMP93:%.*]] = and i32 [[TMP1]], 4
; CHECK-NEXT:    [[TMP94:%.*]] = icmp ne i32 [[TMP93]], 0
; CHECK-NEXT:    [[TMP95:%.*]] = xor i1 [[TMP94]], true
; CHECK-NEXT:    [[TMP96:%.*]] = extractelement <4 x float> [[TMP72]], i64 0
; CHECK-NEXT:    [[TMP97:%.*]] = extractelement <4 x float> [[TMP92]], i64 2
; CHECK-NEXT:    [[TMP98:%.*]] = select i1 [[TMP94]], float [[TMP97]], float [[TMP96]]
; CHECK-NEXT:    [[TMP99:%.*]] = insertelement <4 x float> poison, float [[TMP98]], i64 0
; CHECK-NEXT:    [[TMP100:%.*]] = extractelement <4 x float> [[TMP72]], i64 1
; CHECK-NEXT:    [[TMP101:%.*]] = extractelement <4 x float> [[TMP92]], i64 3
; CHECK-NEXT:    [[TMP102:%.*]] = select i1 [[TMP94]], float [[TMP101]], float [[TMP100]]
; CHECK-NEXT:    [[TMP103:%.*]] = insertelement <4 x float> [[TMP99]], float [[TMP102]], i64 1
; CHECK-NEXT:    [[TMP104:%.*]] = extractelement <4 x float> [[TMP72]], i64 2
; CHECK-NEXT:    [[TMP105:%.*]] = extractelement <4 x float> [[TMP92]], i64 0
; CHECK-NEXT:    [[TMP106:%.*]] = select i1 [[TMP95]], float [[TMP105]], float [[TMP104]]
; CHECK-NEXT:    [[TMP107:%.*]] = insertelement <4 x float> [[TMP103]], float [[TMP106]], i64 2
; CHECK-NEXT:    [[TMP108:%.*]] = extractelement <4 x float> [[TMP72]], i64 3
; CHECK-NEXT:    [[TMP109:%.*]] = extractelement <4 x float> [[TMP92]], i64 1
; CHECK-NEXT:    [[TMP110:%.*]] = select i1 [[TMP95]], float [[TMP109]], float [[TMP108]]
; CHECK-NEXT:    [[TMP111:%.*]] = insertelement <4 x float> [[TMP107]], float [[TMP110]], i64 3
; CHECK-NEXT:    [[TMP112:%.*]] = extractelement <4 x float> [[TMP111]], i64 0
; CHECK-NEXT:    [[TMP113:%.*]] = bitcast float [[TMP112]] to i32
; CHECK-NEXT:    [[TMP114:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP113]], i32 [[TMP113]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP115:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i32(i32 -16776961)
; CHECK-NEXT:    [[TMP116:%.*]] = select i1 [[TMP115]], i32 [[TMP113]], i32 [[TMP114]]
; CHECK-NEXT:    [[TMP117:%.*]] = bitcast i32 [[TMP116]] to float
; CHECK-NEXT:    [[TMP118:%.*]] = insertelement <4 x float> poison, float [[TMP117]], i64 0
; CHECK-NEXT:    [[TMP119:%.*]] = extractelement <4 x float> [[TMP111]], i64 1
; CHECK-NEXT:    [[TMP120:%.*]] = bitcast float [[TMP119]] to i32
; CHECK-NEXT:    [[TMP121:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP120]], i32 [[TMP120]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP122:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i32(i32 -16776961)
; CHECK-NEXT:    [[TMP123:%.*]] = select i1 [[TMP122]], i32 [[TMP120]], i32 [[TMP121]]
; CHECK-NEXT:    [[TMP124:%.*]] = bitcast i32 [[TMP123]] to float
; CHECK-NEXT:    [[TMP125:%.*]] = insertelement <4 x float> [[TMP118]], float [[TMP124]], i64 1
; CHECK-NEXT:    [[TMP126:%.*]] = extractelement <4 x float> [[TMP111]], i64 2
; CHECK-NEXT:    [[TMP127:%.*]] = bitcast float [[TMP126]] to i32
; CHECK-NEXT:    [[TMP128:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP127]], i32 [[TMP127]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP129:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i32(i32 -16776961)
; CHECK-NEXT:    [[TMP130:%.*]] = select i1 [[TMP129]], i32 [[TMP127]], i32 [[TMP128]]
; CHECK-NEXT:    [[TMP131:%.*]] = bitcast i32 [[TMP130]] to float
; CHECK-NEXT:    [[TMP132:%.*]] = insertelement <4 x float> [[TMP125]], float [[TMP131]], i64 2
; CHECK-NEXT:    [[TMP133:%.*]] = extractelement <4 x float> [[TMP111]], i64 3
; CHECK-NEXT:    [[TMP134:%.*]] = bitcast float [[TMP133]] to i32
; CHECK-NEXT:    [[TMP135:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP134]], i32 [[TMP134]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP136:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i32(i32 -16776961)
; CHECK-NEXT:    [[TMP137:%.*]] = select i1 [[TMP136]], i32 [[TMP134]], i32 [[TMP135]]
; CHECK-NEXT:    [[TMP138:%.*]] = bitcast i32 [[TMP137]] to float
; CHECK-NEXT:    [[TMP139:%.*]] = insertelement <4 x float> [[TMP132]], float [[TMP138]], i64 3
; CHECK-NEXT:    [[SHUFFLEVECTOR1:%.*]] = shufflevector <4 x float> [[TMP139]], <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x float> [[SHUFFLEVECTOR1]]
;
  %result = call reassoc arcp contract afn <4 x float> (...) @lgc.xdl.cooperative.matrix.transpose__v4f32(<4 x float> %matrix, i32 1, i32 4)
  ret <4 x float> %result
}

declare <2 x i32> @lgc.xdl.cooperative.matrix.transpose__v2i32(...)
declare <4 x float> @lgc.xdl.cooperative.matrix.transpose__v4f32(...)

attributes #0 = { nounwind }

!llpc.compute.mode = !{!3}

!lgc.wave.size = !{!4}
!lgc.subgroup.size = !{!4}

; ShaderStage::Compute
!0 = !{i32 7}
; Compute mode, containing workgroup size
!3 = !{i32 128, i32 1, i32 1}
!4 = !{i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32}
;.
; CHECK: [[META4]] = !{i32 7}
;.
