; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool lgc --version 5
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RUN: lgc --mcpu=gfx1201 -o - -passes=lgc-lower-cooperative-matrix %s | FileCheck --check-prefixes=CHECK %s

define <2 x i32> @transpose_i8(<2 x i32> %matrix) local_unnamed_addr #0 !lgc.shaderstage !0 {
; CHECK-LABEL: define <2 x i32> @transpose_i8(
; CHECK-SAME: <2 x i32> [[MATRIX:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !lgc.shaderstage [[META4:![0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], 0
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP5]], i32 14570689)
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP7]], i32 14570689)
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <2 x i32> poison, i32 [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP8]], i64 1
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <2 x i32> [[TMP10]], i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP11]], i32 [[TMP12]], i32 67110402)
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x i32> [[TMP10]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP14]], i32 [[TMP15]], i32 67110402)
; CHECK-NEXT:    [[TMP17:%.*]] = insertelement <2 x i32> poison, i32 [[TMP13]], i64 0
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <2 x i32> [[TMP17]], i32 [[TMP16]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <2 x i32> [[TMP10]], i64 0
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP19]], i32 [[TMP20]], i32 17105671)
; CHECK-NEXT:    [[TMP22:%.*]] = extractelement <2 x i32> [[TMP10]], i64 1
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <2 x i32> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP22]], i32 [[TMP23]], i32 17105671)
; CHECK-NEXT:    [[TMP25:%.*]] = insertelement <2 x i32> poison, i32 [[TMP21]], i64 0
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <2 x i32> [[TMP25]], i32 [[TMP24]], i64 1
; CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP4]], <2 x i32> [[TMP18]], <2 x i32> [[TMP26]]
; CHECK-NEXT:    [[TMP28:%.*]] = extractelement <2 x i32> [[TMP27]], i64 0
; CHECK-NEXT:    [[TMP29:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP28]], i32 11788826)
; CHECK-NEXT:    [[TMP30:%.*]] = extractelement <2 x i32> [[TMP27]], i64 1
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP30]], i32 11788826)
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <2 x i32> poison, i32 [[TMP29]], i64 0
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <2 x i32> [[TMP32]], i32 [[TMP31]], i64 1
; CHECK-NEXT:    [[TMP34:%.*]] = and i32 [[TMP2]], 2
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i32 [[TMP34]], 0
; CHECK-NEXT:    [[TMP36:%.*]] = extractelement <2 x i32> [[TMP33]], i64 0
; CHECK-NEXT:    [[TMP37:%.*]] = extractelement <2 x i32> [[TMP27]], i64 0
; CHECK-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP36]], i32 [[TMP37]], i32 117834498)
; CHECK-NEXT:    [[TMP39:%.*]] = extractelement <2 x i32> [[TMP33]], i64 1
; CHECK-NEXT:    [[TMP40:%.*]] = extractelement <2 x i32> [[TMP27]], i64 1
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP39]], i32 [[TMP40]], i32 117834498)
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <2 x i32> poison, i32 [[TMP38]], i64 0
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <2 x i32> [[TMP42]], i32 [[TMP41]], i64 1
; CHECK-NEXT:    [[TMP44:%.*]] = extractelement <2 x i32> [[TMP33]], i64 0
; CHECK-NEXT:    [[TMP45:%.*]] = extractelement <2 x i32> [[TMP27]], i64 0
; CHECK-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP44]], i32 [[TMP45]], i32 16778500)
; CHECK-NEXT:    [[TMP47:%.*]] = extractelement <2 x i32> [[TMP33]], i64 1
; CHECK-NEXT:    [[TMP48:%.*]] = extractelement <2 x i32> [[TMP27]], i64 1
; CHECK-NEXT:    [[TMP49:%.*]] = call i32 @llvm.amdgcn.perm(i32 [[TMP47]], i32 [[TMP48]], i32 16778500)
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <2 x i32> poison, i32 [[TMP46]], i64 0
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <2 x i32> [[TMP50]], i32 [[TMP49]], i64 1
; CHECK-NEXT:    [[TMP52:%.*]] = select i1 [[TMP35]], <2 x i32> [[TMP43]], <2 x i32> [[TMP51]]
; CHECK-NEXT:    [[SHUFFLEVECTOR:%.*]] = shufflevector <2 x i32> [[TMP52]], <2 x i32> poison, <1 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <1 x i32> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP54:%.*]] = call i32 @llvm.amdgcn.permlane16.i32(i32 [[TMP53]], i32 [[TMP53]], i32 839939668, i32 -1164378404, i1 false, i1 false)
; CHECK-NEXT:    [[TMP55:%.*]] = call i32 @llvm.amdgcn.permlane64.i32(i32 [[TMP54]])
; CHECK-NEXT:    [[TMP56:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i64(i64 -1085102596360827121)
; CHECK-NEXT:    [[TMP57:%.*]] = select i1 [[TMP56]], i32 [[TMP53]], i32 [[TMP55]]
; CHECK-NEXT:    [[TMP58:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP57]], i32 [[TMP57]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP59:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i64(i64 -72056494543077121)
; CHECK-NEXT:    [[TMP60:%.*]] = select i1 [[TMP59]], i32 [[TMP57]], i32 [[TMP58]]
; CHECK-NEXT:    [[TMP61:%.*]] = insertelement <1 x i32> poison, i32 [[TMP60]], i64 0
; CHECK-NEXT:    [[SHUFFLEVECTOR1:%.*]] = shufflevector <1 x i32> [[TMP61]], <1 x i32> poison, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    ret <2 x i32> [[SHUFFLEVECTOR1]]
;
  %result = call <2 x i32> (...) @lgc.xdl.cooperative.matrix.transpose__v2i32(<2 x i32> %matrix, i32 3, i32 4)
  ret <2 x i32> %result
}

define <4 x float> @transpose_f16(<4 x float> %matrix) local_unnamed_addr #0 !lgc.shaderstage !0 {
; CHECK-LABEL: define <4 x float> @transpose_f16(
; CHECK-SAME: <4 x float> [[MATRIX:%.*]]) local_unnamed_addr #[[ATTR0]] !lgc.shaderstage [[META4]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = and i32 [[TMP2]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], 0
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[MATRIX]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast float [[TMP5]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP6]], i32 14570689)
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i32 [[TMP7]] to float
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <4 x float> [[MATRIX]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast float [[TMP9]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP10]], i32 14570689)
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i32 [[TMP11]] to float
; CHECK-NEXT:    [[TMP13:%.*]] = extractelement <4 x float> [[MATRIX]], i64 2
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast float [[TMP13]] to i32
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP14]], i32 14570689)
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32 [[TMP15]] to float
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <4 x float> [[MATRIX]], i64 3
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast float [[TMP17]] to i32
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 [[TMP18]], i32 14570689)
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32 [[TMP19]] to float
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <4 x float> poison, float [[TMP8]], i64 0
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <4 x float> [[TMP21]], float [[TMP12]], i64 1
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <4 x float> [[TMP22]], float [[TMP16]], i64 2
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <4 x float> [[TMP23]], float [[TMP20]], i64 3
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast <4 x float> [[MATRIX]] to <4 x i32>
; CHECK-NEXT:    [[TMP26:%.*]] = bitcast <4 x float> [[TMP24]] to <4 x i32>
; CHECK-NEXT:    [[TMP27:%.*]] = and <4 x i32> [[TMP25]], splat (i32 -65536)
; CHECK-NEXT:    [[TMP28:%.*]] = shl <4 x i32> [[TMP26]], splat (i32 16)
; CHECK-NEXT:    [[TMP29:%.*]] = select i1 [[TMP4]], <4 x i32> [[TMP28]], <4 x i32> [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = and <4 x i32> [[TMP25]], splat (i32 65535)
; CHECK-NEXT:    [[TMP31:%.*]] = lshr <4 x i32> [[TMP26]], splat (i32 16)
; CHECK-NEXT:    [[TMP32:%.*]] = select i1 [[TMP4]], <4 x i32> [[TMP30]], <4 x i32> [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = or <4 x i32> [[TMP29]], [[TMP32]]
; CHECK-NEXT:    [[TMP34:%.*]] = bitcast <4 x i32> [[TMP33]] to <4 x float>
; CHECK-NEXT:    [[SHUFFLEVECTOR:%.*]] = shufflevector <4 x float> [[TMP34]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[TMP35:%.*]] = extractelement <2 x float> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP36:%.*]] = bitcast float [[TMP35]] to i32
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP36]], i32 354, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP38:%.*]] = bitcast i32 [[TMP37]] to float
; CHECK-NEXT:    [[TMP39:%.*]] = extractelement <2 x float> [[SHUFFLEVECTOR]], i64 1
; CHECK-NEXT:    [[TMP40:%.*]] = bitcast float [[TMP39]] to i32
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP40]], i32 354, i32 15, i32 15, i1 true)
; CHECK-NEXT:    [[TMP42:%.*]] = bitcast i32 [[TMP41]] to float
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <2 x float> poison, float [[TMP38]], i64 0
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <2 x float> [[TMP43]], float [[TMP42]], i64 1
; CHECK-NEXT:    [[TMP45:%.*]] = and i32 [[TMP2]], 2
; CHECK-NEXT:    [[TMP46:%.*]] = icmp ne i32 [[TMP45]], 0
; CHECK-NEXT:    [[TMP47:%.*]] = xor i1 [[TMP46]], true
; CHECK-NEXT:    [[TMP48:%.*]] = extractelement <2 x float> [[SHUFFLEVECTOR]], i64 0
; CHECK-NEXT:    [[TMP49:%.*]] = extractelement <2 x float> [[TMP44]], i64 1
; CHECK-NEXT:    [[TMP50:%.*]] = select i1 [[TMP46]], float [[TMP49]], float [[TMP48]]
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <2 x float> poison, float [[TMP50]], i64 0
; CHECK-NEXT:    [[TMP52:%.*]] = extractelement <2 x float> [[SHUFFLEVECTOR]], i64 1
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <2 x float> [[TMP44]], i64 0
; CHECK-NEXT:    [[TMP54:%.*]] = select i1 [[TMP47]], float [[TMP53]], float [[TMP52]]
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <2 x float> [[TMP51]], float [[TMP54]], i64 1
; CHECK-NEXT:    [[TMP56:%.*]] = extractelement <2 x float> [[TMP55]], i64 0
; CHECK-NEXT:    [[TMP57:%.*]] = bitcast float [[TMP56]] to i32
; CHECK-NEXT:    [[TMP58:%.*]] = call i32 @llvm.amdgcn.permlane16.i32(i32 [[TMP57]], i32 [[TMP57]], i32 839939668, i32 -1164378404, i1 false, i1 false)
; CHECK-NEXT:    [[TMP59:%.*]] = call i32 @llvm.amdgcn.permlane64.i32(i32 [[TMP58]])
; CHECK-NEXT:    [[TMP60:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i64(i64 -1085102596360827121)
; CHECK-NEXT:    [[TMP61:%.*]] = select i1 [[TMP60]], i32 [[TMP57]], i32 [[TMP59]]
; CHECK-NEXT:    [[TMP62:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP61]], i32 [[TMP61]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP63:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i64(i64 -72056494543077121)
; CHECK-NEXT:    [[TMP64:%.*]] = select i1 [[TMP63]], i32 [[TMP61]], i32 [[TMP62]]
; CHECK-NEXT:    [[TMP65:%.*]] = bitcast i32 [[TMP64]] to float
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <2 x float> poison, float [[TMP65]], i64 0
; CHECK-NEXT:    [[TMP67:%.*]] = extractelement <2 x float> [[TMP55]], i64 1
; CHECK-NEXT:    [[TMP68:%.*]] = bitcast float [[TMP67]] to i32
; CHECK-NEXT:    [[TMP69:%.*]] = call i32 @llvm.amdgcn.permlane16.i32(i32 [[TMP68]], i32 [[TMP68]], i32 839939668, i32 -1164378404, i1 false, i1 false)
; CHECK-NEXT:    [[TMP70:%.*]] = call i32 @llvm.amdgcn.permlane64.i32(i32 [[TMP69]])
; CHECK-NEXT:    [[TMP71:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i64(i64 -1085102596360827121)
; CHECK-NEXT:    [[TMP72:%.*]] = select i1 [[TMP71]], i32 [[TMP68]], i32 [[TMP70]]
; CHECK-NEXT:    [[TMP73:%.*]] = call i32 @llvm.amdgcn.permlanex16.i32(i32 [[TMP72]], i32 [[TMP72]], i32 -19088744, i32 1985229328, i1 false, i1 false)
; CHECK-NEXT:    [[TMP74:%.*]] = call i1 @llvm.amdgcn.inverse.ballot.i64(i64 -72056494543077121)
; CHECK-NEXT:    [[TMP75:%.*]] = select i1 [[TMP74]], i32 [[TMP72]], i32 [[TMP73]]
; CHECK-NEXT:    [[TMP76:%.*]] = bitcast i32 [[TMP75]] to float
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <2 x float> [[TMP66]], float [[TMP76]], i64 1
; CHECK-NEXT:    [[SHUFFLEVECTOR1:%.*]] = shufflevector <2 x float> [[TMP77]], <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x float> [[SHUFFLEVECTOR1]]
;
  %result = call reassoc arcp contract afn <4 x float> (...) @lgc.xdl.cooperative.matrix.transpose__v4f32(<4 x float> %matrix, i32 1, i32 4)
  ret <4 x float> %result
}

declare <2 x i32> @lgc.xdl.cooperative.matrix.transpose__v2i32(...)
declare <4 x float> @lgc.xdl.cooperative.matrix.transpose__v4f32(...)

attributes #0 = { nounwind }

!llpc.compute.mode = !{!3}

!lgc.wave.size = !{!4}
!lgc.subgroup.size = !{!4}

; ShaderStage::Compute
!0 = !{i32 7}
; Compute mode, containing workgroup size
!3 = !{i32 128, i32 1, i32 1}
!4 = !{i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64}
;.
; CHECK: [[META4]] = !{i32 7}
;.
