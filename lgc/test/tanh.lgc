
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --tool lgc --march amdgcn --version 4
; RUN: lgc -mcpu=gfx1100 -filetype=asm -o - %s | FileCheck --check-prefixes=CHECK %s

; ModuleID = 'LLPC module'
source_filename = "LLPC module"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn--amdpal"

define float @sample(float %x) !lgc.shaderstage !1 {
; CHECK-LABEL: sample:
; CHECK:         s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_mul_f32_e64 v1, |v0|, -2.0
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f32_e32 v1, 0x3fb8aa3b, v1
; CHECK-NEXT:    v_exp_f32_e32 v1, v1
; CHECK-NEXT:    s_waitcnt_depctr 0xfff
; CHECK-NEXT:    v_add_f32_e32 v1, 1.0, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_cmp_lt_f32_e64 s[0:1], 0x6f800000, |v1|
; CHECK-NEXT:    v_cndmask_b32_e64 v2, 1.0, 0x2f800000, s[0:1]
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f32_e32 v1, v1, v2
; CHECK-NEXT:    v_rcp_f32_e32 v1, v1
; CHECK-NEXT:    s_waitcnt_depctr 0xfff
; CHECK-NEXT:    v_add_f32_e32 v1, v1, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f32_e32 v1, v2, v1
; CHECK-NEXT:    v_sub_f32_e32 v1, 1.0, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; CHECK-NEXT:    v_bfi_b32 v0, 0x7fffffff, v1, v0
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %y = call float @lgc.create.tanh.f32(float %x)
  ret float %y
}

; Function Attrs: nounwind memory(none)
declare float @lgc.create.tanh.f32(...) #2

attributes #0 = { nounwind memory(none) }

!llpc.compute.mode = !{!0}

!0 = !{i32 8, i32 8, i32 1}
!1 = !{i32 7}
