; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --tool lgc --march amdgcn --version 4
; RUN: lgc -mcpu=gfx1100 -filetype=asm -o - %s | FileCheck --check-prefixes=CHECK %s

; ModuleID = 'LLPC module'
source_filename = "LLPC module"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn--amdpal"

define float @sample(float %x) !lgc.shaderstage !1 {
; CHECK-LABEL: sample:
; CHECK:         s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    v_mul_f32_e64 v1, |v0|, -2.0
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f32_e32 v1, 0x3fb8aa3b, v1
; CHECK-NEXT:    v_exp_f32_e32 v1, v1
; CHECK-NEXT:    s_waitcnt_depctr 0xfff
; CHECK-NEXT:    v_add_f32_e32 v1, 1.0, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_cmp_lt_f32_e64 s[0:1], 0x6f800000, |v1|
; CHECK-NEXT:    v_cndmask_b32_e64 v2, 1.0, 0x2f800000, s[0:1]
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f32_e32 v1, v1, v2
; CHECK-NEXT:    v_rcp_f32_e32 v1, v1
; CHECK-NEXT:    s_waitcnt_depctr 0xfff
; CHECK-NEXT:    v_add_f32_e32 v1, v1, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f32_e32 v1, v2, v1
; CHECK-NEXT:    v_sub_f32_e32 v1, 1.0, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; CHECK-NEXT:    v_bfi_b32 v0, 0x7fffffff, v1, v0
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %y = call float @lgc.create.tanh.f32(float %x)
  ret float %y
}

; Function Attrs: nounwind willreturn memory(read)
declare !lgc.create.opcode !2 i32 @lgc.create.read.builtin.input.i32(...) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(7) @lgc.load.buffer.desc(i64, i32, i32, i32) #1

; Function Attrs: nounwind memory(none)
declare !lgc.create.opcode !3 float @lgc.create.tanh.f32(...) #2

attributes #0 = { nounwind willreturn memory(read) }
attributes #1 = { nounwind willreturn memory(none) }
attributes #2 = { nounwind memory(none) }

!llpc.compute.mode = !{!0}

!0 = !{i32 8, i32 8, i32 1}
!1 = !{i32 7}
!2 = !{i32 77}
!3 = !{i32 17}
