; BEGIN_SHADERTEST
; RUN: amdllpc -spvgen-dir=%spvgendir% -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} pipeline patching results


[Version]
version = 40

[VsGlsl]
#version 450 core

layout(location = 0) in vec4 inV0;

layout(location = 0) out vec4 out1;

void main(void)
{
    gl_Position = inV0;
    out1 = inV0;
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 450 core

layout(location = 0) in vec4 color_in;
layout(location = 0) out vec4 color_out;

void main() {
  vec2 localData[16];
  // Bounds checks for the loop get optimized away
  for (int i = 0; i < 16; i++)
    localData[i] = vec2(color_in.x + i + 5);

/*
; SHADERTEST: = icmp ult i32 %[[#]], 16
; SHADERTEST: br i1 %

; SHADERTEST: = getelementptr [16 x <2 x float>], [16 x <2 x float>] addrspace(5)* %
; SHADERTEST: = load float, float addrspace(5)* %
; SHADERTEST: br label %

; SHADERTEST: = phi float [ %[[#]], %[[#]] ], [ 0.000000e+00, %.entry ]

; SHADERTEST-LABEL: {{^// LLPC}} final pipeline module info
; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST
*/

  // Read out-of-bounds of the stack array
  float v = localData[int(color_in.x * 255) + 5024].x;

  color_out = vec4(v, 0.0, 0.0, 1.0);
}

[FsInfo]
entryPoint = main

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
patchControlPoints = 3
deviceIndex = 0
disableVertexReuse = 0
switchWinding = 0
enableMultiView = 0
depthClipEnable = 1
rasterizerDiscardEnable = 0
perSampleShading = 0
numSamples = 1
samplePatternIdx = 0
usrClipPlaneMask = 0
polygonMode = VK_POLYGON_MODE_FILL
cullMode = VK_CULL_MODE_NONE
frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE
depthBiasEnable = 0
alphaToCoverageEnable = 0
dualSourceBlendEnable = 0
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 1
nggState.enableNgg = 0
nggState.enableGsUse = 0
nggState.forceNonPassthrough = 0
nggState.alwaysUsePrimShaderTable = 0
nggState.compactMode = NggCompactDisable
nggState.enableFastLaunch = 0
nggState.enableVertexReuse = 0
nggState.enableBackfaceCulling = 0
nggState.enableFrustumCulling = 0
nggState.enableBoxFilterCulling = 0
nggState.enableSphereCulling = 0
nggState.enableSmallPrimFilter = 0
nggState.enableCullDistanceCulling = 0
nggState.backfaceExponent = 0
nggState.subgroupSizing = Auto
nggState.primsPerSubgroup = 0
nggState.vertsPerSubgroup = 0
options.includeDisassembly = 0
options.scalarBlockLayout = 1
options.includeIr = 0
options.robustBufferAccess = 0
options.enableScratchBoundsCheck = 1
options.reconfigWorkgroupLayout = 0
options.shadowDescriptorTableUsage = Enable
options.shadowDescriptorTablePtrHigh = 2
options.extendedRobustness.robustBufferAccess = 0
options.extendedRobustness.robustImageAccess = 0
options.extendedRobustness.nullDescriptor = 0


[VertexInputState]
binding[0].binding = 0
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 1
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32_SFLOAT
attribute[1].offset = 0
attribute[2].location = 2
attribute[2].binding = 0
attribute[2].format = VK_FORMAT_R32G32_SFLOAT
attribute[2].offset = 0
