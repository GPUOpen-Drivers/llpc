;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; RUN: amdllpc -gfxip 11.0 -o - -filetype=asm %s | FileCheck -check-prefix=CHECK %s

[Version]
version = 68

[CsGlsl]
#version 450 core

layout(push_constant) uniform PushConstants {
    uint pc_index;
    float pc_array[32];
};

layout(set = 0, binding = 0) buffer BO {
    float x;
} bos[8];

void main() {
    bos[0].x = pc_array[pc_index] + bos[1].x + bos[2].x + bos[3].x + bos[4].x + bos[5].x + bos[6].x + bos[7].x;
}

[CsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].type = DescriptorBufferCompact
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 16
userDataNode[0].set = 0
userDataNode[0].binding = 0
userDataNode[0].strideInDwords = 2
userDataNode[1].type = PushConst
userDataNode[1].offsetInDwords = 16
userDataNode[1].sizeInDwords = 33
userDataNode[1].set = 0xFFFFFFFF
userDataNode[1].binding = 0

[ComputePipelineState]
deviceIndex = 0

; The shader and pipeline is set up to:
;  - use all user data nodes
;  - dynamically index into the push constants, which a priori forces spilling regardless of user data register
;    availability
;  - actually spill a descriptor
; There was at one point a regression in which the spill threshold wasn't set low enough.
;
; CHECK: .spill_threshold: 0xe
