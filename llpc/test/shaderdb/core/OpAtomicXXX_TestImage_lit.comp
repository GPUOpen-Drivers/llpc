/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

#version 450 core

layout(set = 0, binding = 0, r32i)  uniform iimage2D iImg;
layout(set = 0, binding = 1, r32ui) uniform uimage2D uImg;
layout(set = 0, binding = 2, r32f)  uniform image2D  fImg;

layout(set = 1, binding = 0) buffer BO
{
    int   m1;
    uint  m2;
    float m3;
};

void main()
{
    int  temp   = 0;
    uint utemp  = 0;
    float ftemp = 0.f;
    temp += imageAtomicAdd(iImg, ivec2(7, 7), 9);
    temp += imageAtomicMin(iImg, ivec2(7, 7), 9);
    temp += imageAtomicMax(iImg, ivec2(7, 7), 9);
    temp += imageAtomicAnd(iImg, ivec2(7, 7), 9);
    temp += imageAtomicOr(iImg, ivec2(7, 7), 9);
    temp += imageAtomicXor(iImg, ivec2(7, 7), 9);
    temp += imageAtomicExchange(iImg, ivec2(7, 7), 9);
    temp += imageAtomicCompSwap(iImg, ivec2(7, 7), 8, 9);

    utemp += imageAtomicAdd(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicMin(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicMax(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicAnd(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicOr(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicXor(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicExchange(uImg, ivec2(7, 7), 9u);
    utemp += imageAtomicCompSwap(uImg, ivec2(7, 7), 8u, 9u);

    ftemp += imageAtomicExchange(fImg, ivec2(7, 7), 9.0f);

    m1 = temp;
    m2 = utemp;
    m3 = ftemp;
}

// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s

; SHADERTEST-LABEL: {{^// LLPC}} FE lowering results
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 2, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 4, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 6, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 8, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 9, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 10, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 0, i32 1, i32 512, i32 0, ptr addrspace(4) %{{[-0-9A-Za0z_.]+}}, <2 x i32> {{(splat \(i32 7\))|(<i32 7, i32 7>)}}, i32 9)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.compare.swap.i32(i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 2, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 5, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 7, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 8, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 9, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 10, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.i32(i32 0, i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call i32 (...) @lgc.create.image.atomic.compare.swap.i32(i32 1, i32 512, i32 0, ptr addrspace(4)
; SHADERTEST: call reassoc nnan nsz arcp contract afn float (...) @lgc.create.image.atomic.f32(i32 0, i32 1, i32 512, i32 0, ptr addrspace(4)

; SHADERTEST-LABEL: {{^// LLPC}} LGC lowering results
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.add.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.smin.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.smax.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.and.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.or.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.xor.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.swap.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.cmpswap.2d.i32.i16{{(\.v8i32)?}}(i32 9, i32 8, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.add.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.umin.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.umax.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.and.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.or.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.xor.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.swap.2d.i32.i16{{(\.v8i32)?}}(i32 9, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.atomic.cmpswap.2d.i32.i16{{(\.v8i32)?}}(i32 9, i32 8, i16 7, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call {{.*}} float @llvm.amdgcn.image.atomic.swap.2d.f32.{{i32|i16}}{{(\.v8i32)?}}(float 9.000000e+00, {{i32|i16}} 7, {{i32|i16}} 7, <8 x i32> %{{[-0-9A-Za0z_.]+}}, i32 0, i32 0)

; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
