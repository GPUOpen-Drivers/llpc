/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

#version 450

layout(local_size_x = 8) in;

shared int  imem;
shared uint umem[4];

layout(binding = 0) uniform Uniforms
{
    int   idata;
    uint  udata;

    int index;
};

shared uvec4 u4;

void main()
{
    int i1  = 0;
    uint u1 = 0;

    switch (gl_LocalInvocationID.x)
    {
    case 0:
        i1 = atomicAdd(imem, idata);
        u1 = atomicAdd(umem[1], udata);
        break;
    case 1:
        i1 = atomicMin(imem, idata);
        u1 = atomicMin(umem[0], udata);
        break;
    case 2:
        i1 = atomicMax(imem, idata);
        u1 = atomicMax(umem[2], udata);
        break;
    case 3:
        i1 = atomicAnd(imem, idata);
        u1 = atomicAnd(umem[3], udata);
        break;
    case 4:
        i1 = atomicOr(imem, idata);
        u1 = atomicOr(umem[index], udata);
        break;
    case 5:
        i1 = atomicXor(imem, idata);
        u1 = atomicXor(umem[index], udata);
        break;
    case 6:
        i1 = atomicExchange(imem, idata);
        u1 = atomicExchange(umem[index], udata);
        break;
    case 7:
        i1 = atomicCompSwap(imem, 28, idata);
        u1 = atomicCompSwap(umem[index], 17u, udata);
        break;
    }

    u4[i1 % 4] = u1;
}
// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s

; SHADERTEST-LABEL: {{^// LLPC}} FE lowering results
; SHADERTEST: @{{.*}} = addrspace(3) global i32
; SHADERTEST: @{{.*}} = addrspace(3) global [4 x i32]
; SHADERTEST: atomicrmw add ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw add ptr addrspace(3) getelementptr inbounds {{(nuw )?}}(i8, ptr addrspace(3) @{{.*}}, i32 4), i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw min ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw umin ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw max ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw umax ptr addrspace(3) getelementptr inbounds {{(nuw )?}}(i8, ptr addrspace(3) @{{.*}}, i32 8), i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw and ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw and ptr addrspace(3) getelementptr inbounds {{(nuw )?}}(i8, ptr addrspace(3) @{{.*}}, i32 12), i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw or ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw or ptr addrspace(3) %{{[0-9]*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw xor ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw xor ptr addrspace(3) %{{[0-9]*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw xchg ptr addrspace(3) @{{.*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic
; SHADERTEST: atomicrmw xchg ptr addrspace(3) %{{[0-9]*}}, i32 %{{[0-9]*}} syncscope("agent") monotonic

; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
