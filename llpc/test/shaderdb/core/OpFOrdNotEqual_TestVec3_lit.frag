// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
// RUN: amdllpc -o - -gfxip 11.0 -emit-lgc %s | FileCheck -check-prefixes=CHECK %s

#version 450

layout(binding = 0) uniform Uniforms
{
    vec3 f3_0, f3_1;
};

layout(location = 0) out vec4 fragColor;

void main()
{
    fragColor = (f3_0 != f3_1) ? vec4(1.0) : vec4(0.5);
}

// CHECK-LABEL: @lgc.shader.FS.main(
// CHECK-NEXT:  .entry:
// CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 0)
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
// CHECK-NEXT:    [[TMP2:%.*]] = load <3 x float>, ptr addrspace(7) [[TMP0]], align 16
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr {{inbounds i8|<{ [[]3 x float], [[]4 x i8], [[]3 x float] }>|i8}}, ptr addrspace(7) [[TMP0]], i32 {{16|0, i32 2}}
// CHECK-NEXT:    [[TMP4:%.*]] = load <3 x float>, ptr addrspace(7) [[TMP3]], align 16
// CHECK-NEXT:    [[TMP5:%.*]] = extractelement <3 x float> [[TMP2]], i64 0
// CHECK-NEXT:    [[TMP6:%.*]] = extractelement <3 x float> [[TMP4]], i64 0
// CHECK-NEXT:    [[TMP7:%.*]] = fcmp une float [[TMP5]], [[TMP6]]
// CHECK-NEXT:    [[TMP8:%.*]] = extractelement <3 x float> [[TMP2]], i64 1
// CHECK-NEXT:    [[TMP9:%.*]] = extractelement <3 x float> [[TMP4]], i64 1
// CHECK-NEXT:    [[TMP10:%.*]] = fcmp une float [[TMP8]], [[TMP9]]
// CHECK-NEXT:    [[TMP11:%.*]] = extractelement <3 x float> [[TMP2]], i64 2
// CHECK-NEXT:    [[TMP12:%.*]] = extractelement <3 x float> [[TMP4]], i64 2
// CHECK-NEXT:    [[TMP13:%.*]] = fcmp une float [[TMP11]], [[TMP12]]
// CHECK-NEXT:    [[TMP14:%.*]] = or i1 [[TMP7]], [[TMP10]]
// CHECK-NEXT:    [[TMP15:%.*]] = or i1 [[TMP14]], [[TMP13]]
// CHECK-NEXT:    [[TMP16:%.*]] = select reassoc nnan nsz arcp contract afn i1 [[TMP15]], <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
// CHECK-NEXT:    call void (...) @lgc.create.write.generic.output(<4 x float> [[TMP16]], i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
// CHECK-NEXT:    ret void
//
