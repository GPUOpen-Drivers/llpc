#version 450 core

layout(set = 0, binding = 0,  rgba8)  uniform image1D img1D;
layout(set = 0, binding = 1,  rgba8)  uniform image2D img2D;
layout(set = 0, binding = 2,  rgba8)  uniform image3D img3D;
layout(set = 0, binding = 3,  rgba8)  uniform imageCube imgCube;
layout(set = 0, binding = 4,  rgba8)  uniform image2DRect imgRect;
layout(set = 0, binding = 5,  rgba8)  uniform image1DArray img1DA;
layout(set = 0, binding = 6,  rgba8)  uniform image2DArray img2DA;
layout(set = 0, binding = 7,  rgba8)  uniform imageCubeArray imgCubeA;
layout(set = 0, binding = 8,  rgba8)  uniform image2DMS img2DMS;
layout(set = 0, binding = 9,  rgba8)  uniform image2DMSArray img2DMSA;
layout(set = 0, binding = 10, rgba8)  uniform imageBuffer imgBuffer;

layout(set = 1, binding = 0) buffer BO
{
    int   mOut1;
    ivec2 mOut2;
    ivec3 mOut3;
};

void main()
{
    mOut1  = imageSize(img1D);
    mOut2  = imageSize(img2D);
    mOut3  = imageSize(img3D);

    mOut2 += imageSize(imgCube);
    mOut2 += imageSize(imgRect);
    mOut2 += imageSize(img1DA);
    mOut3 += imageSize(img2DA);
    mOut3 += imageSize(imgCubeA);
    mOut2 += imageSize(img2DMS);
    mOut3 += imageSize(img2DMSA);
    mOut1 += imageSize(imgBuffer);
}

// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST-LABEL: {{^// LLPC}}  SPIR-V lowering results
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 9)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 8)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 6)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 5)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 4)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 3)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 2)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 1)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.i32(i32 0, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v2i32(i32 1, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v3i32(i32 2, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v2i32(i32 3, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v2i32(i32 9, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v2i32(i32 4, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v3i32(i32 5, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v3i32(i32 8, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v2i32(i32 6, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.v3i32(i32 7, i32 512, {{.*}}, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.query.size.i32(i32 10, i32 512, {{.*}}, i32 0)

; SHADERTEST-LABEL: {{^// LLPC}}  pipeline patching results
; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
