#version 450 core
#extension GL_AMD_shader_image_load_store_lod : enable

layout(set = 0, binding = 0,  r32i) uniform iimage1D        img1D;
layout(set = 0, binding = 1,  r32i) uniform iimage2D        img2D;
layout(set = 0, binding = 2,  r32i) uniform iimage3D        img3D;
layout(set = 0, binding = 3,  r32i) uniform iimageCube      imgCube;
layout(set = 0, binding = 4,  r32i) uniform iimage1DArray   img1DArray;
layout(set = 0, binding = 5,  r32i) uniform iimage2DArray   img2DArray;
layout(set = 0, binding = 6,  r32i) uniform iimageCubeArray imgCubeArray;

void main()
{
    ivec4 temp = ivec4(0);
    temp += imageLoadLodAMD(img1D,          9,              7);
    temp += imageLoadLodAMD(img2D,          ivec2(9, 9),    7);
    temp += imageLoadLodAMD(img3D,          ivec3(9, 9, 9), 7);
    temp += imageLoadLodAMD(imgCube,        ivec3(9, 9, 9), 7);
    temp += imageLoadLodAMD(img1DArray,     ivec2(9, 9),    7);
    temp += imageLoadLodAMD(img2DArray,     ivec3(9, 9, 9), 7);
    temp += imageLoadLodAMD(imgCubeArray,   ivec3(9, 9, 9), 7);

    imageStoreLodAMD(img1D,          9,              7, temp);
    imageStoreLodAMD(img2D,          ivec2(9, 9),    7, temp);
    imageStoreLodAMD(img3D,          ivec3(9, 9, 9), 7, temp);
    imageStoreLodAMD(imgCube,        ivec3(9, 9, 9), 7, temp);
    imageStoreLodAMD(img1DArray,     ivec2(9, 9),    7, temp);
    imageStoreLodAMD(img2DArray,     ivec3(9, 9, 9), 7, temp);
    imageStoreLodAMD(imgCubeArray,   ivec3(9, 9, 9), 7, temp);
}

// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST-LABEL: {{^// LLPC}}  SPIR-V lowering results
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 6)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 5)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 4)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 3)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 2)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 1)
; SHADERTEST: call {{.*}} @lgc.create.get.desc.ptr.p4(i32 1, i32 1, i64 0, i32 0)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 0, i32 516, {{.*}}, i32 9, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 1, i32 516, {{.*}}, <2 x i32> <i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 2, i32 516, {{.*}}, <3 x i32> <i32 9, i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 3, i32 516, {{.*}}, <3 x i32> <i32 9, i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 4, i32 516, {{.*}}, <2 x i32> <i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 5, i32 516, {{.*}}, <3 x i32> <i32 9, i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.load.v4i32(i32 8, i32 516, {{.*}}, <4 x i32> <i32 9, i32 9, i32 3, i32 1>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 0, i32 516, {{.*}}, i32 9, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 1, i32 516, {{.*}}, <2 x i32> <i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 2, i32 516, {{.*}}, <3 x i32> <i32 9, i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 3, i32 516, {{.*}}, <3 x i32> <i32 9, i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 4, i32 516, {{.*}}, <2 x i32> <i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 5, i32 516, {{.*}}, <3 x i32> <i32 9, i32 9, i32 9>, i32 7)
; SHADERTEST: call {{.*}} @lgc.create.image.store({{.*}}, i32 8, i32 516, {{.*}}, <4 x i32> <i32 9, i32 9, i32 3, i32 1>, i32 7)

; SHADERTEST-LABEL: LLPC pipeline patching results
; SHADERTEST: call i32 @llvm.amdgcn.image.load.mip.1d.i32.i16(i32 1, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.load.mip.2d.i32.i16(i32 1, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.load.mip.3d.i32.i16(i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.load.mip.cube.i32.i16(i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.load.mip.1darray.i32.i16(i32 1, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: call i32 @llvm.amdgcn.image.load.mip.2darray.i32.i16(i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.1d.f32.i16(float %{{.*}}, i32 1, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.2d.f32.i16(float %{{.*}}, i32 1, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.3d.f32.i16(float %{{.*}}, i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.cube.f32.i16(float %{{.*}}, i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.1darray.f32.i16(float %{{.*}}, i32 1, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.2darray.f32.i16(float %{{.*}}, i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST:  call void @llvm.amdgcn.image.store.mip.cube.f32.i16(float %{{.*}}, i32 1, i16 9, i16 9, i16 9, i16 7, <8 x i32> %{{.*}}, i32 0, i32 0)
; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
