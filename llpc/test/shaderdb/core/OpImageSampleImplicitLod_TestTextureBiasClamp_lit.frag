// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --version 5
#version 450
/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/
// RUN: amdllpc --print-after=lgc-builder-replayer %s 2>&1 | FileCheck -check-prefix=SHADERTEST %s
#extension GL_ARB_sparse_texture_clamp : enable

layout(set = 0, binding = 0) uniform sampler1D          samp1D[4];
layout(set = 1, binding = 0) uniform sampler2D          samp2D;
layout(set = 2, binding = 0) uniform sampler3D          samp3D;
layout(set = 3, binding = 0) uniform samplerCube        sampCube;
layout(set = 4, binding = 0) uniform sampler1DArray     samp1DArray;
layout(set = 5, binding = 0) uniform sampler2DArray     samp2DArray;
layout(set = 6, binding = 0) uniform samplerCubeArray   sampCubeArray;

layout(set = 7, binding = 0) uniform Uniforms
{
    int   index;
    float lodClamp;
    vec4  nonConstVec;
};

layout(location = 0) out vec4 fragColor;

void main()
{
    fragColor = vec4(0.0);

    fragColor += textureClampARB(samp1D[index], nonConstVec.x, lodClamp, 2.0);

    fragColor += textureClampARB(samp2D, nonConstVec.xy, lodClamp, 2.0);

    fragColor += textureClampARB(samp3D, nonConstVec.xyz, lodClamp, 2.0);

    fragColor += textureClampARB(sampCube, nonConstVec.xyz, lodClamp, 2.0);

    fragColor += textureClampARB(samp1DArray, nonConstVec.xy, lodClamp, 2.0);

    fragColor += textureClampARB(samp2DArray, nonConstVec.xyz, lodClamp, 2.0);

    fragColor += textureClampARB(sampCubeArray, nonConstVec.xyzw, lodClamp, 2.0);
}
// SHADERTEST-LABEL: define dllexport spir_func void @lgc.shader.FS.main(
// SHADERTEST-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META23:![0-9]+]] !lgc.shaderstage [[META24:![0-9]+]] {
// SHADERTEST-NEXT:  [[_ENTRY:.*:]]
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP4:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP5:%.*]] = bitcast i64 [[TMP4]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP6]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP8:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP9:%.*]] = bitcast i64 [[TMP8]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP10:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP11:%.*]] = bitcast i64 [[TMP10]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP12:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP13:%.*]] = bitcast i64 [[TMP12]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP14:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP15:%.*]] = bitcast i64 [[TMP14]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP16:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP17:%.*]] = bitcast i64 [[TMP16]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP18:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP19:%.*]] = bitcast i64 [[TMP18]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP20:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP21:%.*]] = bitcast i64 [[TMP20]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP22:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP23:%.*]] = bitcast i64 [[TMP22]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP24:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP25:%.*]] = bitcast i64 [[TMP24]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP26:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP27:%.*]] = bitcast i64 [[TMP26]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP28:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 7, i32 0, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP29:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP28]])
// SHADERTEST-NEXT:    [[TMP30:%.*]] = call i32 @lgc.load.user.data__i32(i32 24)
// SHADERTEST-NEXT:    [[TMP31:%.*]] = insertelement <2 x i32> [[TMP25]], i32 [[TMP30]], i64 0
// SHADERTEST-NEXT:    [[TMP32:%.*]] = bitcast <2 x i32> [[TMP31]] to i64
// SHADERTEST-NEXT:    [[TMP33:%.*]] = inttoptr i64 [[TMP32]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP33]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP33]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP34:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP33]], i32 0
// SHADERTEST-NEXT:    [[TMP35:%.*]] = call i32 @lgc.load.user.data__i32(i32 24)
// SHADERTEST-NEXT:    [[TMP36:%.*]] = insertelement <2 x i32> [[TMP27]], i32 [[TMP35]], i64 0
// SHADERTEST-NEXT:    [[TMP37:%.*]] = bitcast <2 x i32> [[TMP36]] to i64
// SHADERTEST-NEXT:    [[TMP38:%.*]] = inttoptr i64 [[TMP37]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP38]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP38]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP39:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP38]], i32 32
// SHADERTEST-NEXT:    [[TMP40:%.*]] = call i32 @lgc.load.user.data__i32(i32 20)
// SHADERTEST-NEXT:    [[TMP41:%.*]] = insertelement <2 x i32> [[TMP21]], i32 [[TMP40]], i64 0
// SHADERTEST-NEXT:    [[TMP42:%.*]] = bitcast <2 x i32> [[TMP41]] to i64
// SHADERTEST-NEXT:    [[TMP43:%.*]] = inttoptr i64 [[TMP42]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP43]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP43]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP43]], i32 0
// SHADERTEST-NEXT:    [[TMP45:%.*]] = call i32 @lgc.load.user.data__i32(i32 20)
// SHADERTEST-NEXT:    [[TMP46:%.*]] = insertelement <2 x i32> [[TMP23]], i32 [[TMP45]], i64 0
// SHADERTEST-NEXT:    [[TMP47:%.*]] = bitcast <2 x i32> [[TMP46]] to i64
// SHADERTEST-NEXT:    [[TMP48:%.*]] = inttoptr i64 [[TMP47]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP48]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP48]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP49:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP48]], i32 32
// SHADERTEST-NEXT:    [[TMP50:%.*]] = call i32 @lgc.load.user.data__i32(i32 16)
// SHADERTEST-NEXT:    [[TMP51:%.*]] = insertelement <2 x i32> [[TMP17]], i32 [[TMP50]], i64 0
// SHADERTEST-NEXT:    [[TMP52:%.*]] = bitcast <2 x i32> [[TMP51]] to i64
// SHADERTEST-NEXT:    [[TMP53:%.*]] = inttoptr i64 [[TMP52]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP53]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP53]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP54:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP53]], i32 0
// SHADERTEST-NEXT:    [[TMP55:%.*]] = call i32 @lgc.load.user.data__i32(i32 16)
// SHADERTEST-NEXT:    [[TMP56:%.*]] = insertelement <2 x i32> [[TMP19]], i32 [[TMP55]], i64 0
// SHADERTEST-NEXT:    [[TMP57:%.*]] = bitcast <2 x i32> [[TMP56]] to i64
// SHADERTEST-NEXT:    [[TMP58:%.*]] = inttoptr i64 [[TMP57]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP58]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP58]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP59:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP58]], i32 32
// SHADERTEST-NEXT:    [[TMP60:%.*]] = call i32 @lgc.load.user.data__i32(i32 12)
// SHADERTEST-NEXT:    [[TMP61:%.*]] = insertelement <2 x i32> [[TMP13]], i32 [[TMP60]], i64 0
// SHADERTEST-NEXT:    [[TMP62:%.*]] = bitcast <2 x i32> [[TMP61]] to i64
// SHADERTEST-NEXT:    [[TMP63:%.*]] = inttoptr i64 [[TMP62]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP63]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP63]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP64:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP63]], i32 0
// SHADERTEST-NEXT:    [[TMP65:%.*]] = call i32 @lgc.load.user.data__i32(i32 12)
// SHADERTEST-NEXT:    [[TMP66:%.*]] = insertelement <2 x i32> [[TMP15]], i32 [[TMP65]], i64 0
// SHADERTEST-NEXT:    [[TMP67:%.*]] = bitcast <2 x i32> [[TMP66]] to i64
// SHADERTEST-NEXT:    [[TMP68:%.*]] = inttoptr i64 [[TMP67]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP68]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP68]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP69:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP68]], i32 32
// SHADERTEST-NEXT:    [[TMP70:%.*]] = call i32 @lgc.load.user.data__i32(i32 8)
// SHADERTEST-NEXT:    [[TMP71:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP70]], i64 0
// SHADERTEST-NEXT:    [[TMP72:%.*]] = bitcast <2 x i32> [[TMP71]] to i64
// SHADERTEST-NEXT:    [[TMP73:%.*]] = inttoptr i64 [[TMP72]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP73]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP73]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP74:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP73]], i32 0
// SHADERTEST-NEXT:    [[TMP75:%.*]] = call i32 @lgc.load.user.data__i32(i32 8)
// SHADERTEST-NEXT:    [[TMP76:%.*]] = insertelement <2 x i32> [[TMP11]], i32 [[TMP75]], i64 0
// SHADERTEST-NEXT:    [[TMP77:%.*]] = bitcast <2 x i32> [[TMP76]] to i64
// SHADERTEST-NEXT:    [[TMP78:%.*]] = inttoptr i64 [[TMP77]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP78]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP78]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP79:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP78]], i32 32
// SHADERTEST-NEXT:    [[TMP80:%.*]] = call i32 @lgc.load.user.data__i32(i32 4)
// SHADERTEST-NEXT:    [[TMP81:%.*]] = insertelement <2 x i32> [[TMP5]], i32 [[TMP80]], i64 0
// SHADERTEST-NEXT:    [[TMP82:%.*]] = bitcast <2 x i32> [[TMP81]] to i64
// SHADERTEST-NEXT:    [[TMP83:%.*]] = inttoptr i64 [[TMP82]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP83]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP83]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP84:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP83]], i32 0
// SHADERTEST-NEXT:    [[TMP85:%.*]] = call i32 @lgc.load.user.data__i32(i32 4)
// SHADERTEST-NEXT:    [[TMP86:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP85]], i64 0
// SHADERTEST-NEXT:    [[TMP87:%.*]] = bitcast <2 x i32> [[TMP86]] to i64
// SHADERTEST-NEXT:    [[TMP88:%.*]] = inttoptr i64 [[TMP87]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP88]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP88]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP89:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP88]], i32 32
// SHADERTEST-NEXT:    [[TMP90:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP91:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP90]], i64 0
// SHADERTEST-NEXT:    [[TMP92:%.*]] = bitcast <2 x i32> [[TMP91]] to i64
// SHADERTEST-NEXT:    [[TMP93:%.*]] = inttoptr i64 [[TMP92]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP93]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP93]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP94:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP93]], i32 0
// SHADERTEST-NEXT:    [[TMP95:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP96:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP95]], i64 0
// SHADERTEST-NEXT:    [[TMP97:%.*]] = bitcast <2 x i32> [[TMP96]] to i64
// SHADERTEST-NEXT:    [[TMP98:%.*]] = inttoptr i64 [[TMP97]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP98]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP98]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP99:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP98]], i32 32
// SHADERTEST-NEXT:    [[TMP100:%.*]] = load i32, ptr addrspace(7) [[TMP28]], align 4
// SHADERTEST-NEXT:    [[TMP101:%.*]] = mul i32 [[TMP100]], 48
// SHADERTEST-NEXT:    [[TMP102:%.*]] = sext i32 [[TMP101]] to i64
// SHADERTEST-NEXT:    [[TMP103:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP94]], i64 [[TMP102]]
// SHADERTEST-NEXT:    [[TMP104:%.*]] = mul i32 [[TMP100]], 48
// SHADERTEST-NEXT:    [[TMP105:%.*]] = sext i32 [[TMP104]] to i64
// SHADERTEST-NEXT:    [[TMP106:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP99]], i64 [[TMP105]]
// SHADERTEST-NEXT:    [[TMP107:%.*]] = getelementptr i8, ptr addrspace(7) [[TMP28]], i32 16
// SHADERTEST-NEXT:    [[TMP108:%.*]] = load float, ptr addrspace(7) [[TMP107]], align 4
// SHADERTEST-NEXT:    [[TMP109:%.*]] = getelementptr i8, ptr addrspace(7) [[TMP28]], i32 4
// SHADERTEST-NEXT:    [[TMP110:%.*]] = load float, ptr addrspace(7) [[TMP109]], align 4
// SHADERTEST-NEXT:    [[TMP111:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP103]], align 4, !invariant.load [[META25:![0-9]+]]
// SHADERTEST-NEXT:    [[TMP112:%.*]] = call <8 x i32> @llvm.amdgcn.readfirstlane.v8i32(<8 x i32> [[TMP111]])
// SHADERTEST-NEXT:    [[TMP113:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP106]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP114:%.*]] = call <4 x i32> @llvm.amdgcn.readfirstlane.v4i32(<4 x i32> [[TMP113]])
// SHADERTEST-NEXT:    [[TMP115:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.1d.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP108]], float [[TMP110]], <8 x i32> [[TMP112]], <4 x i32> [[TMP114]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP116:%.*]] = load <4 x float>, ptr addrspace(7) [[TMP107]], align 16
// SHADERTEST-NEXT:    [[TMP117:%.*]] = shufflevector <4 x float> [[TMP116]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
// SHADERTEST-NEXT:    [[TMP118:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP84]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP119:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP89]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP120:%.*]] = extractelement <2 x float> [[TMP117]], i64 0
// SHADERTEST-NEXT:    [[TMP121:%.*]] = extractelement <2 x float> [[TMP117]], i64 1
// SHADERTEST-NEXT:    [[TMP122:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.2d.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP120]], float [[TMP121]], float [[TMP110]], <8 x i32> [[TMP118]], <4 x i32> [[TMP119]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP123:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP115]], [[TMP122]]
// SHADERTEST-NEXT:    [[TMP124:%.*]] = shufflevector <4 x float> [[TMP116]], <4 x float> poison, <3 x i32> <i32 0, i32 1, i32 2>
// SHADERTEST-NEXT:    [[TMP125:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP74]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP126:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP79]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP127:%.*]] = extractelement <3 x float> [[TMP124]], i64 0
// SHADERTEST-NEXT:    [[TMP128:%.*]] = extractelement <3 x float> [[TMP124]], i64 1
// SHADERTEST-NEXT:    [[TMP129:%.*]] = extractelement <3 x float> [[TMP124]], i64 2
// SHADERTEST-NEXT:    [[TMP130:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.3d.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP127]], float [[TMP128]], float [[TMP129]], float [[TMP110]], <8 x i32> [[TMP125]], <4 x i32> [[TMP126]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP131:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP123]], [[TMP130]]
// SHADERTEST-NEXT:    [[TMP132:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP64]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP133:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP69]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP134:%.*]] = extractelement <3 x float> [[TMP124]], i64 0
// SHADERTEST-NEXT:    [[TMP135:%.*]] = extractelement <3 x float> [[TMP124]], i64 1
// SHADERTEST-NEXT:    [[TMP136:%.*]] = extractelement <3 x float> [[TMP124]], i64 2
// SHADERTEST-NEXT:    [[TMP137:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubesc(float [[TMP134]], float [[TMP135]], float [[TMP136]])
// SHADERTEST-NEXT:    [[TMP138:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubetc(float [[TMP134]], float [[TMP135]], float [[TMP136]])
// SHADERTEST-NEXT:    [[TMP139:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubema(float [[TMP134]], float [[TMP135]], float [[TMP136]])
// SHADERTEST-NEXT:    [[TMP140:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubeid(float [[TMP134]], float [[TMP135]], float [[TMP136]])
// SHADERTEST-NEXT:    [[TMP141:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.fabs.f32(float [[TMP139]])
// SHADERTEST-NEXT:    [[TMP142:%.*]] = fdiv reassoc nnan nsz arcp contract afn float 1.000000e+00, [[TMP141]]
// SHADERTEST-NEXT:    [[TMP143:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[TMP137]], [[TMP142]]
// SHADERTEST-NEXT:    [[TMP144:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[TMP143]], 1.500000e+00
// SHADERTEST-NEXT:    [[TMP145:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[TMP138]], [[TMP142]]
// SHADERTEST-NEXT:    [[TMP146:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[TMP145]], 1.500000e+00
// SHADERTEST-NEXT:    [[TMP147:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.rint.f32(float [[TMP140]])
// SHADERTEST-NEXT:    [[TMP148:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.cube.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP144]], float [[TMP146]], float [[TMP147]], float [[TMP110]], <8 x i32> [[TMP132]], <4 x i32> [[TMP133]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP149:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP131]], [[TMP148]]
// SHADERTEST-NEXT:    [[TMP150:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP54]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP151:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP59]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP152:%.*]] = extractelement <2 x float> [[TMP117]], i64 0
// SHADERTEST-NEXT:    [[TMP153:%.*]] = extractelement <2 x float> [[TMP117]], i64 1
// SHADERTEST-NEXT:    [[TMP154:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.rint.f32(float [[TMP153]])
// SHADERTEST-NEXT:    [[TMP155:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.1darray.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP152]], float [[TMP154]], float [[TMP110]], <8 x i32> [[TMP150]], <4 x i32> [[TMP151]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP156:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP149]], [[TMP155]]
// SHADERTEST-NEXT:    [[TMP157:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP44]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP158:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP49]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP159:%.*]] = extractelement <3 x float> [[TMP124]], i64 0
// SHADERTEST-NEXT:    [[TMP160:%.*]] = extractelement <3 x float> [[TMP124]], i64 1
// SHADERTEST-NEXT:    [[TMP161:%.*]] = extractelement <3 x float> [[TMP124]], i64 2
// SHADERTEST-NEXT:    [[TMP162:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.rint.f32(float [[TMP161]])
// SHADERTEST-NEXT:    [[TMP163:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.2darray.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP159]], float [[TMP160]], float [[TMP162]], float [[TMP110]], <8 x i32> [[TMP157]], <4 x i32> [[TMP158]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP164:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP156]], [[TMP163]]
// SHADERTEST-NEXT:    [[TMP165:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP34]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP166:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP39]], align 4, !invariant.load [[META25]]
// SHADERTEST-NEXT:    [[TMP167:%.*]] = extractelement <4 x float> [[TMP116]], i64 0
// SHADERTEST-NEXT:    [[TMP168:%.*]] = extractelement <4 x float> [[TMP116]], i64 1
// SHADERTEST-NEXT:    [[TMP169:%.*]] = extractelement <4 x float> [[TMP116]], i64 2
// SHADERTEST-NEXT:    [[TMP170:%.*]] = extractelement <4 x float> [[TMP116]], i64 3
// SHADERTEST-NEXT:    [[TMP171:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.rint.f32(float [[TMP170]])
// SHADERTEST-NEXT:    [[TMP172:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubesc(float [[TMP167]], float [[TMP168]], float [[TMP169]])
// SHADERTEST-NEXT:    [[TMP173:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubetc(float [[TMP167]], float [[TMP168]], float [[TMP169]])
// SHADERTEST-NEXT:    [[TMP174:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubema(float [[TMP167]], float [[TMP168]], float [[TMP169]])
// SHADERTEST-NEXT:    [[TMP175:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.amdgcn.cubeid(float [[TMP167]], float [[TMP168]], float [[TMP169]])
// SHADERTEST-NEXT:    [[TMP176:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.fabs.f32(float [[TMP174]])
// SHADERTEST-NEXT:    [[TMP177:%.*]] = fdiv reassoc nnan nsz arcp contract afn float 1.000000e+00, [[TMP176]]
// SHADERTEST-NEXT:    [[TMP178:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[TMP172]], [[TMP177]]
// SHADERTEST-NEXT:    [[TMP179:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[TMP178]], 1.500000e+00
// SHADERTEST-NEXT:    [[TMP180:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[TMP173]], [[TMP177]]
// SHADERTEST-NEXT:    [[TMP181:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[TMP180]], 1.500000e+00
// SHADERTEST-NEXT:    [[TMP182:%.*]] = fmul reassoc nnan nsz arcp contract afn float [[TMP171]], 8.000000e+00
// SHADERTEST-NEXT:    [[TMP183:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[TMP182]], [[TMP175]]
// SHADERTEST-NEXT:    [[TMP184:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.rint.f32(float [[TMP183]])
// SHADERTEST-NEXT:    [[TMP185:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.cl.cube.v4f32.f32.f32.v8i32.v4i32(i32 15, float 2.000000e+00, float [[TMP179]], float [[TMP181]], float [[TMP184]], float [[TMP110]], <8 x i32> [[TMP165]], <4 x i32> [[TMP166]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP186:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP164]], [[TMP185]]
// SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP186]]) #[[ATTR7:[0-9]+]]
// SHADERTEST-NEXT:    ret void
//
//.
// SHADERTEST: [[META23]] = !{i32 4}
// SHADERTEST: [[META24]] = !{i32 6}
// SHADERTEST: [[META25]] = !{}
//.
