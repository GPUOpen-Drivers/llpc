// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --version 5
#version 450
/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

// RUN: amdllpc --print-after=lgc-builder-replayer %s 2>&1 | FileCheck -check-prefix=SHADERTEST %s
layout(set = 0, binding = 0) uniform sampler1D  samp1D;
layout(set = 1, binding = 0) uniform sampler2D  samp2D[4];

layout(set = 2, binding = 0) uniform Uniforms
{
    int index;
};

layout(location = 0) out vec4 fragColor;

void main()
{
    vec4 f4 = textureOffset(samp1D, 1.0, 2, 0.4);
    f4 += textureOffset(samp2D[index], vec2(0.5), ivec2(5));

    fragColor = f4;
}
// SHADERTEST-LABEL: define dllexport spir_func void @lgc.shader.FS.main(
// SHADERTEST-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META13:![0-9]+]] !lgc.shaderstage [[META14:![0-9]+]] {
// SHADERTEST-NEXT:  [[_ENTRY:.*:]]
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP4:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP5:%.*]] = bitcast i64 [[TMP4]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP6]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP8:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 2, i32 0, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP9:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP8]])
// SHADERTEST-NEXT:    [[TMP10:%.*]] = call i32 @lgc.load.user.data__i32(i32 4)
// SHADERTEST-NEXT:    [[TMP11:%.*]] = insertelement <2 x i32> [[TMP5]], i32 [[TMP10]], i64 0
// SHADERTEST-NEXT:    [[TMP12:%.*]] = bitcast <2 x i32> [[TMP11]] to i64
// SHADERTEST-NEXT:    [[TMP13:%.*]] = inttoptr i64 [[TMP12]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP13]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP13]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP13]], i32 0
// SHADERTEST-NEXT:    [[TMP15:%.*]] = call i32 @lgc.load.user.data__i32(i32 4)
// SHADERTEST-NEXT:    [[TMP16:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP15]], i64 0
// SHADERTEST-NEXT:    [[TMP17:%.*]] = bitcast <2 x i32> [[TMP16]] to i64
// SHADERTEST-NEXT:    [[TMP18:%.*]] = inttoptr i64 [[TMP17]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP18]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP18]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP18]], i32 32
// SHADERTEST-NEXT:    [[TMP20:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP21:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP20]], i64 0
// SHADERTEST-NEXT:    [[TMP22:%.*]] = bitcast <2 x i32> [[TMP21]] to i64
// SHADERTEST-NEXT:    [[TMP23:%.*]] = inttoptr i64 [[TMP22]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP23]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP23]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP23]], i32 0
// SHADERTEST-NEXT:    [[TMP25:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP26:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP25]], i64 0
// SHADERTEST-NEXT:    [[TMP27:%.*]] = bitcast <2 x i32> [[TMP26]] to i64
// SHADERTEST-NEXT:    [[TMP28:%.*]] = inttoptr i64 [[TMP27]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP28]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP28]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP28]], i32 32
// SHADERTEST-NEXT:    [[TMP30:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP24]], align 4, !invariant.load [[META15:![0-9]+]]
// SHADERTEST-NEXT:    [[TMP31:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP29]], align 4, !invariant.load [[META15]]
// SHADERTEST-NEXT:    [[TMP32:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.b.o.1d.v4f32.f32.f32.v8i32.v4i32(i32 15, i32 2, float 0x3FD99999A0000000, float 1.000000e+00, <8 x i32> [[TMP30]], <4 x i32> [[TMP31]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP33:%.*]] = load i32, ptr addrspace(7) [[TMP8]], align 4
// SHADERTEST-NEXT:    [[TMP34:%.*]] = mul i32 [[TMP33]], 48
// SHADERTEST-NEXT:    [[TMP35:%.*]] = sext i32 [[TMP34]] to i64
// SHADERTEST-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP14]], i64 [[TMP35]]
// SHADERTEST-NEXT:    [[TMP37:%.*]] = mul i32 [[TMP33]], 48
// SHADERTEST-NEXT:    [[TMP38:%.*]] = sext i32 [[TMP37]] to i64
// SHADERTEST-NEXT:    [[TMP39:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP19]], i64 [[TMP38]]
// SHADERTEST-NEXT:    [[TMP40:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP36]], align 4, !invariant.load [[META15]]
// SHADERTEST-NEXT:    [[TMP41:%.*]] = call <8 x i32> @llvm.amdgcn.readfirstlane.v8i32(<8 x i32> [[TMP40]])
// SHADERTEST-NEXT:    [[TMP42:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP39]], align 4, !invariant.load [[META15]]
// SHADERTEST-NEXT:    [[TMP43:%.*]] = call <4 x i32> @llvm.amdgcn.readfirstlane.v4i32(<4 x i32> [[TMP42]])
// SHADERTEST-NEXT:    [[TMP44:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.o.2d.v4f32.f32.v8i32.v4i32(i32 15, i32 1285, float 5.000000e-01, float 5.000000e-01, <8 x i32> [[TMP41]], <4 x i32> [[TMP43]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP45:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP32]], [[TMP44]]
// SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP45]]) #[[ATTR7:[0-9]+]]
// SHADERTEST-NEXT:    ret void
//
//.
// SHADERTEST: [[META13]] = !{i32 4}
// SHADERTEST: [[META14]] = !{i32 6}
// SHADERTEST: [[META15]] = !{}
//.
