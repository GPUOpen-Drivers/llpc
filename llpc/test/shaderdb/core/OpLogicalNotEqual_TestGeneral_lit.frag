// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
// RUN: amdllpc -emit-lgc -gfxip 10.3 -o - %s | FileCheck -check-prefix=SHADERTEST %s

#version 450

layout(std430, binding = 0) buffer Buffer
{
    int   i1;
    ivec2 i2;
};

layout(location = 0) out vec4 fragColor;

void main()
{
    bool b1_0 = (i1 == i2.x);
    bool b1_1 = (i1 == i2.y);

    bvec3 b3_0 = bvec3(b1_0, b1_1, true);
    bvec3 b3_1 = bvec3(false, false, b1_0);

    b1_0 = (b1_0 != b1_1);
    b3_0 = notEqual(b3_0, b3_1);

    fragColor = (b1_0 && b3_0.x ? vec4(0.0) : vec4(1.0));
}

// SHADERTEST-LABEL: @lgc.shader.FS.main(
// SHADERTEST-NEXT:  .entry:
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) (...) @lgc.create.load.buffer.desc.p7(i64 0, i32 0, i32 0, i32 2)
// SHADERTEST-NEXT:    [[TMP1:%.*]] = load i32, ptr addrspace(7) [[TMP0]], align 4
// SHADERTEST-NEXT:    [[TMP2:%.*]] = getelementptr inbounds <{ i32, [4 x i8], [2 x i32] }>, ptr addrspace(7) [[TMP0]], i32 0, i32 2, i32 0
// SHADERTEST-NEXT:    [[TMP3:%.*]] = load i32, ptr addrspace(7) [[TMP2]], align 4
// SHADERTEST-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP1]], [[TMP3]]
// SHADERTEST-NEXT:    [[TMP5:%.*]] = getelementptr inbounds <{ i32, [4 x i8], [2 x i32] }>, ptr addrspace(7) [[TMP0]], i32 0, i32 2, i32 1
// SHADERTEST-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(7) [[TMP5]], align 4
// SHADERTEST-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP1]], [[TMP6]]
// SHADERTEST-NEXT:    [[TMP8:%.*]] = and i1 [[TMP4]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP9:%.*]] = select reassoc nnan nsz arcp contract afn i1 [[TMP8]], <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
// SHADERTEST-NEXT:    call void (...) @lgc.create.write.generic.output(<4 x float> [[TMP9]], i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
// SHADERTEST-NEXT:    ret void
//
