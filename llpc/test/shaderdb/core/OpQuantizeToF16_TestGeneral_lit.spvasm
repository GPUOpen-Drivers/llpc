; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
; RUN: amdllpc -emit-lgc -gfxip 10.3 -o - %s | FileCheck -check-prefix=SHADERTEST %s

; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 19
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %9
               OpExecutionMode %4 OriginUpperLeft
               OpSource GLSL 450
               OpName %4 "main"
               OpName %9 "f"
               OpName %10 "Uniforms"
               OpMemberName %10 0 "f4"
               OpName %12 ""
               OpDecorate %9 Location 0
               OpMemberDecorate %10 0 Offset 0
               OpDecorate %10 Block
               OpDecorate %12 DescriptorSet 0
               OpDecorate %12 Binding 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypePointer Output %7
          %9 = OpVariable %8 Output
         %10 = OpTypeStruct %7
         %11 = OpTypePointer Uniform %10
         %12 = OpVariable %11 Uniform
         %13 = OpTypeInt 32 1
         %14 = OpConstant %13 0
         %15 = OpTypePointer Uniform %7
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %16 = OpAccessChain %15 %12 %14
         %17 = OpLoad %7 %16
         %18 = OpQuantizeToF16 %7 %17
               OpStore %9 %18
               OpReturn
               OpFunctionEnd

; SHADERTEST-LABEL: @lgc.shader.FS.main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 0)
; SHADERTEST-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
; SHADERTEST-NEXT:    [[TMP2:%.*]] = load <4 x float>, ptr addrspace(7) [[TMP0]], align 16
; SHADERTEST-NEXT:    [[TMP3:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> (...) @lgc.create.quantize.to.fp16.v4f32(<4 x float> [[TMP2]])
; SHADERTEST-NEXT:    call void (...) @lgc.create.write.generic.output(<4 x float> [[TMP3]], i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
; SHADERTEST-NEXT:    ret void
;
