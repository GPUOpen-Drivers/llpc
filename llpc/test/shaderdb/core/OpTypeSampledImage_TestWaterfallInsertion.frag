// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --version 5
/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

// RUN: amdllpc --print-after=lgc-builder-replayer %s 2>&1 | FileCheck -check-prefix=SHADERTEST %s
#version 450
#extension GL_EXT_nonuniform_qualifier : require

layout(set = 0, binding = 5) uniform sampler samps[];
layout(set = 0, binding = 6) uniform texture2D images[];
layout(set = 0, binding = 7) uniform sampler2D _11[];
layout(set = 0, binding = 3, rgba32f) uniform image2D imgW2D[10];

layout(location = 0) out vec4 _3;
layout(location = 3) flat in int _4;
layout(location = 0) flat in vec4 _5;
layout(location = 1) flat in vec2 _6;
layout(location = 2) flat in int _7;
layout(location = 4) flat in int _8;
layout(location = 5) flat in int _9;
layout(location = 6) flat in int _10;

void main()
{
    int _12 = _4;
    _3 = texture(_11[nonuniformEXT(_12)], vec2(0.0));
    _3 += texture(nonuniformEXT(sampler2D(images[_7], samps[_8])), vec2(0,0));
    imageStore(imgW2D[nonuniformEXT(_9)], ivec2(0), _3);

}
// SHADERTEST-LABEL: define dllexport spir_func void @lgc.shader.FS.main(
// SHADERTEST-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META12:![0-9]+]] !lgc.shaderstage [[META13:![0-9]+]] {
// SHADERTEST-NEXT:  [[_ENTRY:.*:]]
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP4:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP5:%.*]] = bitcast i64 [[TMP4]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP6:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP6]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP8:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP9:%.*]] = bitcast i64 [[TMP8]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP10:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP11:%.*]] = bitcast i64 [[TMP10]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP12:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP13:%.*]] = bitcast i64 [[TMP12]] to <2 x i32>
// SHADERTEST-NEXT:    [[TMP14:%.*]] = call i32 (...) @lgc.input.import.interpolated__i32(i1 false, i32 5, i32 0, i32 0, i32 poison, i32 1, i32 poison)
// SHADERTEST-NEXT:    [[TMP15:%.*]] = call i32 (...) @lgc.input.import.interpolated__i32(i1 false, i32 4, i32 0, i32 0, i32 poison, i32 1, i32 poison)
// SHADERTEST-NEXT:    [[TMP16:%.*]] = call i32 (...) @lgc.input.import.interpolated__i32(i1 false, i32 2, i32 0, i32 0, i32 poison, i32 1, i32 poison)
// SHADERTEST-NEXT:    [[TMP17:%.*]] = call i32 (...) @lgc.input.import.interpolated__i32(i1 false, i32 3, i32 0, i32 0, i32 poison, i32 1, i32 poison)
// SHADERTEST-NEXT:    [[TMP18:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP19:%.*]] = insertelement <2 x i32> [[TMP13]], i32 [[TMP18]], i64 0
// SHADERTEST-NEXT:    [[TMP20:%.*]] = bitcast <2 x i32> [[TMP19]] to i64
// SHADERTEST-NEXT:    [[TMP21:%.*]] = inttoptr i64 [[TMP20]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP21]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP21]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP21]], i32 1536
// SHADERTEST-NEXT:    [[TMP23:%.*]] = insertvalue { ptr addrspace(4), i32, i32 } poison, i32 32, 1
// SHADERTEST-NEXT:    [[IMGW2D:%.*]] = insertvalue { ptr addrspace(4), i32, i32 } [[TMP23]], i32 0, 2
// SHADERTEST-NEXT:    [[TMP24:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP25:%.*]] = insertelement <2 x i32> [[TMP11]], i32 [[TMP24]], i64 0
// SHADERTEST-NEXT:    [[TMP26:%.*]] = bitcast <2 x i32> [[TMP25]] to i64
// SHADERTEST-NEXT:    [[TMP27:%.*]] = inttoptr i64 [[TMP26]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP27]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP27]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP27]], i32 1280
// SHADERTEST-NEXT:    [[TMP29:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP30:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP29]], i64 0
// SHADERTEST-NEXT:    [[TMP31:%.*]] = bitcast <2 x i32> [[TMP30]] to i64
// SHADERTEST-NEXT:    [[TMP32:%.*]] = inttoptr i64 [[TMP31]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP32]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP32]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP33:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP32]], i32 768
// SHADERTEST-NEXT:    [[TMP34:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP35:%.*]] = insertelement <2 x i32> [[TMP5]], i32 [[TMP34]], i64 0
// SHADERTEST-NEXT:    [[TMP36:%.*]] = bitcast <2 x i32> [[TMP35]] to i64
// SHADERTEST-NEXT:    [[TMP37:%.*]] = inttoptr i64 [[TMP36]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP37]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP37]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP38:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP37]], i32 0
// SHADERTEST-NEXT:    [[TMP39:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } poison, i32 48, 1
// SHADERTEST-NEXT:    [[TMP40:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP39]], i32 0, 2
// SHADERTEST-NEXT:    [[TMP41:%.*]] = call i32 @lgc.load.user.data__i32(i32 0)
// SHADERTEST-NEXT:    [[TMP42:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP41]], i64 0
// SHADERTEST-NEXT:    [[TMP43:%.*]] = bitcast <2 x i32> [[TMP42]] to i64
// SHADERTEST-NEXT:    [[TMP44:%.*]] = inttoptr i64 [[TMP43]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP44]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP44]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP45:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP44]], i32 32
// SHADERTEST-NEXT:    [[TMP46:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP40]], i32 48, 4
// SHADERTEST-NEXT:    [[_11:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP46]], i32 0, 5
// SHADERTEST-NEXT:    [[TMP47:%.*]] = mul i32 [[TMP17]], 48
// SHADERTEST-NEXT:    [[TMP48:%.*]] = sext i32 [[TMP47]] to i64
// SHADERTEST-NEXT:    [[TMP49:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP38]], i64 [[TMP48]]
// SHADERTEST-NEXT:    [[TMP50:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[_11]], ptr addrspace(4) [[TMP49]], 0
// SHADERTEST-NEXT:    [[TMP51:%.*]] = mul i32 [[TMP17]], 48
// SHADERTEST-NEXT:    [[TMP52:%.*]] = sext i32 [[TMP51]] to i64
// SHADERTEST-NEXT:    [[TMP53:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP45]], i64 [[TMP52]]
// SHADERTEST-NEXT:    [[TMP54:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP50]], ptr addrspace(4) [[TMP53]], 3
// SHADERTEST-NEXT:    [[TMP55:%.*]] = ptrtoint ptr addrspace(4) [[TMP49]] to i32
// SHADERTEST-NEXT:    [[TMP56:%.*]] = ptrtoint ptr addrspace(4) [[TMP53]] to i32
// SHADERTEST-NEXT:    [[TMP57:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP47]])
// SHADERTEST-NEXT:    [[TMP58:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP57]], i32 [[TMP47]])
// SHADERTEST-NEXT:    [[TMP59:%.*]] = sext i32 [[TMP58]] to i64
// SHADERTEST-NEXT:    [[TMP60:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP38]], i64 [[TMP59]]
// SHADERTEST-NEXT:    [[TMP61:%.*]] = sext i32 [[TMP58]] to i64
// SHADERTEST-NEXT:    [[TMP62:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP45]], i64 [[TMP61]]
// SHADERTEST-NEXT:    [[TMP63:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP60]], align 4, !invariant.load [[META14:![0-9]+]]
// SHADERTEST-NEXT:    [[TMP64:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP62]], align 4, !invariant.load [[META14]]
// SHADERTEST-NEXT:    [[TMP65:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32.v8i32.v4i32(i32 15, float 0.000000e+00, float 0.000000e+00, <8 x i32> [[TMP63]], <4 x i32> [[TMP64]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP66:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.waterfall.end.v4f32(i32 [[TMP57]], <4 x float> [[TMP65]])
// SHADERTEST-NEXT:    [[TMP67:%.*]] = mul i32 [[TMP16]], 32
// SHADERTEST-NEXT:    [[TMP68:%.*]] = sext i32 [[TMP67]] to i64
// SHADERTEST-NEXT:    [[TMP69:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP33]], i64 [[TMP68]]
// SHADERTEST-NEXT:    [[TMP70:%.*]] = mul i32 [[TMP15]], 16
// SHADERTEST-NEXT:    [[TMP71:%.*]] = sext i32 [[TMP70]] to i64
// SHADERTEST-NEXT:    [[TMP72:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP28]], i64 [[TMP71]]
// SHADERTEST-NEXT:    [[TMP73:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } poison, ptr addrspace(4) [[TMP69]], 0
// SHADERTEST-NEXT:    [[TMP74:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP73]], i32 32, 1
// SHADERTEST-NEXT:    [[TMP75:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP74]], i32 0, 2
// SHADERTEST-NEXT:    [[TMP76:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP75]], ptr addrspace(4) [[TMP72]], 3
// SHADERTEST-NEXT:    [[TMP77:%.*]] = insertvalue { ptr addrspace(4), i32, i32, ptr addrspace(4), i32, i32 } [[TMP76]], i32 16, 4
// SHADERTEST-NEXT:    [[TMP78:%.*]] = ptrtoint ptr addrspace(4) [[TMP69]] to i32
// SHADERTEST-NEXT:    [[TMP79:%.*]] = ptrtoint ptr addrspace(4) [[TMP72]] to i32
// SHADERTEST-NEXT:    [[TMP80:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP78]])
// SHADERTEST-NEXT:    [[TMP81:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 [[TMP80]], i32 [[TMP79]])
// SHADERTEST-NEXT:    [[TMP82:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP81]], i32 [[TMP78]])
// SHADERTEST-NEXT:    [[TMP83:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP81]], i32 [[TMP79]])
// SHADERTEST-NEXT:    [[TMP84:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP82]], i64 0
// SHADERTEST-NEXT:    [[TMP85:%.*]] = bitcast <2 x i32> [[TMP84]] to i64
// SHADERTEST-NEXT:    [[TMP86:%.*]] = inttoptr i64 [[TMP85]] to ptr addrspace(4)
// SHADERTEST-NEXT:    [[TMP87:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP83]], i64 0
// SHADERTEST-NEXT:    [[TMP88:%.*]] = bitcast <2 x i32> [[TMP87]] to i64
// SHADERTEST-NEXT:    [[TMP89:%.*]] = inttoptr i64 [[TMP88]] to ptr addrspace(4)
// SHADERTEST-NEXT:    [[TMP90:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP86]], align 4, !invariant.load [[META14]]
// SHADERTEST-NEXT:    [[TMP91:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP89]], align 4, !invariant.load [[META14]]
// SHADERTEST-NEXT:    [[TMP92:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32.v8i32.v4i32(i32 15, float 0.000000e+00, float 0.000000e+00, <8 x i32> [[TMP90]], <4 x i32> [[TMP91]], i1 false, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP93:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.waterfall.end.v4f32(i32 [[TMP81]], <4 x float> [[TMP92]])
// SHADERTEST-NEXT:    [[TMP94:%.*]] = fadd reassoc nnan nsz arcp contract afn <4 x float> [[TMP66]], [[TMP93]]
// SHADERTEST-NEXT:    [[TMP95:%.*]] = mul i32 [[TMP14]], 32
// SHADERTEST-NEXT:    [[TMP96:%.*]] = sext i32 [[TMP95]] to i64
// SHADERTEST-NEXT:    [[TMP97:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP22]], i64 [[TMP96]]
// SHADERTEST-NEXT:    [[TMP98:%.*]] = insertvalue { ptr addrspace(4), i32, i32 } [[IMGW2D]], ptr addrspace(4) [[TMP97]], 0
// SHADERTEST-NEXT:    [[TMP99:%.*]] = ptrtoint ptr addrspace(4) [[TMP97]] to i32
// SHADERTEST-NEXT:    [[TMP100:%.*]] = call i32 @llvm.amdgcn.waterfall.begin.i32(i32 0, i32 [[TMP99]])
// SHADERTEST-NEXT:    [[TMP101:%.*]] = call i32 @llvm.amdgcn.waterfall.readfirstlane.i32.i32(i32 [[TMP100]], i32 [[TMP99]])
// SHADERTEST-NEXT:    [[TMP102:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP101]], i64 0
// SHADERTEST-NEXT:    [[TMP103:%.*]] = bitcast <2 x i32> [[TMP102]] to i64
// SHADERTEST-NEXT:    [[TMP104:%.*]] = inttoptr i64 [[TMP103]] to ptr addrspace(4)
// SHADERTEST-NEXT:    [[TMP105:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP104]], align 4, !invariant.load [[META14]]
// SHADERTEST-NEXT:    [[TMP106:%.*]] = call <8 x i32> @llvm.amdgcn.waterfall.last.use.v8i32(i32 [[TMP100]], <8 x i32> [[TMP105]])
// SHADERTEST-NEXT:    call void @llvm.amdgcn.image.store.2d.v4f32.i32.v8i32(<4 x float> [[TMP94]], i32 15, i32 0, i32 0, <8 x i32> [[TMP106]], i32 0, i32 0)
// SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP94]]) #[[ATTR8:[0-9]+]]
// SHADERTEST-NEXT:    ret void
//
//.
// SHADERTEST: [[META12]] = !{i32 4}
// SHADERTEST: [[META13]] = !{i32 6}
// SHADERTEST: [[META14]] = !{}
//.
