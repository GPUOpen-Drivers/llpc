
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; BEGIN_SHADERTEST
; RUN: amdllpc -backward-propagate-no-contract -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s

; Test NoContraction is back propagated.

; SHADERTEST-LABEL: {{^// LLPC.*}} final pipeline module info
; SHADERTEST-NOT: contract
; SHADERTEST-NOT: reassoc
; SHADERTEST: ret void

; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST

; SPIR-V
; Version: 1.3
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %MainVS "MainVS" %in_var_Position %out_var_Position
               OpName %in_var_Position "in.var.Position"
               OpName %out_var_Position "out.var.Position"
               OpName %MainVS "MainVS"
               OpDecorate %in_var_Position Location 0
               OpDecorate %out_var_Position Location 0
               OpDecorate %v3 NoContraction
       %void = OpTypeVoid
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Input_v4float = OpTypePointer Input %v4float
%_ptr_Output_v4float = OpTypePointer Output %v4float
%in_var_Position = OpVariable %_ptr_Input_v4float Input
%out_var_Position = OpVariable %_ptr_Output_v4float Output
  %main_type = OpTypeFunction %void
     %MainVS = OpFunction %void None %main_type
      %entry = OpLabel
        %pos = OpLoad %v4float %in_var_Position
         %p0 = OpCompositeExtract %float %pos 0
         %p1 = OpCompositeExtract %float %pos 1
         %p2 = OpCompositeExtract %float %pos 2
         %p3 = OpCompositeExtract %float %pos 3
         %v0 = OpFAdd %float %p0 %p1
         %v1 = OpFMul %float %p0 %v0
         %v2 = OpFSub %float %v1 %p2
         %v3 = OpFAdd %float %v2 %p3
         %r0 = OpCompositeInsert %v4float %v3 %pos 0
         %r1 = OpCompositeInsert %v4float %v3 %r0 1
         %r2 = OpCompositeInsert %v4float %v3 %r1 2
         %r3 = OpCompositeInsert %v4float %v3 %r2 3
               OpStore %out_var_Position %r3
               OpReturn
               OpFunctionEnd
