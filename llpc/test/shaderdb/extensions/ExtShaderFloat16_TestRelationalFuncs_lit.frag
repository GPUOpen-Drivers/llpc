// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
// RUN: amdllpc -emit-lgc -gfxip 10.3 -o - %s | FileCheck -check-prefix=SHADERTEST %s

#version 450

#extension GL_AMD_gpu_shader_half_float: enable

layout(binding = 0, std430) buffer Buffers
{
    vec4 fv4;
};

layout(location = 0) out vec3 fragColor;

void main()
{
    f16vec2 f16v2_0 = f16vec2(fv4.xy);
    f16vec2 f16v2_1 = f16vec2(fv4.zw);

    bool b = false;
    bvec2 bv2 = equal(f16v2_0, f16v2_1);
    b = b || bv2.x;

    bv2 = notEqual(f16v2_0, f16v2_1);
    b = b || bv2.x;

    bv2 = lessThan(f16v2_0, f16v2_1);
    b = b && bv2.x;

    bv2 = greaterThan(f16v2_0, f16v2_1);
    b = b || bv2.x;

    bv2 = lessThanEqual(f16v2_0, f16v2_1);
    b = b && bv2.x;

    bv2 = greaterThanEqual(f16v2_0, f16v2_1);
    b = b || bv2.x;

    fragColor = b ? vec3(1.0) : vec3(0.0);
}

// SHADERTEST-LABEL: @lgc.shader.FS.main(
// SHADERTEST-NEXT:  .entry:
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) (...) @lgc.create.load.buffer.desc.p7(i64 0, i32 0, i32 0, i32 2)
// SHADERTEST-NEXT:    [[TMP1:%.*]] = load <4 x float>, ptr addrspace(7) [[TMP0]], align 16
// SHADERTEST-NEXT:    [[TMP2:%.*]] = shufflevector <4 x float> [[TMP1]], <4 x float> poison, <2 x i32> <i32 0, i32 poison>
// SHADERTEST-NEXT:    [[TMP3:%.*]] = fptrunc <2 x float> [[TMP2]] to <2 x half>
// SHADERTEST-NEXT:    [[TMP4:%.*]] = shufflevector <4 x float> [[TMP1]], <4 x float> poison, <2 x i32> <i32 2, i32 poison>
// SHADERTEST-NEXT:    [[TMP5:%.*]] = fptrunc <2 x float> [[TMP4]] to <2 x half>
// SHADERTEST-NEXT:    [[TMP6:%.*]] = extractelement <2 x half> [[TMP3]], i64 0
// SHADERTEST-NEXT:    [[TMP7:%.*]] = extractelement <2 x half> [[TMP5]], i64 0
// SHADERTEST-NEXT:    [[TMP8:%.*]] = fcmp oeq half [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP9:%.*]] = fcmp une half [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP10:%.*]] = or i1 [[TMP8]], [[TMP9]]
// SHADERTEST-NEXT:    [[TMP11:%.*]] = fcmp olt half [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP12:%.*]] = and i1 [[TMP10]], [[TMP11]]
// SHADERTEST-NEXT:    [[TMP13:%.*]] = fcmp ogt half [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP14:%.*]] = or i1 [[TMP12]], [[TMP13]]
// SHADERTEST-NEXT:    [[TMP15:%.*]] = fcmp ole half [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP16:%.*]] = and i1 [[TMP14]], [[TMP15]]
// SHADERTEST-NEXT:    [[TMP17:%.*]] = fcmp oge half [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP18:%.*]] = or i1 [[TMP16]], [[TMP17]]
// SHADERTEST-NEXT:    [[TMP19:%.*]] = select reassoc nnan nsz arcp contract afn i1 [[TMP18]], <3 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <3 x float> zeroinitializer
// SHADERTEST-NEXT:    call void (...) @lgc.create.write.generic.output(<3 x float> [[TMP19]], i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
// SHADERTEST-NEXT:    ret void
//
