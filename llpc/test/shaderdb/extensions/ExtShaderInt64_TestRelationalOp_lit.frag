// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
// RUN: amdllpc -emit-lgc -gfxip 10.3 -o - %s | FileCheck -check-prefix=SHADERTEST %s

#version 450

#extension GL_ARB_gpu_shader_int64 : enable

layout(std140, binding = 0) uniform Uniforms
{
    int64_t  i64_0;
    int64_t  i64_1;

    u64vec3  u64v3_0;
    u64vec3  u64v3_1;
};

layout(location = 0) out float fragColor;

void main()
{
    bvec3 b3 = bvec3(true);

    b3 = b3.x ? equal(u64v3_0, u64v3_1) : notEqual(u64v3_0, u64v3_1);
    b3 = b3.x ? greaterThanEqual(u64v3_0, u64v3_1) : lessThanEqual(u64v3_0, u64v3_1);
    b3 = b3.x ? greaterThan(u64v3_0, u64v3_1) : lessThan(u64v3_0, u64v3_1);

    bool b1 = false;
    b1 = b1 ? (i64_0 == i64_1) : (i64_0 != i64_1);
    b1 = b1 ? (i64_0 >= i64_1) : (i64_0 <= i64_1);
    b1 = b1 ? (i64_0 > i64_1) : (i64_0 < i64_1);

    fragColor = b3.x && b1 ? 1.0 : 0.0;
}

// SHADERTEST-LABEL: @lgc.shader.FS.main(
// SHADERTEST-NEXT:  .entry:
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) (...) @lgc.create.load.buffer.desc.p7(i64 0, i32 0, i32 0, i32 0)
// SHADERTEST-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
// SHADERTEST-NEXT:    [[TMP2:%.*]] = getelementptr inbounds <{ i64, i64, [16 x i8], [3 x i64], [8 x i8], [3 x i64] }>, ptr addrspace(7) [[TMP0]], i32 0, i32 3
// SHADERTEST-NEXT:    [[TMP3:%.*]] = load <3 x i64>, ptr addrspace(7) [[TMP2]], align 32
// SHADERTEST-NEXT:    [[TMP4:%.*]] = getelementptr inbounds <{ i64, i64, [16 x i8], [3 x i64], [8 x i8], [3 x i64] }>, ptr addrspace(7) [[TMP0]], i32 0, i32 5
// SHADERTEST-NEXT:    [[TMP5:%.*]] = load <3 x i64>, ptr addrspace(7) [[TMP4]], align 32
// SHADERTEST-NEXT:    [[TMP6:%.*]] = extractelement <3 x i64> [[TMP3]], i64 0
// SHADERTEST-NEXT:    [[TMP7:%.*]] = extractelement <3 x i64> [[TMP5]], i64 0
// SHADERTEST-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP9:%.*]] = insertelement <3 x i1> poison, i1 [[TMP8]], i64 0
// SHADERTEST-NEXT:    [[TMP10:%.*]] = extractelement <3 x i64> [[TMP3]], i64 1
// SHADERTEST-NEXT:    [[TMP11:%.*]] = extractelement <3 x i64> [[TMP5]], i64 1
// SHADERTEST-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[TMP10]], [[TMP11]]
// SHADERTEST-NEXT:    [[TMP13:%.*]] = insertelement <3 x i1> [[TMP9]], i1 [[TMP12]], i64 1
// SHADERTEST-NEXT:    [[TMP14:%.*]] = extractelement <3 x i64> [[TMP3]], i64 2
// SHADERTEST-NEXT:    [[TMP15:%.*]] = extractelement <3 x i64> [[TMP5]], i64 2
// SHADERTEST-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[TMP14]], [[TMP15]]
// SHADERTEST-NEXT:    [[TMP17:%.*]] = insertelement <3 x i1> [[TMP13]], i1 [[TMP16]], i64 2
// SHADERTEST-NEXT:    [[TMP18:%.*]] = zext <3 x i1> [[TMP17]] to <3 x i32>
// SHADERTEST-NEXT:    [[DOT020_FR:%.*]] = freeze <3 x i32> [[TMP18]]
// SHADERTEST-NEXT:    [[B3_0_VEC_EXTRACT7:%.*]] = extractelement <3 x i32> [[DOT020_FR]], i64 0
// SHADERTEST-NEXT:    [[TMP19:%.*]] = and i32 [[B3_0_VEC_EXTRACT7]], 1
// SHADERTEST-NEXT:    [[DOTNOT:%.*]] = icmp eq i32 [[TMP19]], 0
// SHADERTEST-NEXT:    br i1 [[DOTNOT]], label [[TMP27:%.*]], label [[TMP20:%.*]]
// SHADERTEST:       20:
// SHADERTEST-NEXT:    [[TMP21:%.*]] = icmp uge i64 [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP22:%.*]] = insertelement <3 x i1> poison, i1 [[TMP21]], i64 0
// SHADERTEST-NEXT:    [[TMP23:%.*]] = icmp uge i64 [[TMP10]], [[TMP11]]
// SHADERTEST-NEXT:    [[TMP24:%.*]] = insertelement <3 x i1> [[TMP22]], i1 [[TMP23]], i64 1
// SHADERTEST-NEXT:    [[TMP25:%.*]] = icmp uge i64 [[TMP14]], [[TMP15]]
// SHADERTEST-NEXT:    [[TMP26:%.*]] = insertelement <3 x i1> [[TMP24]], i1 [[TMP25]], i64 2
// SHADERTEST-NEXT:    br label [[TMP34:%.*]]
// SHADERTEST:       27:
// SHADERTEST-NEXT:    [[TMP28:%.*]] = icmp ule i64 [[TMP6]], [[TMP7]]
// SHADERTEST-NEXT:    [[TMP29:%.*]] = insertelement <3 x i1> poison, i1 [[TMP28]], i64 0
// SHADERTEST-NEXT:    [[TMP30:%.*]] = icmp ule i64 [[TMP10]], [[TMP11]]
// SHADERTEST-NEXT:    [[TMP31:%.*]] = insertelement <3 x i1> [[TMP29]], i1 [[TMP30]], i64 1
// SHADERTEST-NEXT:    [[TMP32:%.*]] = icmp ule i64 [[TMP14]], [[TMP15]]
// SHADERTEST-NEXT:    [[TMP33:%.*]] = insertelement <3 x i1> [[TMP31]], i1 [[TMP32]], i64 2
// SHADERTEST-NEXT:    br label [[TMP34]]
// SHADERTEST:       34:
// SHADERTEST-NEXT:    [[DOT021_IN:%.*]] = phi <3 x i1> [ [[TMP26]], [[TMP20]] ], [ [[TMP33]], [[TMP27]] ]
// SHADERTEST-NEXT:    [[DOT021_IN_FR:%.*]] = freeze <3 x i1> [[DOT021_IN]]
// SHADERTEST-NEXT:    [[TMP35:%.*]] = extractelement <3 x i1> [[DOT021_IN_FR]], i64 0
// SHADERTEST-NEXT:    br i1 [[TMP35]], label [[TMP36:%.*]], label [[TMP51:%.*]]
// SHADERTEST:       36:
// SHADERTEST-NEXT:    [[TMP37:%.*]] = load <3 x i64>, ptr addrspace(7) [[TMP2]], align 32
// SHADERTEST-NEXT:    [[TMP38:%.*]] = load <3 x i64>, ptr addrspace(7) [[TMP4]], align 32
// SHADERTEST-NEXT:    [[TMP39:%.*]] = extractelement <3 x i64> [[TMP37]], i64 0
// SHADERTEST-NEXT:    [[TMP40:%.*]] = extractelement <3 x i64> [[TMP38]], i64 0
// SHADERTEST-NEXT:    [[TMP41:%.*]] = icmp ugt i64 [[TMP39]], [[TMP40]]
// SHADERTEST-NEXT:    [[TMP42:%.*]] = insertelement <3 x i1> poison, i1 [[TMP41]], i64 0
// SHADERTEST-NEXT:    [[TMP43:%.*]] = extractelement <3 x i64> [[TMP37]], i64 1
// SHADERTEST-NEXT:    [[TMP44:%.*]] = extractelement <3 x i64> [[TMP38]], i64 1
// SHADERTEST-NEXT:    [[TMP45:%.*]] = icmp ugt i64 [[TMP43]], [[TMP44]]
// SHADERTEST-NEXT:    [[TMP46:%.*]] = insertelement <3 x i1> [[TMP42]], i1 [[TMP45]], i64 1
// SHADERTEST-NEXT:    [[TMP47:%.*]] = extractelement <3 x i64> [[TMP37]], i64 2
// SHADERTEST-NEXT:    [[TMP48:%.*]] = extractelement <3 x i64> [[TMP38]], i64 2
// SHADERTEST-NEXT:    [[TMP49:%.*]] = icmp ugt i64 [[TMP47]], [[TMP48]]
// SHADERTEST-NEXT:    [[TMP50:%.*]] = insertelement <3 x i1> [[TMP46]], i1 [[TMP49]], i64 2
// SHADERTEST-NEXT:    br label [[TMP66:%.*]]
// SHADERTEST:       51:
// SHADERTEST-NEXT:    [[TMP52:%.*]] = load <3 x i64>, ptr addrspace(7) [[TMP2]], align 32
// SHADERTEST-NEXT:    [[TMP53:%.*]] = load <3 x i64>, ptr addrspace(7) [[TMP4]], align 32
// SHADERTEST-NEXT:    [[TMP54:%.*]] = extractelement <3 x i64> [[TMP52]], i64 0
// SHADERTEST-NEXT:    [[TMP55:%.*]] = extractelement <3 x i64> [[TMP53]], i64 0
// SHADERTEST-NEXT:    [[TMP56:%.*]] = icmp ult i64 [[TMP54]], [[TMP55]]
// SHADERTEST-NEXT:    [[TMP57:%.*]] = insertelement <3 x i1> poison, i1 [[TMP56]], i64 0
// SHADERTEST-NEXT:    [[TMP58:%.*]] = extractelement <3 x i64> [[TMP52]], i64 1
// SHADERTEST-NEXT:    [[TMP59:%.*]] = extractelement <3 x i64> [[TMP53]], i64 1
// SHADERTEST-NEXT:    [[TMP60:%.*]] = icmp ult i64 [[TMP58]], [[TMP59]]
// SHADERTEST-NEXT:    [[TMP61:%.*]] = insertelement <3 x i1> [[TMP57]], i1 [[TMP60]], i64 1
// SHADERTEST-NEXT:    [[TMP62:%.*]] = extractelement <3 x i64> [[TMP52]], i64 2
// SHADERTEST-NEXT:    [[TMP63:%.*]] = extractelement <3 x i64> [[TMP53]], i64 2
// SHADERTEST-NEXT:    [[TMP64:%.*]] = icmp ult i64 [[TMP62]], [[TMP63]]
// SHADERTEST-NEXT:    [[TMP65:%.*]] = insertelement <3 x i1> [[TMP61]], i1 [[TMP64]], i64 2
// SHADERTEST-NEXT:    br label [[TMP66]]
// SHADERTEST:       66:
// SHADERTEST-NEXT:    [[DOT022_IN:%.*]] = phi <3 x i1> [ [[TMP50]], [[TMP36]] ], [ [[TMP65]], [[TMP51]] ]
// SHADERTEST-NEXT:    [[TMP67:%.*]] = load i64, ptr addrspace(7) [[TMP0]], align 8
// SHADERTEST-NEXT:    [[TMP68:%.*]] = getelementptr inbounds <{ i64, i64, [16 x i8], [3 x i64], [8 x i8], [3 x i64] }>, ptr addrspace(7) [[TMP0]], i32 0, i32 1
// SHADERTEST-NEXT:    [[TMP69:%.*]] = load i64, ptr addrspace(7) [[TMP68]], align 8
// SHADERTEST-NEXT:    [[TMP70:%.*]] = icmp ne i64 [[TMP67]], [[TMP69]]
// SHADERTEST-NEXT:    [[COND_FREEZE4:%.*]] = freeze i1 [[TMP70]]
// SHADERTEST-NEXT:    br i1 [[COND_FREEZE4]], label [[TMP71:%.*]], label [[TMP73:%.*]]
// SHADERTEST:       71:
// SHADERTEST-NEXT:    [[TMP72:%.*]] = icmp sge i64 [[TMP67]], [[TMP69]]
// SHADERTEST-NEXT:    br label [[TMP75:%.*]]
// SHADERTEST:       73:
// SHADERTEST-NEXT:    [[TMP74:%.*]] = icmp sle i64 [[TMP67]], [[TMP69]]
// SHADERTEST-NEXT:    br label [[TMP75]]
// SHADERTEST:       75:
// SHADERTEST-NEXT:    [[DOT024_IN:%.*]] = phi i1 [ [[TMP72]], [[TMP71]] ], [ [[TMP74]], [[TMP73]] ]
// SHADERTEST-NEXT:    [[COND_FREEZE5:%.*]] = freeze i1 [[DOT024_IN]]
// SHADERTEST-NEXT:    br i1 [[COND_FREEZE5]], label [[TMP76:%.*]], label [[TMP80:%.*]]
// SHADERTEST:       76:
// SHADERTEST-NEXT:    [[TMP77:%.*]] = load i64, ptr addrspace(7) [[TMP0]], align 8
// SHADERTEST-NEXT:    [[TMP78:%.*]] = load i64, ptr addrspace(7) [[TMP68]], align 8
// SHADERTEST-NEXT:    [[TMP79:%.*]] = icmp sgt i64 [[TMP77]], [[TMP78]]
// SHADERTEST-NEXT:    br label [[TMP84:%.*]]
// SHADERTEST:       80:
// SHADERTEST-NEXT:    [[TMP81:%.*]] = load i64, ptr addrspace(7) [[TMP0]], align 8
// SHADERTEST-NEXT:    [[TMP82:%.*]] = load i64, ptr addrspace(7) [[TMP68]], align 8
// SHADERTEST-NEXT:    [[TMP83:%.*]] = icmp slt i64 [[TMP81]], [[TMP82]]
// SHADERTEST-NEXT:    br label [[TMP84]]
// SHADERTEST:       84:
// SHADERTEST-NEXT:    [[DOT0_IN:%.*]] = phi i1 [ [[TMP79]], [[TMP76]] ], [ [[TMP83]], [[TMP80]] ]
// SHADERTEST-NEXT:    [[TMP85:%.*]] = extractelement <3 x i1> [[DOT022_IN]], i64 0
// SHADERTEST-NEXT:    [[TMP86:%.*]] = and i1 [[TMP85]], [[DOT0_IN]]
// SHADERTEST-NEXT:    [[TMP87:%.*]] = select reassoc nnan nsz arcp contract afn i1 [[TMP86]], float 1.000000e+00, float 0.000000e+00
// SHADERTEST-NEXT:    call void (...) @lgc.create.write.generic.output(float [[TMP87]], i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison)
// SHADERTEST-NEXT:    ret void
//
