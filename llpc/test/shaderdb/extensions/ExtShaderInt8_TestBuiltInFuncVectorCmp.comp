/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

#version 450 core
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(set = 0, binding = 0) uniform UBO {
    i8vec4 m1;
    i8vec4 m2;
    u8vec4 m3;
    u8vec4 m4;
};

layout(set = 1, binding = 0) buffer SSBO {
    bvec4 mOut1;
    bvec4 mOut2;
    bvec4 mOut3;
    bvec4 mOut4;
    bvec4 mOut5;
    bvec4 mOut6;
    bvec4 mOut7;
    bvec4 mOut8;
    bvec4 mOut9;
    bvec4 mOut10;
    bvec4 mOut11;
    bvec4 mOut12;
};

void main()
{
    mOut1  = lessThan(m1, m2);
    mOut2  = lessThan(m3, m4);

    mOut3  = lessThanEqual(m1, m2);
    mOut4  = lessThanEqual(m3, m4);

    mOut5  = greaterThan(m1, m2);
    mOut6  = greaterThan(m3, m4);

    mOut7  = greaterThanEqual(m1, m2);
    mOut8  = greaterThanEqual(m3, m4);

    mOut9  = equal(m1, m2);
    mOut10 = equal(m3, m4);

    mOut11 = notEqual(m1, m2);
    mOut12 = notEqual(m3, m4);
}
// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
