/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

#version 450 core

#extension GL_EXT_shader_explicit_arithmetic_types_int64: enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16: enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8: enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16: enable

layout(binding = 0) buffer Buf
{
    int8_t   i8;
    uint8_t  u8;
    int16_t  i16;
    uint16_t u16;
    int      i32;
    uint     u32;
    int64_t  i64;
    uint64_t u64;

    float16_t f16;
    float     f32;
    double    f64;
} buf;

void main()
{
    buf.i8 = int8_t(buf.f16);
    buf.i8 = int8_t(buf.f32);
    buf.i8 = int8_t(buf.f64);

    buf.u8 = uint8_t(buf.f16);
    buf.u8 = uint8_t(buf.f32);
    buf.u8 = uint8_t(buf.f64);

    buf.f16 = float16_t(buf.i8);
    buf.f32 = float(buf.i8);
    buf.f64 = double(buf.i8);

    buf.f16 = float16_t(buf.u8);
    buf.f32 = float(buf.u8);
    buf.f64 = double(buf.u8);

    u8vec2 u8v2 = u8vec2(buf.u8);
    u8vec4 u8v4 = u8vec4(buf.u8);

    i8vec2 i8v2 = i8vec2(buf.i8);
    i8vec4 i8v4 = i8vec4(buf.i8);

    buf.u32 += pack32(u8v4);
    buf.i32 += pack32(i8v4);

    buf.u16 += pack16(i8v2);
    buf.i16 += pack16(i8v2);

    u8v4 = unpack8(buf.u32);
    i8v4 = unpack8(buf.i32);

    u8v2 = unpack8(buf.u16);
    i8v2 = unpack8(buf.i16);

    buf.u8 += u8v4.x + u8v2.x;
    buf.i8 += i8v4.x + i8v2.x;

    buf.u8 += buf.i8;
    buf.u8 += uint8_t(buf.u16);
    buf.u8 += uint8_t(buf.u32);
    buf.u8 += uint8_t(buf.u64);

    buf.i8 += int8_t(buf.i16);
    buf.i8 += int8_t(buf.i32);
    buf.i8 += int8_t(buf.i64);

    buf.u16 += buf.u8;
    buf.u32 += buf.u8;
    buf.u64 += buf.u8;

    buf.i16 += buf.i8;
    buf.i32 += buf.i8;
    buf.i64 += buf.i8;
}
// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST-LABEL: {{^// LLPC}} FE lowering results
; SHADERTEST: fptosi half %{{[0-9]*}} to i8
; SHADERTEST: fptosi float %{{[0-9]*}} to i8
; SHADERTEST: fptosi double %{{[0-9]*}} to i8
; SHADERTEST: fptoui half %{{[0-9]*}} to i8
; SHADERTEST: fptoui float %{{[0-9]*}} to i8
; SHADERTEST: fptoui double %{{[0-9]*}} to i8
; SHADERTEST: sitofp i8 %{{[0-9]*}} to half
; SHADERTEST: sitofp i8 %{{[0-9]*}} to float
; SHADERTEST: sitofp i8 %{{[0-9]*}} to double
; SHADERTEST: uitofp i8 %{{[0-9]*}} to half
; SHADERTEST: uitofp i8 %{{[0-9]*}} to float
; SHADERTEST: uitofp i8 %{{[0-9]*}} to double
; SHADERTEST-LABEL: {{^// LLPC}} LGC lowering results
; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
