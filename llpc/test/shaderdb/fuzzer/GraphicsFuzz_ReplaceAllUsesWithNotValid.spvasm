; Summary: fails with "void llvm::Value::doRAUW(llvm::Value *, llvm::Value::ReplaceMetadataUses):"
;          "Assertion `!contains(New, this) && "this->replaceAllUsesWith(expr(this)) is NOT valid!"' failed."
; BEGIN_SHADERTEST
; RUN: amdllpc --verify-ir -spvgen-dir=%spvgendir% -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; XFAIL: assertions
; SHADERTEST-LABEL: {{^// LLPC.*}} SPIRV-to-LLVM translation results
; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST
;
; Based on https://github.com/GPUOpen-Drivers/llpc/issues/944.

; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 160
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %9 %26
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %9 "gl_FragCoord"
               OpName %26 "_GLF_color"
               OpDecorate %9 BuiltIn FragCoord
               OpDecorate %26 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 4
          %8 = OpTypePointer Input %7
          %9 = OpVariable %8 Input
         %10 = OpTypeInt 32 0
         %11 = OpConstant %10 1
         %12 = OpTypePointer Input %6
         %15 = OpConstant %6 0
         %16 = OpTypeBool
         %23 = OpConstant %6 1
         %24 = OpConstantComposite %7 %23 %23 %23 %23
         %25 = OpTypePointer Output %7
         %26 = OpVariable %25 Output
         %32 = OpTypeInt 32 1
         %35 = OpConstant %32 1
         %42 = OpConstant %32 0
         %50 = OpConstant %10 0
         %62 = OpTypeVector %32 2
         %79 = OpConstant %6 723.296021
         %80 = OpConstantComposite %7 %23 %23 %23 %79
         %98 = OpConstantTrue %16
        %101 = OpConstantFalse %16
        %112 = OpUndef %7
        %126 = OpUndef %62
        %131 = OpUndef %32
        %156 = OpUndef %62
        %157 = OpTypeVector %16 4
          %4 = OpFunction %2 None %3
          %5 = OpLabel
               OpSelectionMerge %99 None
               OpSwitch %50 %100
        %100 = OpLabel
         %13 = OpAccessChain %12 %9 %11
         %14 = OpLoad %6 %13
         %17 = OpFOrdLessThan %16 %14 %15
        %158 = OpCompositeConstruct %157 %17 %17 %17 %17
        %159 = OpSelect %7 %158 %112 %24
               OpStore %26 %159
               OpBranch %28
         %28 = OpLabel
        %138 = OpPhi %32 %131 %100 %155 %31
        %129 = OpPhi %32 %131 %100 %132 %31
        %124 = OpPhi %62 %126 %100 %151 %31
        %120 = OpPhi %7 %112 %100 %119 %31
        %116 = OpPhi %16 %101 %100 %114 %31
               OpLoopMerge %30 %31 None
               OpBranch %36
         %36 = OpLabel
        %113 = OpPhi %32 %35 %28 %60 %39
        %119 = OpPhi %7 %120 %28 %58 %39
         %43 = OpSGreaterThan %16 %113 %42
               OpLoopMerge %38 %39 None
               OpBranchConditional %43 %37 %38
         %37 = OpLabel
               OpSelectionMerge %48 None
               OpBranchConditional %17 %47 %48
         %47 = OpLabel
               OpBranch %38
         %48 = OpLabel
         %51 = OpAccessChain %12 %9 %50
         %52 = OpLoad %6 %51
         %53 = OpFOrdLessThan %16 %52 %23
               OpSelectionMerge %55 None
               OpBranchConditional %53 %54 %55
         %54 = OpLabel
               OpBranch %38
         %55 = OpLabel
         %58 = OpLoad %7 %26
               OpBranch %39
         %39 = OpLabel
         %60 = OpISub %32 %113 %35
               OpBranch %36
         %38 = OpLabel
        %114 = OpPhi %16 %116 %36 %116 %47 %98 %54
               OpSelectionMerge %104 None
               OpBranchConditional %114 %30 %104
        %104 = OpLabel
               OpStore %26 %119
         %66 = OpCompositeExtract %32 %124 0
         %67 = OpIEqual %16 %66 %35
               OpSelectionMerge %69 None
               OpBranchConditional %67 %68 %69
         %68 = OpLabel
         %72 = OpIAdd %32 %129 %35
               OpBranch %69
         %69 = OpLabel
        %132 = OpPhi %32 %129 %104 %72 %68
         %74 = OpIEqual %16 %132 %35
               OpSelectionMerge %76 None
               OpBranchConditional %74 %75 %76
         %75 = OpLabel
         %78 = OpLoad %7 %26
               OpStore %26 %80
         %81 = OpAccessChain %12 %9 %50
         %82 = OpLoad %6 %81
         %83 = OpFOrdGreaterThanEqual %16 %82 %23
               OpSelectionMerge %85 None
               OpBranchConditional %83 %84 %85
         %84 = OpLabel
               OpStore %26 %78
               OpBranch %85
         %85 = OpLabel
               OpBranch %87
         %87 = OpLabel
        %140 = OpPhi %62 %124 %85 %110 %88
        %133 = OpPhi %32 %138 %85 %97 %88
         %94 = OpSLessThan %16 %133 %35
               OpLoopMerge %89 %88 None
               OpBranchConditional %94 %88 %89
         %88 = OpLabel
        %110 = OpCompositeInsert %62 %35 %156 0
         %97 = OpIAdd %32 %133 %35
               OpBranch %87
         %89 = OpLabel
               OpBranch %76
         %76 = OpLabel
        %155 = OpPhi %32 %138 %69 %133 %89
        %151 = OpPhi %62 %124 %69 %140 %89
               OpBranch %31
         %31 = OpLabel
               OpBranch %28
         %30 = OpLabel
               OpSelectionMerge %106 None
               OpBranchConditional %114 %99 %106
        %106 = OpLabel
               OpBranch %99
         %99 = OpLabel
               OpReturn
               OpFunctionEnd
