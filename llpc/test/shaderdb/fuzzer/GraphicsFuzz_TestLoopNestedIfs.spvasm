; BEGIN_SHADERTEST
; RUN: amdllpc -verify-ir -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC.*}} SPIRV-to-LLVM translation results
; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST
;
; Based on https://github.com/GPUOpen-Drivers/llpc/issues/208.

; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 57
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %27
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %8 "j"
               OpName %27 "_GLF_color"
               OpName %53 "a"
               OpDecorate %8 RelaxedPrecision
               OpDecorate %15 RelaxedPrecision
               OpDecorate %19 RelaxedPrecision
               OpDecorate %27 Location 0
               OpDecorate %31 RelaxedPrecision
               OpDecorate %36 RelaxedPrecision
               OpDecorate %41 RelaxedPrecision
               OpDecorate %55 RelaxedPrecision
               OpDecorate %56 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %9 = OpConstant %6 0
         %16 = OpConstant %6 2
         %17 = OpTypeBool
         %20 = OpConstant %6 1
         %24 = OpTypeFloat 32
         %25 = OpTypeVector %24 4
         %26 = OpTypePointer Output %25
         %27 = OpVariable %26 Output
         %28 = OpConstant %24 1
         %29 = OpConstant %24 0
         %30 = OpConstantComposite %25 %28 %29 %29 %28
         %32 = OpConstant %6 3
         %37 = OpConstant %6 4
         %42 = OpConstant %6 5
         %47 = OpTypeInt 32 0
         %48 = OpConstant %47 0
         %49 = OpTypePointer Output %24
         %52 = OpTypePointer Function %24
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %53 = OpVariable %52 Function
               OpStore %8 %9
               OpBranch %10
         %10 = OpLabel
               OpLoopMerge %12 %13 None
               OpBranch %14
         %14 = OpLabel
         %15 = OpLoad %6 %8
         %18 = OpSLessThan %17 %15 %16
               OpBranchConditional %18 %11 %12
         %11 = OpLabel
         %19 = OpLoad %6 %8
         %21 = OpSLessThan %17 %19 %20
               OpSelectionMerge %23 None
               OpBranchConditional %21 %22 %23
         %22 = OpLabel
               OpStore %27 %30
               OpBranch %23
         %23 = OpLabel
         %31 = OpLoad %6 %8
         %33 = OpINotEqual %17 %31 %32
               OpSelectionMerge %35 None
               OpBranchConditional %33 %34 %35
         %34 = OpLabel
         %36 = OpLoad %6 %8
         %38 = OpINotEqual %17 %36 %37
               OpSelectionMerge %40 None
               OpBranchConditional %38 %39 %40
         %39 = OpLabel
         %41 = OpLoad %6 %8
         %43 = OpIEqual %17 %41 %42
               OpSelectionMerge %45 None
               OpBranchConditional %43 %44 %51
         %44 = OpLabel
         %46 = OpExtInst %24 %1 Ldexp %28 %16
         %50 = OpAccessChain %49 %27 %48
               OpStore %50 %46
               OpBranch %45
         %51 = OpLabel
         %54 = OpExtInst %24 %1 Ldexp %28 %16
               OpStore %53 %54
               OpStore %27 %30
               OpBranch %45
         %45 = OpLabel
               OpBranch %40
         %40 = OpLabel
               OpBranch %35
         %35 = OpLabel
               OpBranch %13
         %13 = OpLabel
         %55 = OpLoad %6 %8
         %56 = OpIAdd %6 %55 %20
               OpStore %8 %56
               OpBranch %10
         %12 = OpLabel
               OpReturn
               OpFunctionEnd
