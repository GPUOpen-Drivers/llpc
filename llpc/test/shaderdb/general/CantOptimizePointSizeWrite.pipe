
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This test is to verify the optimization of PointSize write cannot be performed. When the write value of PointSize is
; not uniformly 1.0, we should disable the optimization. In such case, PointSize normally takes different values. The
; missing writes of 1.0 is not semantically correct.

; RUN: amdllpc -emit-llvm -print-after=lgc-collect-resource-usage %gfxip %s 2>&1 | FileCheck -check-prefix=SHADERTEST %s

; SHADERTEST-LABEL: @lgc.shader.GS.main()
; SHADERTEST: call void @lgc.output.export.builtin.PointSize.i32.i32.f32(i32 1, i32 1, float 1.000000e+00)
; SHADERTEST: call void @lgc.output.export.builtin.PointSize.i32.i32.f32(i32 1, i32 1, float 2.000000e+00)

[Version]
version = 75

[VsGlsl]
#version 450

void main(void)
{
}

[VsInfo]
entryPoint = main

[GsGlsl]
#version 450

layout(points) in;
layout(points, max_vertices = 16) out;
layout(stream = 1) out;
layout(location = 0) out vec4 color;

layout(stream = 1) out gl_PerVertex
{
    vec4 gl_Position;
    float gl_PointSize;
};

void main(void)
{
    // Color constants
    vec4 g = vec4(0.0, 1.0, 0.0, 1.0);
    vec4 m = vec4(1.0, 0.0, 1.0, 1.0);
    // Coordinate constants: leftmost column
    vec4 a = vec4(-1.0,-1.0, 0.0, 1.0);
    vec4 b = vec4(-1.0, 0.0, 0.0, 1.0);
    vec4 c = vec4(-1.0, 1.0, 0.0, 1.0);
    // Coordinate constants: middle column
    vec4 i = vec4( 0.0,-1.0, 0.0, 1.0);
    vec4 j = vec4( 0.0, 0.0, 0.0, 1.0);
    vec4 k = vec4( 0.0, 1.0, 0.0, 1.0);
    // Coordinate constants: rightmost column
    vec4 x = vec4( 1.0,-1.0, 0.0, 1.0);
    vec4 y = vec4( 1.0, 0.0, 0.0, 1.0);
    vec4 z = vec4( 1.0, 1.0, 0.0, 1.0);

    if (gl_PrimitiveIDIn == 0)
    {
        color = g; gl_Position = (a + j) / 2.0f; gl_PointSize = 1.0f; EmitStreamVertex(0);
        EndStreamPrimitive(0);
        color = m; gl_Position = (b + k) / 2.0f; gl_PointSize = 1.0f; EmitStreamVertex(1);
        EndStreamPrimitive(1);
    }
    else
    {
        color = g; gl_Position = (j + x) / 2.0f; gl_PointSize = 2.0f; EmitStreamVertex(0);
        EndStreamPrimitive(0);
        color = m; gl_Position = (k + y) / 2.0f; gl_PointSize = 2.0f; EmitStreamVertex(1);
        EndStreamPrimitive(1);
    }
}

[GsInfo]
entryPoint = main

[FsGlsl]
#version 450

layout(location = 0) in  vec4 i_color;
layout(location = 0) out vec4 o_color;

void main(void)
{
    o_color = i_color;
}

[FsInfo]
entryPoint = main

[ResourceMapping]
[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST
provokingVertexMode = VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT
depthClipEnable = 1
rasterStream = 1
numSamples = 1
rasterStream = 1
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 0
options.optimizationLevel = 2
options.optimizePointSizeWrite = 1
