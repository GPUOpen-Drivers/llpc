// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --version 5
// RUN: amdllpc -gfxip 11.0 -emit-llvm -o - %s | FileCheck -check-prefixes=CHECK %s

/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/
#version 450

struct Foo
{
 float Array[32];
};

layout(binding = 0) uniform Uniforms {
  int index;
};

layout(set=0, binding = 0) readonly buffer Buffer1 { Foo foo[]; };
layout(set=0, binding = 1) buffer Buffer2 { vec4 outColor; };
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main()
{
  Foo bar = foo[index];
  outColor = vec4(bar.Array[index].xxx, 1.0f);
}
// CHECK-LABEL: define dllexport amdgpu_cs void @_amdgpu_cs_main(
// CHECK-SAME: i32 inreg noundef [[GLOBALTABLE:%.*]], i32 inreg noundef [[USERDATA0:%.*]], i32 inreg noundef [[DUMMYINIT2:%.*]], i32 inreg noundef [[DUMMYINIT3:%.*]], i32 inreg noundef [[DUMMYINIT4:%.*]], i32 inreg noundef [[DUMMYINIT5:%.*]], i32 inreg noundef [[DUMMYINIT6:%.*]], i32 inreg noundef [[DUMMYINIT7:%.*]], i32 inreg noundef [[DUMMYINIT8:%.*]], i32 inreg noundef [[DUMMYINIT9:%.*]], i32 inreg noundef [[DUMMYINIT10:%.*]], i32 inreg noundef [[DUMMYINIT11:%.*]], i32 inreg noundef [[DUMMYINIT12:%.*]], i32 inreg noundef [[DUMMYINIT13:%.*]], i32 inreg noundef [[DUMMYINIT14:%.*]], i32 inreg noundef [[DUMMYINIT15:%.*]], i32 inreg noundef [[MULTIDISPATCHINFO:%.*]], i32 noundef [[LOCALINVOCATIONID:%.*]]) #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META6:![0-9]+]] !lgc.shaderstage [[META7:![0-9]+]] {
// CHECK-NEXT:  [[_ENTRY:.*:]]
// CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// CHECK-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -4294967296
// CHECK-NEXT:    [[TMP2:%.*]] = zext i32 [[USERDATA0]] to i64
// CHECK-NEXT:    [[TMP3:%.*]] = or disjoint i64 [[TMP1]], [[TMP2]]
// CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
// CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP4]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP4]], i32 -1) ]
// CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP4]], align 16
// CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> [[TMP5]], i32 0, i32 0), !invariant.load [[META8:![0-9]+]]
// CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i32 [[TMP6]], 32
// CHECK-NEXT:    br i1 [[TMP7]], label %[[BB8:.*]], label %[[BB14:.*]]
// CHECK:       [[BB8]]:
// CHECK-NEXT:    [[TMP9:%.*]] = shl nuw nsw i32 [[TMP6]], 7
// CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(6) null, i32 [[TMP9]]
// CHECK-NEXT:    [[TMP11:%.*]] = getelementptr { [32 x float] }, ptr addrspace(6) [[TMP10]], i32 0, i32 0, i32 [[TMP6]]
// CHECK-NEXT:    [[TMP12:%.*]] = ptrtoint ptr addrspace(6) [[TMP11]] to i32
// CHECK-NEXT:    [[TMP13:%.*]] = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> [[TMP5]], i32 [[TMP12]], i32 0), !invariant.load [[META8]]
// CHECK-NEXT:    br label %[[BB14]]
// CHECK:       [[BB14]]:
// CHECK-NEXT:    [[TMP15:%.*]] = phi i32 [ 0, [[DOTENTRY:%.*]] ], [ [[TMP13]], %[[BB8]] ]
// CHECK-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP4]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP4]], i32 -1) ]
// CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP4]], i64 16
// CHECK-NEXT:    [[TMP17:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP16]], align 16
// CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1065353216>, i32 [[TMP15]], i64 0
// CHECK-NEXT:    [[TMP19:%.*]] = insertelement <4 x i32> [[TMP18]], i32 [[TMP15]], i64 1
// CHECK-NEXT:    [[TMP20:%.*]] = insertelement <4 x i32> [[TMP19]], i32 [[TMP15]], i64 2
// CHECK-NEXT:    call void @llvm.amdgcn.raw.buffer.store.v4i32{{(\.v4i32)?}}(<4 x i32> [[TMP20]], <4 x i32> [[TMP17]], i32 0, i32 0, i32 0)
// CHECK-NEXT:    ret void
//
//.
// CHECK: [[META6]] = !{i32 5}
// CHECK: [[META7]] = !{i32 7}
// CHECK: [[META8]] = !{}
//.
