; Check that timer profile and pipeline info printing works for pipe inputs.

; RUN: amdllpc -v %gfxip %s --enable-timer-profile >%t.stdout 2>%t.stderr \
; RUN:   && cat %t.stdout %t.stderr | FileCheck %s
;
; Check stdout.
; CHECK:       {{^//}} Pipeline file info for [[INPUT:.+\.pipe]] {{$}}
; CHECK:       {{^}}LLPC PipelineHash: 0x[[#%.16X,PIPE_HASH:]] Files: [[INPUT]]{{$}}
;
; CHECK-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; CHECK-LABEL: {{^}}===== AMDLLPC SUCCESS =====
;
; Check stderr.
; CHECK:       {{^}} LLPC ShaderModule Phases 0x[[#%.16X,SHADER_HASH:]]{{$}}
; CHECK:       {{^}} LLPC ShaderModule 0x[[#SHADER_HASH]]
; CHECK-NOT:   {{^}} LLPC ShaderModule
;
; CHECK:       {{^}} LLPC Phases 0x[[#PIPE_HASH]]{{$}}
; CHECK:       {{^}} Total Execution Time:
; CHECK:       {{^}} LLPC 0x[[#PIPE_HASH]]{{$}}
; CHECK:       {{^}} Total Execution Time:

[CsGlsl]
#version 450

layout(binding = 0, std430) buffer OUT
{
    uvec4 o;
};

layout(binding = 1, std430) buffer IN
{
    uvec4 i;
};

layout(local_size_x = 2, local_size_y = 3) in;
void main()
{
    o = i;
}

[CsInfo]
entryPoint = main
userDataNode[0].type = DescriptorBuffer
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 4
userDataNode[0].set = 0
userDataNode[0].binding = 0
userDataNode[1].type = DescriptorBuffer
userDataNode[1].offsetInDwords = 4
userDataNode[1].sizeInDwords = 4
userDataNode[1].set = 0
userDataNode[1].binding = 1
