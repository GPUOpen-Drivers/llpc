
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This test checks if the i64 exponent of ldexp can be handled correctly. We add check if the exponent
; is less than the min value and flush the result to zero.

; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s

; SHADERTEST-LABEL: {{^// LLPC}} final pipeline module info
; SHADERTEST: %[[EXP:[^ ,]*]] = bitcast <2 x i32> %{{.*}} to i64
; SHADERTEST: %[[LESS:[^ ,]*]] = icmp slt i64 %[[EXP]], -1022
; SHADERTEST-NEXT: %[[EXP_32:[^ ,]*]] = trunc i64 %[[EXP]] to i32
; SHADERTEST-NEXT: %[[LDEXP:[^ ,]*]] = call reassoc nnan nsz arcp contract double @llvm.ldexp.f64.i32(double %{{.*}}, i32 %[[EXP_32]])
; SHADERTEST-NEXT: %[[EXP_NEW:[^ ,]*]] = call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %[[LDEXP]])
; SHADERTEST-NEXT: %[[DENORM:[^ ,]*]] = icmp slt i32 %[[EXP_NEW]], -1021
; SHADERTEST-NEXT: %[[LESS_NEW:[^ ,]*]] = select i1 %[[LESS]], i1 true, i1 %[[DENORM]]
; SHADERTEST-NEXT: select reassoc nnan nsz arcp contract i1 %[[LESS_NEW]], double 0.000000e+00, double %[[LDEXP]]

; SHADERTEST-LABEL: {{^// LLPC}} final ELF info
; SHADERTEST: s_movk_i32 s2, 0xfc02
; SHADERTEST: s_mov_b32 s3, -1
; SHADERTEST: v_ldexp_f64 v[0:1], v[0:1], v4
; SHADERTEST: v_cmp_gt_i64_e32 vcc_lo, s[2:3], v[4:5]
; SHADERTEST: v_frexp_exp_i32_f64_e32 v9, v[0:1]
; SHADERTEST: v_cmp_gt_i32_e64 s0, 0xfffffc03, v9
; SHADERTEST: s_or_b32 s0, vcc_lo, s0
; SHADERTEST: v_cndmask_b32_e64 v1, v1, 0, s0
; SHADERTEST: v_cndmask_b32_e64 v0, v0, 0, s0

; SHADERTEST-LABEL: {{^}}===== AMDLLPC SUCCESS =====

; SPIR-V
; Version: 1.0
; Generator: Khronos SPIR-V Tools Assembler; 0
; Bound: 65
; Schema: 0
               OpCapability Shader
               OpCapability Float64
               OpCapability Int64
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_LocalInvocationIndex
               OpExecutionMode %main LocalSize 64 1 1
               OpSource GLSL 460
               OpSourceExtension "GL_EXT_shader_explicit_arithmetic_types"
               OpName %main "main"
               OpName %idx "idx"
               OpName %gl_LocalInvocationIndex "gl_LocalInvocationIndex"
               OpName %PushConstantBlock "PushConstantBlock"
               OpMemberName %PushConstantBlock 0 "count"
               OpName %_ ""
               OpName %s "s"
               OpName %SignificandBlock "SignificandBlock"
               OpMemberName %SignificandBlock 0 "significands"
               OpName %__0 ""
               OpName %e "e"
               OpName %ExponentsBlock "ExponentsBlock"
               OpMemberName %ExponentsBlock 0 "exponents"
               OpName %__1 ""
               OpName %r "r"
               OpName %ResultsBlock "ResultsBlock"
               OpMemberName %ResultsBlock 0 "results"
               OpName %__2 ""
               OpDecorate %gl_LocalInvocationIndex BuiltIn LocalInvocationIndex
               OpDecorate %PushConstantBlock Block
               OpMemberDecorate %PushConstantBlock 0 Offset 0
               OpDecorate %_runtimearr_v2double ArrayStride 16
               OpDecorate %SignificandBlock BufferBlock
               OpMemberDecorate %SignificandBlock 0 NonWritable
               OpMemberDecorate %SignificandBlock 0 Offset 0
               OpDecorate %__0 NonWritable
               OpDecorate %__0 Binding 0
               OpDecorate %__0 DescriptorSet 0
               OpDecorate %_runtimearr_v2long ArrayStride 16
               OpDecorate %ExponentsBlock BufferBlock
               OpMemberDecorate %ExponentsBlock 0 NonWritable
               OpMemberDecorate %ExponentsBlock 0 Offset 0
               OpDecorate %__1 NonWritable
               OpDecorate %__1 Binding 1
               OpDecorate %__1 DescriptorSet 0
               OpDecorate %_runtimearr_v2double_0 ArrayStride 16
               OpDecorate %ResultsBlock BufferBlock
               OpMemberDecorate %ResultsBlock 0 Offset 0
               OpDecorate %__2 Binding 2
               OpDecorate %__2 DescriptorSet 0
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
%_ptr_Input_uint = OpTypePointer Input %uint
%gl_LocalInvocationIndex = OpVariable %_ptr_Input_uint Input
%PushConstantBlock = OpTypeStruct %uint
%_ptr_PushConstant_PushConstantBlock = OpTypePointer PushConstant %PushConstantBlock
          %_ = OpVariable %_ptr_PushConstant_PushConstantBlock PushConstant
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_PushConstant_uint = OpTypePointer PushConstant %uint
       %bool = OpTypeBool
     %double = OpTypeFloat 64
   %v2double = OpTypeVector %double 2
%_ptr_Function_v2double = OpTypePointer Function %v2double
%_runtimearr_v2double = OpTypeRuntimeArray %v2double
%SignificandBlock = OpTypeStruct %_runtimearr_v2double
%_ptr_Uniform_SignificandBlock = OpTypePointer Uniform %SignificandBlock
        %__0 = OpVariable %_ptr_Uniform_SignificandBlock Uniform
%_ptr_Uniform_v2double = OpTypePointer Uniform %v2double
       %long = OpTypeInt 64 1
     %v2long = OpTypeVector %long 2
%_ptr_Function_v2long = OpTypePointer Function %v2long
%_runtimearr_v2long = OpTypeRuntimeArray %v2long
%ExponentsBlock = OpTypeStruct %_runtimearr_v2long
%_ptr_Uniform_ExponentsBlock = OpTypePointer Uniform %ExponentsBlock
        %__1 = OpVariable %_ptr_Uniform_ExponentsBlock Uniform
%_ptr_Uniform_v2long = OpTypePointer Uniform %v2long
      %v2int = OpTypeVector %int 2
%_runtimearr_v2double_0 = OpTypeRuntimeArray %v2double
%ResultsBlock = OpTypeStruct %_runtimearr_v2double_0
%_ptr_Uniform_ResultsBlock = OpTypePointer Uniform %ResultsBlock
        %__2 = OpVariable %_ptr_Uniform_ResultsBlock Uniform
     %v3uint = OpTypeVector %uint 3
    %uint_64 = OpConstant %uint 64
     %uint_1 = OpConstant %uint 1
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_64 %uint_1 %uint_1
       %main = OpFunction %void None %3
          %5 = OpLabel
        %idx = OpVariable %_ptr_Function_uint Function
          %s = OpVariable %_ptr_Function_v2double Function
          %e = OpVariable %_ptr_Function_v2long Function
          %r = OpVariable %_ptr_Function_v2double Function
         %11 = OpLoad %uint %gl_LocalInvocationIndex
               OpStore %idx %11
         %12 = OpLoad %uint %idx
         %19 = OpAccessChain %_ptr_PushConstant_uint %_ %int_0
         %20 = OpLoad %uint %19
         %22 = OpULessThan %bool %12 %20
               OpSelectionMerge %24 None
               OpBranchConditional %22 %23 %24
         %23 = OpLabel
         %33 = OpLoad %uint %idx
         %35 = OpAccessChain %_ptr_Uniform_v2double %__0 %int_0 %33
         %36 = OpLoad %v2double %35
               OpStore %s %36
         %45 = OpLoad %uint %idx
         %47 = OpAccessChain %_ptr_Uniform_v2long %__1 %int_0 %45
         %48 = OpLoad %v2long %47
               OpStore %e %48
         %50 = OpLoad %v2double %s
         %51 = OpLoad %v2long %e
         %54 = OpExtInst %v2double %1 Ldexp %50 %51
               OpStore %r %54
         %59 = OpLoad %uint %idx
         %60 = OpLoad %v2double %r
         %61 = OpAccessChain %_ptr_Uniform_v2double %__2 %int_0 %59
               OpStore %61 %60
               OpBranch %24
         %24 = OpLabel
               OpReturn
               OpFunctionEnd
