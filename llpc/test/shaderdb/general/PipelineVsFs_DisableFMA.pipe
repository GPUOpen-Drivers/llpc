;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


// Disable FMA

; BEGIN_SHADERTEST
; RUN: amdllpc --gfxip=10.3.0 -v %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST-NOT: @lgc.create.fma
; SHADERTEST: ret void
; END_SHADERTEST

[Version]
version = 46

[VsGlsl]
#version 450

layout(binding = 0, std140) uniform _37_39
{
    float _m0;
    float _m1;
} _39;

void main()
{
    gl_Position = vec4(fma(_39._m0, _39._m0, _39._m1),0, 0, 1.0);
}

[VsInfo]
entryPoint = main
options.disableFMA = 1


[FsGlsl]
#version 450
layout(early_fragment_tests) in;

layout(location = 0, component = 0) out vec4 _9;

void main()
{
    _9 = vec4(0.0,1.0,0.0,1.0);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].type = StreamOutTableVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[1].type = DescriptorBuffer
userDataNode[1].offsetInDwords = 1
userDataNode[1].sizeInDwords = 4
userDataNode[1].set = 0
userDataNode[1].binding = 0
userDataNode[2].type = DescriptorBuffer
userDataNode[2].offsetInDwords = 5
userDataNode[2].sizeInDwords = 4
userDataNode[2].set = 1
userDataNode[2].binding = 0
userDataNode[3].type = DescriptorBuffer
userDataNode[3].offsetInDwords = 9
userDataNode[3].sizeInDwords = 4
userDataNode[3].set = 1
userDataNode[3].binding = 1
userDataNode[4].type = IndirectUserDataVaPtr
userDataNode[4].offsetInDwords = 13
userDataNode[4].sizeInDwords = 1
userDataNode[4].indirectUserDataCount = 4

[GraphicsPipelineState]
colorBuffer[0].format = VK_FORMAT_B8G8R8A8_UNORM
colorBuffer[0].channelWriteMask = 15

[VertexInputState]
binding[0].binding = 0
binding[0].stride = 2
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R8G8_SNORM
attribute[0].offset = 0
dynamicVertexStride = 0
