; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefixes=SHADERTEST %s
[Version]
version = 64

[VsGlsl]
#version 440
layout(location = 0) in vec4 vs_in_position_ndc;
layout(location = 1) in vec2 vs_in_position_screen;

layout(location = 0) out vec2 vs_out_pos_screen_fragment;
layout(location = 1) out vec2 vs_out_pos_screen_sample;

out gl_PerVertex {
  vec4  gl_Position;
};
void main (void)
{
  gl_Position					= vs_in_position_ndc;
  vs_out_pos_screen_fragment	= vs_in_position_screen;
  vs_out_pos_screen_sample	= vs_in_position_screen;
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 440
layout(location = 0) in vec2 fs_in_pos_screen_fragment;
layout(location = 1) sample in vec2 fs_in_pos_screen_sample;

layout(location = 0) out vec4 fs_out_color;

void main (void)
{
   const float threshold = 0.15625;
   const vec2 offset                     = gl_SamplePosition - vec2(0.5, 0.5);
   const vec2 pos_interpolated_at_offset = interpolateAtOffset(fs_in_pos_screen_fragment, offset);
   const bool valuesEqual                = all(lessThan(abs(pos_interpolated_at_offset - fs_in_pos_screen_sample), vec2(threshold)));
   if (valuesEqual)
     fs_out_color = vec4(0.0, 1.0, 0.0, 1.0);
   else
     fs_out_color = vec4(1.0, 0.0, 0.0, 1.0);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 4
userDataNode[0].type = StreamOutTableVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[1].visibility = 2
userDataNode[1].type = IndirectUserDataVaPtr
userDataNode[1].offsetInDwords = 1
userDataNode[1].sizeInDwords = 1
userDataNode[1].indirectUserDataCount = 4

[GraphicsPipelineState]
dynamicSampleInfo=1
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 0

[VertexInputState]
binding[0].binding = 0
binding[0].stride = 24
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 1
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32_SFLOAT
attribute[1].offset = 16
; SHADERTEST-LABEL: @_amdgpu_ps_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[PERSPINTERPPULLMODE_I0:%.*]] = extractelement <3 x float> [[PERSPINTERPPULLMODE:%.*]], i64 0
; SHADERTEST-NEXT:    [[PERSPINTERPPULLMODE_I1:%.*]] = extractelement <3 x float> [[PERSPINTERPPULLMODE]], i64 1
; SHADERTEST-NEXT:    [[PERSPINTERPPULLMODE_I2:%.*]] = extractelement <3 x float> [[PERSPINTERPPULLMODE]], i64 2
; SHADERTEST-NEXT:    [[PERSPINTERPSAMPLE_I1:%.*]] = extractelement <2 x float> [[PERSPINTERPSAMPLE:%.*]], i64 1
; SHADERTEST-NEXT:    [[PERSPINTERPSAMPLE_I0:%.*]] = extractelement <2 x float> [[PERSPINTERPSAMPLE]], i64 0
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc() #[[ATTR2:[0-9]+]]
; SHADERTEST-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -4294967296
; SHADERTEST-NEXT:    [[TMP2:%.*]] = zext i32 [[GLOBALTABLE:%.*]] to i64
; SHADERTEST-NEXT:    [[TMP3:%.*]] = or i64 [[TMP1]], [[TMP2]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP5:%.*]] = call float @llvm.amdgcn.interp.p1(float [[PERSPINTERPSAMPLE_I0]], i32 immarg 2, i32 immarg 0, i32 [[PRIMMASK:%.*]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP6:%.*]] = call float @llvm.amdgcn.interp.p2(float [[TMP5]], float [[PERSPINTERPSAMPLE_I1]], i32 immarg 2, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP7:%.*]] = call float @llvm.amdgcn.interp.p1(float [[PERSPINTERPSAMPLE_I0]], i32 immarg 3, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP8:%.*]] = call float @llvm.amdgcn.interp.p2(float [[TMP7]], float [[PERSPINTERPSAMPLE_I1]], i32 immarg 3, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP9:%.*]] = lshr i32 [[ANCILLARY:%.*]], 8
; SHADERTEST-NEXT:    [[TMP10:%.*]] = and i32 [[TMP9]], 15
; SHADERTEST-NEXT:    [[TMP11:%.*]] = and i32 [[SAMPLEINFO:%.*]], 65535
; SHADERTEST-NEXT:    [[TMP12:%.*]] = lshr i32 [[SAMPLEINFO]], 16
; SHADERTEST-NEXT:    [[TMP13:%.*]] = add nuw nsw i32 [[TMP10]], [[TMP12]]
; SHADERTEST-NEXT:    [[TMP14:%.*]] = icmp ugt i32 [[TMP11]], [[TMP10]]
; SHADERTEST-NEXT:    [[TMP15:%.*]] = shl nuw nsw i32 [[TMP13]], 4
; SHADERTEST-NEXT:    [[TMP16:%.*]] = getelementptr <4 x i32>, ptr addrspace(4) [[TMP4]], i64 12
; SHADERTEST-NEXT:    [[TMP17:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP16]], align 16
; SHADERTEST-NEXT:    [[TMP18:%.*]] = select i1 [[TMP14]], i32 [[TMP15]], i32 0
; SHADERTEST-NEXT:    [[TMP19:%.*]] = call <2 x float> @llvm.amdgcn.raw.buffer.load.v2f32(<4 x i32> [[TMP17]], i32 [[TMP18]], i32 0, i32 0)
; SHADERTEST-NEXT:    [[DOTI1:%.*]] = extractelement <2 x float> [[TMP19]], i64 1
; SHADERTEST-NEXT:    [[DOTI0:%.*]] = extractelement <2 x float> [[TMP19]], i64 0
; SHADERTEST-NEXT:    [[BC_I0:%.*]] = bitcast float [[PERSPINTERPPULLMODE_I0]] to i32
; SHADERTEST-NEXT:    [[BC_I1:%.*]] = bitcast float [[PERSPINTERPPULLMODE_I1]] to i32
; SHADERTEST-NEXT:    [[BC_I2:%.*]] = bitcast float [[PERSPINTERPPULLMODE_I2]] to i32
; SHADERTEST-NEXT:    [[TMP20:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I0]], i32 245, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP21:%.*]] = bitcast i32 [[TMP20]] to float
; SHADERTEST-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I0]], i32 160, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP23:%.*]] = bitcast i32 [[TMP22]] to float
; SHADERTEST-NEXT:    [[TMP24:%.*]] = fsub float [[TMP21]], [[TMP23]]
; SHADERTEST-NEXT:    [[TMP25:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP24]])
; SHADERTEST-NEXT:    [[TMP26:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I1]], i32 245, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP27:%.*]] = bitcast i32 [[TMP26]] to float
; SHADERTEST-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I1]], i32 160, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP29:%.*]] = bitcast i32 [[TMP28]] to float
; SHADERTEST-NEXT:    [[TMP30:%.*]] = fsub float [[TMP27]], [[TMP29]]
; SHADERTEST-NEXT:    [[TMP31:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP30]])
; SHADERTEST-NEXT:    [[TMP32:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I2]], i32 245, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP33:%.*]] = bitcast i32 [[TMP32]] to float
; SHADERTEST-NEXT:    [[TMP34:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I2]], i32 160, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP35:%.*]] = bitcast i32 [[TMP34]] to float
; SHADERTEST-NEXT:    [[TMP36:%.*]] = fsub float [[TMP33]], [[TMP35]]
; SHADERTEST-NEXT:    [[TMP37:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP36]])
; SHADERTEST-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I0]], i32 238, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP39:%.*]] = bitcast i32 [[TMP38]] to float
; SHADERTEST-NEXT:    [[TMP40:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I0]], i32 68, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP41:%.*]] = bitcast i32 [[TMP40]] to float
; SHADERTEST-NEXT:    [[TMP42:%.*]] = fsub float [[TMP39]], [[TMP41]]
; SHADERTEST-NEXT:    [[TMP43:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP42]])
; SHADERTEST-NEXT:    [[TMP44:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I1]], i32 238, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP45:%.*]] = bitcast i32 [[TMP44]] to float
; SHADERTEST-NEXT:    [[TMP46:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I1]], i32 68, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP47:%.*]] = bitcast i32 [[TMP46]] to float
; SHADERTEST-NEXT:    [[TMP48:%.*]] = fsub float [[TMP45]], [[TMP47]]
; SHADERTEST-NEXT:    [[TMP49:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP48]])
; SHADERTEST-NEXT:    [[TMP50:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I2]], i32 238, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP51:%.*]] = bitcast i32 [[TMP50]] to float
; SHADERTEST-NEXT:    [[TMP52:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[BC_I2]], i32 68, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP53:%.*]] = bitcast i32 [[TMP52]] to float
; SHADERTEST-NEXT:    [[TMP54:%.*]] = fsub float [[TMP51]], [[TMP53]]
; SHADERTEST-NEXT:    [[TMP55:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP54]])
; SHADERTEST-NEXT:    [[DOTI06:%.*]] = fmul float [[DOTI0]], [[TMP25]]
; SHADERTEST-NEXT:    [[DOTI17:%.*]] = fmul float [[DOTI0]], [[TMP31]]
; SHADERTEST-NEXT:    [[DOTI2:%.*]] = fmul float [[DOTI0]], [[TMP37]]
; SHADERTEST-NEXT:    [[DOTI08:%.*]] = fadd float [[DOTI06]], [[PERSPINTERPPULLMODE_I0]]
; SHADERTEST-NEXT:    [[DOTI19:%.*]] = fadd float [[DOTI17]], [[PERSPINTERPPULLMODE_I1]]
; SHADERTEST-NEXT:    [[DOTI210:%.*]] = fadd float [[DOTI2]], [[PERSPINTERPPULLMODE_I2]]
; SHADERTEST-NEXT:    [[DOTI011:%.*]] = fmul float [[DOTI1]], [[TMP43]]
; SHADERTEST-NEXT:    [[DOTI112:%.*]] = fmul float [[DOTI1]], [[TMP49]]
; SHADERTEST-NEXT:    [[DOTI213:%.*]] = fmul float [[DOTI1]], [[TMP55]]
; SHADERTEST-NEXT:    [[DOTI014:%.*]] = fadd float [[DOTI08]], [[DOTI011]]
; SHADERTEST-NEXT:    [[DOTI115:%.*]] = fadd float [[DOTI19]], [[DOTI112]]
; SHADERTEST-NEXT:    [[DOTI216:%.*]] = fadd float [[DOTI210]], [[DOTI213]]
; SHADERTEST-NEXT:    [[TMP56:%.*]] = fdiv float 1.000000e+00, [[DOTI216]]
; SHADERTEST-NEXT:    [[DOTI017:%.*]] = fmul float [[DOTI014]], [[TMP56]]
; SHADERTEST-NEXT:    [[DOTI118:%.*]] = fmul float [[DOTI115]], [[TMP56]]
; SHADERTEST-NEXT:    [[TMP57:%.*]] = call float @llvm.amdgcn.interp.p1(float [[DOTI017]], i32 immarg 0, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP58:%.*]] = call float @llvm.amdgcn.interp.p2(float [[TMP57]], float [[DOTI118]], i32 immarg 0, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP59:%.*]] = call float @llvm.amdgcn.interp.p1(float [[DOTI017]], i32 immarg 1, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP60:%.*]] = call float @llvm.amdgcn.interp.p2(float [[TMP59]], float [[DOTI118]], i32 immarg 1, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[DOTI019:%.*]] = fsub reassoc nnan nsz arcp contract afn float [[TMP58]], [[TMP6]]
; SHADERTEST-NEXT:    [[DOTI120:%.*]] = fsub reassoc nnan nsz arcp contract afn float [[TMP60]], [[TMP8]]
; SHADERTEST-NEXT:    [[DOTI021:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.fabs.f32(float [[DOTI019]])
; SHADERTEST-NEXT:    [[DOTI122:%.*]] = call reassoc nnan nsz arcp contract afn float @llvm.fabs.f32(float [[DOTI120]])
; SHADERTEST-NEXT:    [[DOTUPTO053:%.*]] = insertelement <2 x float> poison, float [[DOTI021]], i64 0
; SHADERTEST-NEXT:    [[TMP61:%.*]] = insertelement <2 x float> [[DOTUPTO053]], float [[DOTI122]], i64 1
; SHADERTEST-NEXT:    [[TMP62:%.*]] = fcmp olt <2 x float> [[TMP61]], <float 1.562500e-01, float 1.562500e-01>
; SHADERTEST-NEXT:    [[TMP63:%.*]] = extractelement <2 x i1> [[TMP62]], i64 0
; SHADERTEST-NEXT:    [[TMP64:%.*]] = extractelement <2 x i1> [[TMP62]], i64 1
; SHADERTEST-NEXT:    [[TMP65:%.*]] = and i1 [[TMP63]], [[TMP64]]
; SHADERTEST-NEXT:    [[COND_FREEZE:%.*]] = freeze i1 [[TMP65]]
; SHADERTEST-NEXT:    [[DOT_I0:%.*]] = select i1 [[COND_FREEZE]], float 0.000000e+00, float 1.000000e+00
; SHADERTEST-NEXT:    [[DOT_I1:%.*]] = select i1 [[COND_FREEZE]], float 1.000000e+00, float 0.000000e+00
; SHADERTEST-NEXT:    [[TMP66:%.*]] = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float [[DOT_I0]], float [[DOT_I1]]) #[[ATTR2]]
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.compr.v2f16(i32 immarg 0, i32 immarg 15, <2 x half> [[TMP66]], <2 x half> <half 0xH0000, half 0xH3C00>, i1 immarg true, i1 immarg true) #[[ATTR6:[0-9]+]]
; SHADERTEST-NEXT:    ret void
;
; SHADERTEST-LABEL:     .registers:
; SHADERTEST:            SPI_SHADER_USER_DATA_PS_0                     0x0000000010000000
; SHADERTEST-NEXT:       SPI_SHADER_USER_DATA_PS_1                     0x0000000010000018

