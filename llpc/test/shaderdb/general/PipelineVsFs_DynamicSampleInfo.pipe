; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --function-signature
; RUN: amdllpc -stop-after=lgc-patch-entry-point-mutate -o - %s | FileCheck -check-prefixes=SHADERTEST %s
[Version]
version = 64

[VsGlsl]
#version 440
layout(location = 0) in vec4 vs_in_position_ndc;
layout(location = 1) in vec2 vs_in_position_screen;

layout(location = 0) out vec2 vs_out_pos_screen_fragment;
layout(location = 1) out vec2 vs_out_pos_screen_sample;

out gl_PerVertex {
  vec4  gl_Position;
};
void main (void)
{
  gl_Position					= vs_in_position_ndc;
  vs_out_pos_screen_fragment	= vs_in_position_screen;
  vs_out_pos_screen_sample	= vs_in_position_screen;
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 440
layout(location = 0) in vec2 fs_in_pos_screen_fragment;
layout(location = 1) sample in vec2 fs_in_pos_screen_sample;

layout(location = 0) out vec4 fs_out_color;

void main (void)
{
   const float threshold = 0.15625;
   const vec2 offset                     = gl_SamplePosition - vec2(0.5, 0.5);
   const vec2 pos_interpolated_at_offset = interpolateAtOffset(fs_in_pos_screen_fragment, offset);
   const bool valuesEqual                = all(lessThan(abs(pos_interpolated_at_offset - fs_in_pos_screen_sample), vec2(threshold)));
   if (valuesEqual)
     fs_out_color = vec4(0.0, 1.0, 0.0, 1.0);
   else
     fs_out_color = vec4(1.0, 0.0, 0.0, 1.0);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 4
userDataNode[0].type = StreamOutTableVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[1].visibility = 2
userDataNode[1].type = IndirectUserDataVaPtr
userDataNode[1].offsetInDwords = 1
userDataNode[1].sizeInDwords = 1
userDataNode[1].indirectUserDataCount = 4

[GraphicsPipelineState]
dynamicSampleInfo=1
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 0

[VertexInputState]
binding[0].binding = 0
binding[0].stride = 24
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 1
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32_SFLOAT
attribute[1].offset = 16
; SHADERTEST-LABEL: define {{[^@]+}}@lgc.shader.VS.main
; SHADERTEST-SAME: (i32 inreg noundef [[GLOBALTABLE:%.*]], i32 inreg noundef [[VERTEXBUFFERTABLE:%.*]], i32 inreg noundef [[BASEVERTEX:%.*]], i32 inreg noundef [[BASEINSTANCE:%.*]], i32 noundef [[VERTEXID:%.*]], i32 noundef [[RELVERTEXID:%.*]], i32 noundef [[PRIMITIVEID:%.*]], i32 noundef [[INSTANCEID:%.*]]) #[[ATTR0:[0-9]+]] !spirv.ExecutionModel !12 !lgc.shaderstage !13 {
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; SHADERTEST-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; SHADERTEST-NEXT:    [[VERTEXINDEX:%.*]] = add i32 [[BASEVERTEX]], [[VERTEXID]]
; SHADERTEST-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[VERTEXBUFFERTABLE]], i64 0
; SHADERTEST-NEXT:    [[TMP3:%.*]] = bitcast <2 x i32> [[TMP2]] to i64
; SHADERTEST-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP5:%.*]] = getelementptr <4 x i32>, ptr addrspace(4) [[TMP4]], i64 0
; SHADERTEST-NEXT:    [[TMP6:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP5]], align 16, !invariant.load !14
; SHADERTEST-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load.i32(<4 x i32> [[TMP6]], i32 [[VERTEXINDEX]], i32 16, i32 0, i32 22, i32 0)
; SHADERTEST-NEXT:    [[TMP8:%.*]] = insertelement <2 x i32> poison, i32 [[TMP7]], i64 0
; SHADERTEST-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load.i32(<4 x i32> [[TMP6]], i32 [[VERTEXINDEX]], i32 20, i32 0, i32 22, i32 0)
; SHADERTEST-NEXT:    [[TMP10:%.*]] = insertelement <2 x i32> [[TMP8]], i32 [[TMP9]], i64 1
; SHADERTEST-NEXT:    [[TMP11:%.*]] = extractelement <2 x i32> [[TMP10]], i32 0
; SHADERTEST-NEXT:    [[TMP12:%.*]] = insertelement <2 x i32> poison, i32 [[TMP11]], i32 0
; SHADERTEST-NEXT:    [[TMP13:%.*]] = extractelement <2 x i32> [[TMP10]], i32 1
; SHADERTEST-NEXT:    [[TMP14:%.*]] = insertelement <2 x i32> [[TMP12]], i32 [[TMP13]], i32 1
; SHADERTEST-NEXT:    [[VERTEX1_0:%.*]] = bitcast <2 x i32> [[TMP14]] to <2 x float>
; SHADERTEST-NEXT:    [[TMP15:%.*]] = getelementptr <4 x i32>, ptr addrspace(4) [[TMP4]], i64 0
; SHADERTEST-NEXT:    [[TMP16:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP15]], align 16, !invariant.load !14
; SHADERTEST-NEXT:    [[TMP17:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load.i32(<4 x i32> [[TMP16]], i32 [[VERTEXINDEX]], i32 0, i32 0, i32 22, i32 0)
; SHADERTEST-NEXT:    [[TMP18:%.*]] = insertelement <4 x i32> poison, i32 [[TMP17]], i64 0
; SHADERTEST-NEXT:    [[TMP19:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load.i32(<4 x i32> [[TMP16]], i32 [[VERTEXINDEX]], i32 4, i32 0, i32 22, i32 0)
; SHADERTEST-NEXT:    [[TMP20:%.*]] = insertelement <4 x i32> [[TMP18]], i32 [[TMP19]], i64 1
; SHADERTEST-NEXT:    [[TMP21:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load.i32(<4 x i32> [[TMP16]], i32 [[VERTEXINDEX]], i32 8, i32 0, i32 22, i32 0)
; SHADERTEST-NEXT:    [[TMP22:%.*]] = insertelement <4 x i32> [[TMP20]], i32 [[TMP21]], i64 2
; SHADERTEST-NEXT:    [[TMP23:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load.i32(<4 x i32> [[TMP16]], i32 [[VERTEXINDEX]], i32 12, i32 0, i32 22, i32 0)
; SHADERTEST-NEXT:    [[TMP24:%.*]] = insertelement <4 x i32> [[TMP22]], i32 [[TMP23]], i64 3
; SHADERTEST-NEXT:    [[TMP25:%.*]] = extractelement <4 x i32> [[TMP24]], i32 0
; SHADERTEST-NEXT:    [[TMP26:%.*]] = insertelement <4 x i32> poison, i32 [[TMP25]], i32 0
; SHADERTEST-NEXT:    [[TMP27:%.*]] = extractelement <4 x i32> [[TMP24]], i32 1
; SHADERTEST-NEXT:    [[TMP28:%.*]] = insertelement <4 x i32> [[TMP26]], i32 [[TMP27]], i32 1
; SHADERTEST-NEXT:    [[TMP29:%.*]] = extractelement <4 x i32> [[TMP24]], i32 2
; SHADERTEST-NEXT:    [[TMP30:%.*]] = insertelement <4 x i32> [[TMP28]], i32 [[TMP29]], i32 2
; SHADERTEST-NEXT:    [[TMP31:%.*]] = extractelement <4 x i32> [[TMP24]], i32 3
; SHADERTEST-NEXT:    [[TMP32:%.*]] = insertelement <4 x i32> [[TMP30]], i32 [[TMP31]], i32 3
; SHADERTEST-NEXT:    [[VERTEX0_0:%.*]] = bitcast <4 x i32> [[TMP32]] to <4 x float>
; SHADERTEST-NEXT:    call void @lgc.output.export.builtin.Position.i32.v4f32(i32 0, <4 x float> [[VERTEX0_0]]) #[[ATTR7:[0-9]+]]
; SHADERTEST-NEXT:    [[TMP33:%.*]] = extractelement <2 x float> [[VERTEX1_0]], i64 0
; SHADERTEST-NEXT:    [[TMP34:%.*]] = extractelement <2 x float> [[VERTEX1_0]], i64 1
; SHADERTEST-NEXT:    [[TMP35:%.*]] = extractelement <2 x float> [[VERTEX1_0]], i64 0
; SHADERTEST-NEXT:    [[TMP36:%.*]] = extractelement <2 x float> [[VERTEX1_0]], i64 1
; SHADERTEST-NEXT:    [[TMP37:%.*]] = bitcast float [[TMP33]] to i32
; SHADERTEST-NEXT:    [[TMP38:%.*]] = bitcast float [[TMP34]] to i32
; SHADERTEST-NEXT:    [[TMP39:%.*]] = bitcast float [[TMP35]] to i32
; SHADERTEST-NEXT:    [[TMP40:%.*]] = bitcast float [[TMP36]] to i32
; SHADERTEST-NEXT:    [[TMP41:%.*]] = bitcast i32 [[TMP37]] to float
; SHADERTEST-NEXT:    [[TMP42:%.*]] = insertelement <4 x float> poison, float [[TMP41]], i64 0
; SHADERTEST-NEXT:    [[TMP43:%.*]] = bitcast i32 [[TMP38]] to float
; SHADERTEST-NEXT:    [[TMP44:%.*]] = insertelement <4 x float> [[TMP42]], float [[TMP43]], i64 1
; SHADERTEST-NEXT:    [[TMP45:%.*]] = bitcast i32 [[TMP39]] to float
; SHADERTEST-NEXT:    [[TMP46:%.*]] = insertelement <4 x float> [[TMP44]], float [[TMP45]], i64 2
; SHADERTEST-NEXT:    [[TMP47:%.*]] = bitcast i32 [[TMP40]] to float
; SHADERTEST-NEXT:    [[TMP48:%.*]] = insertelement <4 x float> [[TMP46]], float [[TMP47]], i64 3
; SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP48]]) #[[ATTR7]]
; SHADERTEST-NEXT:    ret void
;
;
; SHADERTEST-LABEL: define {{[^@]+}}@lgc.shader.FS.main
; SHADERTEST-SAME: (i32 inreg noundef [[GLOBALTABLE:%.*]], i32 inreg noundef [[SAMPLEINFO:%.*]], i32 inreg noundef [[PRIMMASK:%.*]], <2 x float> noundef [[PERSPINTERPSAMPLE:%.*]], <2 x float> noundef [[PERSPINTERPCENTER:%.*]], <2 x float> noundef [[PERSPINTERPCENTROID:%.*]], <3 x float> noundef [[PERSPINTERPPULLMODE:%.*]], <2 x float> noundef [[LINEARINTERPSAMPLE:%.*]], <2 x float> noundef [[LINEARINTERPCENTER:%.*]], <2 x float> noundef [[LINEARINTERPCENTROID:%.*]], float noundef [[LINESTIPPLE:%.*]], float noundef [[FRAGCOORDX:%.*]], float noundef [[FRAGCOORDY:%.*]], float noundef [[FRAGCOORDZ:%.*]], float noundef [[FRAGCOORDW:%.*]], i32 noundef [[FRONTFACING:%.*]], i32 noundef [[ANCILLARY:%.*]], i32 noundef [[SAMPLECOVERAGE:%.*]], i32 noundef [[FIXEDXY:%.*]]) #[[ATTR1:[0-9]+]] !spirv.ExecutionModel !15 !lgc.shaderstage !16 {
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[INTERPPERSPSAMPLE:%.*]] = call <2 x float> @lgc.input.import.builtin.InterpPerspSample.v2f32.i32(i32 268435456) #[[ATTR3:[0-9]+]]
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call float (...) @lgc.input.import.interpolated__f32(i1 false, i32 1, i32 0, i32 0, i32 poison, i32 0, <2 x float> [[INTERPPERSPSAMPLE]])
; SHADERTEST-NEXT:    [[TMP1:%.*]] = insertelement <2 x float> poison, float [[TMP0]], i64 0
; SHADERTEST-NEXT:    [[TMP2:%.*]] = call float (...) @lgc.input.import.interpolated__f32(i1 false, i32 1, i32 0, i32 1, i32 poison, i32 0, <2 x float> [[INTERPPERSPSAMPLE]])
; SHADERTEST-NEXT:    [[TMP3:%.*]] = insertelement <2 x float> [[TMP1]], float [[TMP2]], i64 1
; SHADERTEST-NEXT:    [[SAMPLEPOSITION:%.*]] = call <2 x float> @lgc.input.import.builtin.SamplePosition.v2f32.i32(i32 19) #[[ATTR3]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = fadd reassoc nnan nsz arcp contract afn <2 x float> [[SAMPLEPOSITION]], <float -5.000000e-01, float -5.000000e-01>
; SHADERTEST-NEXT:    [[INTERPPULLMODE:%.*]] = call <3 x float> @lgc.input.import.builtin.InterpPullMode.v3f32.i32(i32 268435459) #[[ATTR3]]
; SHADERTEST-NEXT:    [[TMP5:%.*]] = extractelement <2 x float> [[TMP4]], i64 0
; SHADERTEST-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP4]], i64 1
; SHADERTEST-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <3 x float> poison, float [[TMP5]], i64 0
; SHADERTEST-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <3 x float> [[DOTSPLATINSERT]], <3 x float> poison, <3 x i32> zeroinitializer
; SHADERTEST-NEXT:    [[DOTSPLATINSERT1:%.*]] = insertelement <3 x float> poison, float [[TMP6]], i64 0
; SHADERTEST-NEXT:    [[DOTSPLAT2:%.*]] = shufflevector <3 x float> [[DOTSPLATINSERT1]], <3 x float> poison, <3 x i32> zeroinitializer
; SHADERTEST-NEXT:    [[TMP7:%.*]] = extractelement <3 x float> [[INTERPPULLMODE]], i64 0
; SHADERTEST-NEXT:    [[TMP8:%.*]] = bitcast float [[TMP7]] to i32
; SHADERTEST-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP8]], i32 245, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
; SHADERTEST-NEXT:    [[TMP11:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP8]], i32 160, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP12:%.*]] = bitcast i32 [[TMP11]] to float
; SHADERTEST-NEXT:    [[TMP13:%.*]] = fsub float [[TMP10]], [[TMP12]]
; SHADERTEST-NEXT:    [[TMP14:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP13]])
; SHADERTEST-NEXT:    [[TMP15:%.*]] = insertelement <3 x float> poison, float [[TMP14]], i64 0
; SHADERTEST-NEXT:    [[TMP16:%.*]] = extractelement <3 x float> [[INTERPPULLMODE]], i64 1
; SHADERTEST-NEXT:    [[TMP17:%.*]] = bitcast float [[TMP16]] to i32
; SHADERTEST-NEXT:    [[TMP18:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP17]], i32 245, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP19:%.*]] = bitcast i32 [[TMP18]] to float
; SHADERTEST-NEXT:    [[TMP20:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP17]], i32 160, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP21:%.*]] = bitcast i32 [[TMP20]] to float
; SHADERTEST-NEXT:    [[TMP22:%.*]] = fsub float [[TMP19]], [[TMP21]]
; SHADERTEST-NEXT:    [[TMP23:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP22]])
; SHADERTEST-NEXT:    [[TMP24:%.*]] = insertelement <3 x float> [[TMP15]], float [[TMP23]], i64 1
; SHADERTEST-NEXT:    [[TMP25:%.*]] = extractelement <3 x float> [[INTERPPULLMODE]], i64 2
; SHADERTEST-NEXT:    [[TMP26:%.*]] = bitcast float [[TMP25]] to i32
; SHADERTEST-NEXT:    [[TMP27:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP26]], i32 245, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP28:%.*]] = bitcast i32 [[TMP27]] to float
; SHADERTEST-NEXT:    [[TMP29:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP26]], i32 160, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP30:%.*]] = bitcast i32 [[TMP29]] to float
; SHADERTEST-NEXT:    [[TMP31:%.*]] = fsub float [[TMP28]], [[TMP30]]
; SHADERTEST-NEXT:    [[TMP32:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP31]])
; SHADERTEST-NEXT:    [[TMP33:%.*]] = insertelement <3 x float> [[TMP24]], float [[TMP32]], i64 2
; SHADERTEST-NEXT:    [[TMP34:%.*]] = extractelement <3 x float> [[INTERPPULLMODE]], i64 0
; SHADERTEST-NEXT:    [[TMP35:%.*]] = bitcast float [[TMP34]] to i32
; SHADERTEST-NEXT:    [[TMP36:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP35]], i32 238, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP37:%.*]] = bitcast i32 [[TMP36]] to float
; SHADERTEST-NEXT:    [[TMP38:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP35]], i32 68, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP39:%.*]] = bitcast i32 [[TMP38]] to float
; SHADERTEST-NEXT:    [[TMP40:%.*]] = fsub float [[TMP37]], [[TMP39]]
; SHADERTEST-NEXT:    [[TMP41:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP40]])
; SHADERTEST-NEXT:    [[TMP42:%.*]] = insertelement <3 x float> poison, float [[TMP41]], i64 0
; SHADERTEST-NEXT:    [[TMP43:%.*]] = extractelement <3 x float> [[INTERPPULLMODE]], i64 1
; SHADERTEST-NEXT:    [[TMP44:%.*]] = bitcast float [[TMP43]] to i32
; SHADERTEST-NEXT:    [[TMP45:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP44]], i32 238, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP46:%.*]] = bitcast i32 [[TMP45]] to float
; SHADERTEST-NEXT:    [[TMP47:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP44]], i32 68, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP48:%.*]] = bitcast i32 [[TMP47]] to float
; SHADERTEST-NEXT:    [[TMP49:%.*]] = fsub float [[TMP46]], [[TMP48]]
; SHADERTEST-NEXT:    [[TMP50:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP49]])
; SHADERTEST-NEXT:    [[TMP51:%.*]] = insertelement <3 x float> [[TMP42]], float [[TMP50]], i64 1
; SHADERTEST-NEXT:    [[TMP52:%.*]] = extractelement <3 x float> [[INTERPPULLMODE]], i64 2
; SHADERTEST-NEXT:    [[TMP53:%.*]] = bitcast float [[TMP52]] to i32
; SHADERTEST-NEXT:    [[TMP54:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP53]], i32 238, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP55:%.*]] = bitcast i32 [[TMP54]] to float
; SHADERTEST-NEXT:    [[TMP56:%.*]] = call i32 @llvm.amdgcn.mov.dpp.i32(i32 [[TMP53]], i32 68, i32 15, i32 15, i1 true)
; SHADERTEST-NEXT:    [[TMP57:%.*]] = bitcast i32 [[TMP56]] to float
; SHADERTEST-NEXT:    [[TMP58:%.*]] = fsub float [[TMP55]], [[TMP57]]
; SHADERTEST-NEXT:    [[TMP59:%.*]] = call float @llvm.amdgcn.wqm.f32(float [[TMP58]])
; SHADERTEST-NEXT:    [[TMP60:%.*]] = insertelement <3 x float> [[TMP51]], float [[TMP59]], i64 2
; SHADERTEST-NEXT:    [[TMP61:%.*]] = fmul <3 x float> [[TMP33]], [[DOTSPLAT]]
; SHADERTEST-NEXT:    [[TMP62:%.*]] = fadd <3 x float> [[INTERPPULLMODE]], [[TMP61]]
; SHADERTEST-NEXT:    [[TMP63:%.*]] = fmul <3 x float> [[TMP60]], [[DOTSPLAT2]]
; SHADERTEST-NEXT:    [[TMP64:%.*]] = fadd <3 x float> [[TMP62]], [[TMP63]]
; SHADERTEST-NEXT:    [[TMP65:%.*]] = shufflevector <3 x float> [[TMP64]], <3 x float> [[TMP64]], <2 x i32> <i32 0, i32 1>
; SHADERTEST-NEXT:    [[TMP66:%.*]] = extractelement <3 x float> [[TMP64]], i64 2
; SHADERTEST-NEXT:    [[TMP67:%.*]] = fdiv float 1.000000e+00, [[TMP66]]
; SHADERTEST-NEXT:    [[DOTSPLATINSERT3:%.*]] = insertelement <2 x float> poison, float [[TMP67]], i64 0
; SHADERTEST-NEXT:    [[DOTSPLAT4:%.*]] = shufflevector <2 x float> [[DOTSPLATINSERT3]], <2 x float> poison, <2 x i32> zeroinitializer
; SHADERTEST-NEXT:    [[TMP68:%.*]] = fmul <2 x float> [[TMP65]], [[DOTSPLAT4]]
; SHADERTEST-NEXT:    [[TMP69:%.*]] = call float (...) @lgc.input.import.interpolated__f32(i1 false, i32 0, i32 0, i32 0, i32 poison, i32 0, <2 x float> [[TMP68]])
; SHADERTEST-NEXT:    [[TMP70:%.*]] = insertelement <2 x float> poison, float [[TMP69]], i64 0
; SHADERTEST-NEXT:    [[TMP71:%.*]] = call float (...) @lgc.input.import.interpolated__f32(i1 false, i32 0, i32 0, i32 1, i32 poison, i32 0, <2 x float> [[TMP68]])
; SHADERTEST-NEXT:    [[TMP72:%.*]] = insertelement <2 x float> [[TMP70]], float [[TMP71]], i64 1
; SHADERTEST-NEXT:    [[TMP73:%.*]] = fsub reassoc nnan nsz arcp contract afn <2 x float> [[TMP72]], [[TMP3]]
; SHADERTEST-NEXT:    [[TMP74:%.*]] = call reassoc nnan nsz arcp contract afn <2 x float> @llvm.fabs.v2f32(<2 x float> [[TMP73]])
; SHADERTEST-NEXT:    [[TMP75:%.*]] = extractelement <2 x float> [[TMP74]], i64 0
; SHADERTEST-NEXT:    [[TMP76:%.*]] = fcmp olt float [[TMP75]], 1.562500e-01
; SHADERTEST-NEXT:    [[TMP77:%.*]] = extractelement <2 x float> [[TMP74]], i64 1
; SHADERTEST-NEXT:    [[TMP78:%.*]] = fcmp olt float [[TMP77]], 1.562500e-01
; SHADERTEST-NEXT:    [[TMP79:%.*]] = and i1 [[TMP76]], [[TMP78]]
; SHADERTEST-NEXT:    [[COND_FREEZE:%.*]] = freeze i1 [[TMP79]]
; SHADERTEST-NEXT:    [[DOT:%.*]] = select i1 [[COND_FREEZE]], <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>
; SHADERTEST-NEXT:    [[TMP80:%.*]] = extractelement <4 x float> [[DOT]], i64 0
; SHADERTEST-NEXT:    [[TMP81:%.*]] = extractelement <4 x float> [[DOT]], i64 1
; SHADERTEST-NEXT:    [[TMP82:%.*]] = extractelement <4 x float> [[DOT]], i64 2
; SHADERTEST-NEXT:    [[TMP83:%.*]] = extractelement <4 x float> [[DOT]], i64 3
; SHADERTEST-NEXT:    [[TMP84:%.*]] = insertelement <4 x float> poison, float [[TMP80]], i64 0
; SHADERTEST-NEXT:    [[TMP85:%.*]] = insertelement <4 x float> [[TMP84]], float [[TMP81]], i64 1
; SHADERTEST-NEXT:    [[TMP86:%.*]] = insertelement <4 x float> [[TMP85]], float [[TMP82]], i64 2
; SHADERTEST-NEXT:    [[TMP87:%.*]] = insertelement <4 x float> [[TMP86]], float [[TMP83]], i64 3
; SHADERTEST-NEXT:    [[TMP88:%.*]] = extractelement <4 x float> [[TMP87]], i32 0
; SHADERTEST-NEXT:    [[TMP89:%.*]] = extractelement <4 x float> [[TMP87]], i32 1
; SHADERTEST-NEXT:    [[TMP90:%.*]] = extractelement <4 x float> [[TMP87]], i32 2
; SHADERTEST-NEXT:    [[TMP91:%.*]] = extractelement <4 x float> [[TMP87]], i32 3
; SHADERTEST-NEXT:    [[TMP92:%.*]] = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float [[TMP88]], float [[TMP89]])
; SHADERTEST-NEXT:    [[TMP93:%.*]] = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float [[TMP90]], float [[TMP91]])
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.compr.v2f16(i32 immarg 0, i32 immarg 15, <2 x half> [[TMP92]], <2 x half> [[TMP93]], i1 immarg true, i1 immarg true) #[[ATTR10:[0-9]+]]
; SHADERTEST-NEXT:    ret void
;
