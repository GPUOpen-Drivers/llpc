
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
; RUN: amdllpc -v -gfxip 11.0 %s | FileCheck -check-prefix=CHECK %s

[Version]
version = 72

[FsGlsl]
#version 450

layout(location = 0) out vec4 outColor[4];

void main() {
  outColor[0] = vec4(1.0, 0.0, 1.0, 1.0);
  outColor[3] = vec4(1.0, 0.0, 1.0, 1.0);
}

[FsInfo]
entryPoint = main

[GraphicsPipelineState]
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[1].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[1].channelWriteMask = 15
colorBuffer[1].blendEnable = 0
colorBuffer[2].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[2].channelWriteMask = 15
colorBuffer[2].blendEnable = 0
colorBuffer[3].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[3].channelWriteMask = 15
colorBuffer[3].blendEnable = 0
enableColorExportShader = 1
; CHECK-LABEL: @lgc.shader.FS.main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> <float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 1, i32 0, <4 x float> poison) #[[ATTR1]]
; CHECK-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 2, i32 0, <4 x float> poison) #[[ATTR1]]
; CHECK-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 3, i32 0, <4 x float> <float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>) #[[ATTR1]]
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @_amdgpu_ps_main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = lshr i32 [[COMPOSITEDATA:%.*]], 7
; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = and i64 [[TMP0]], -4294967296
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[COLOREXPADDR:%.*]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = or disjoint i64 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr addrspace(4)
; CHECK-NEXT:    call amdgpu_gfx addrspace(4) void [[TMP6]](<4 x float> <float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 inreg [[TMP2]]) #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: @color_export_shader(
; CHECK-NEXT:    [[TMP4:%.*]] = extractelement <4 x float> [[TMP0:%.*]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[TMP0]], i64 1
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <4 x float> [[TMP0]], i64 2
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <4 x float> [[TMP0]], i64 3
; CHECK-NEXT:    call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float [[TMP4]], float [[TMP5]], float [[TMP6]], float [[TMP7]], i1 false, i1 true)
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <4 x float> [[TMP1:%.*]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <4 x float> [[TMP1]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = extractelement <4 x float> [[TMP1]], i64 2
; CHECK-NEXT:    [[TMP11:%.*]] = extractelement <4 x float> [[TMP1]], i64 3
; CHECK-NEXT:    call void @llvm.amdgcn.exp.f32(i32 1, i32 15, float [[TMP8]], float [[TMP9]], float [[TMP10]], float [[TMP11]], i1 true, i1 true)
; CHECK-NEXT:    call void @llvm.amdgcn.endpgm()
; CHECK-NEXT:    unreachable
;
