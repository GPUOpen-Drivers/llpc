// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/
// RUN: amdllpc -gfxip 11.0 -filetype=asm -o - %s | FileCheck -check-prefix=GFX11 %s

#version 450
#extension GL_KHR_shader_subgroup_ballot: enable

layout(local_size_x = 32) in;

layout(push_constant) uniform constants {
    uint lane;
};

layout(set = 0, binding = 0, std430) buffer InBuffer {
    int a[32];
} inbuf;

layout(set = 0, binding = 1, std430) buffer OutBuffer {
    int b[32];
} outbuf;

void main() {
    uint id = gl_SubgroupInvocationID;
    int x = inbuf.a[id];
    x = subgroupBroadcast(x, 10);
    outbuf.b[id] = x;
}
// GFX11-LABEL: amdgpu_cs_main:
// GFX11:         s_getpc_b64 s[2:3]
// GFX11-NEXT:    s_mov_b32 s0, s1
// GFX11-NEXT:    s_mov_b32 s1, s3
// GFX11-NEXT:    v_mbcnt_lo_u32_b32 v0, -1, 0
// GFX11-NEXT:    s_load_b256 s[0:7], s[0:1], 0x0
// GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
// GFX11-NEXT:    v_mbcnt_hi_u32_b32 v0, -1, v0
// GFX11-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
// GFX11-NEXT:    s_waitcnt lgkmcnt(0)
// GFX11-NEXT:    buffer_load_b32 v1, v0, s[0:3], 0 offen
// GFX11-NEXT:    s_waitcnt vmcnt(0)
// GFX11-NEXT:    v_readlane_b32 s0, v1, 10
// GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
// GFX11-NEXT:    v_mov_b32_e32 v1, s0
// GFX11-NEXT:    buffer_store_b32 v1, v0, s[4:7], 0 offen
// GFX11-NEXT:    s_endpgm
