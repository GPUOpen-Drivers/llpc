; Test workgroup memory explicit layout. Workgroup variables can be declared in blocks, and then use the same
; explicit layout decorations (e.g. Offset, ArrayStride) as other storage classes; All the Workgroup blocks share
; the same underlying storage and either all or none of the variables must be explicitly laid out.

; BEGIN_SHADERTEST
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; REQUIRES: do-not-run-me
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST: @[[LDS0:[^ ]*]] = addrspace(3) global <{ [8 x i32] }> poison, align 4
; SHADERTEST: @[[LDS1:[^ ]*]] = addrspace(3) global <{ [4 x i32] }> poison, align 4
; SHADERTEST: @[[LDS2:[^ ]*]] = addrspace(3) global <{ [16 x i8], [4 x i32] }> poison, align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) @[[LDS1]], align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}([4 x i32], ptr addrspace(3) @[[LDS1]], i32 0, i32 1), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}([4 x i32], ptr addrspace(3) @[[LDS1]], i32 0, i32 2), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}([4 x i32], ptr addrspace(3) @[[LDS1]], i32 0, i32 3), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(<{ [16 x i8], [4 x i32] }>, ptr addrspace(3) @[[LDS2]], i32 0, i32 1), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(<{ [16 x i8], [4 x i32] }>, ptr addrspace(3) @[[LDS2]], i32 0, i32 1, i32 1), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(<{ [16 x i8], [4 x i32] }>, ptr addrspace(3) @[[LDS2]], i32 0, i32 1, i32 2), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(<{ [16 x i8], [4 x i32] }>, ptr addrspace(3) @[[LDS2]], i32 0, i32 1, i32 3), align 4
; SHADERTEST: load i32, ptr addrspace(3) @[[LDS0]], align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 1), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 2), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 3), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 4), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 5), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 6), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}([8 x i32], ptr addrspace(3) @[[LDS0]], i32 0, i32 7), align 4

; SHADERTEST-LABEL: {{^// LLPC}} SPIR-V lowering results
; SHADERTEST: @[[LDS:[^ ]*]] = local_unnamed_addr addrspace(3) global <{ [8 x i32] }> poison, align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) @[[LDS]], align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 4), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 8), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 12), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 16), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 20), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 24), align 4
; SHADERTEST: store i32 %{{[0-9]*}}, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 28), align 4
; SHADERTEST: load i32, ptr addrspace(3) @[[LDS]], align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 4), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 8), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 12), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 16), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 20), align 4
; SHADERTEST: load i32, ptr addrspace(3) getelementptr {{.*}}(i8, ptr addrspace(3) @[[LDS]], i32 24), align 4
; index = 7 is optimized.

; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST

; SPIR-V
; Version: 1.4
; Generator: Khronos SPIR-V Tools Assembler; 0
; Bound: 31
; Schema: 0
               OpCapability Shader
               OpCapability WorkgroupMemoryExplicitLayoutKHR
               OpExtension "SPV_KHR_workgroup_memory_explicit_layout"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %1 "main" %2 %3 %4 %5 %6 %7
               OpExecutionMode %1 LocalSize 1 1 1
               OpDecorate %_struct_8 Block
               OpDecorate %_struct_9 Block
               OpDecorate %_struct_10 Block
               OpMemberDecorate %_struct_8 0 Offset 0
               OpDecorate %_arr_uint_uint_32 ArrayStride 4
               OpMemberDecorate %_struct_9 0 Offset 0
               OpMemberDecorate %_struct_10 0 Offset 16
               OpDecorate %_arr_uint_uint_16 ArrayStride 4
               OpDecorate %2 DescriptorSet 0
               OpDecorate %2 Binding 0
               OpDecorate %3 DescriptorSet 0
               OpDecorate %3 Binding 1
               OpDecorate %4 DescriptorSet 0
               OpDecorate %4 Binding 2
               OpDecorate %5 Aliased
               OpDecorate %6 Aliased
               OpDecorate %7 Aliased
       %uint = OpTypeInt 32 0
     %uint_0 = OpConstant %uint 0
     %uint_4 = OpConstant %uint 4
     %uint_8 = OpConstant %uint 8
       %void = OpTypeVoid
         %19 = OpTypeFunction %void
%_arr_uint_uint_32 = OpTypeArray %uint %uint_8
%_arr_uint_uint_16 = OpTypeArray %uint %uint_4
%_ptr_Workgroup__arr_uint_uint_16 = OpTypePointer Workgroup %_arr_uint_uint_16
%_ptr_StorageBuffer__arr_uint_uint_16 = OpTypePointer StorageBuffer %_arr_uint_uint_16
  %_struct_8 = OpTypeStruct %_arr_uint_uint_32
  %_struct_9 = OpTypeStruct %_arr_uint_uint_16
 %_struct_10 = OpTypeStruct %_arr_uint_uint_16
%_ptr_StorageBuffer__struct_9 = OpTypePointer StorageBuffer %_struct_9
%_ptr_StorageBuffer__struct_9_0 = OpTypePointer StorageBuffer %_struct_9
%_ptr_StorageBuffer__struct_8 = OpTypePointer StorageBuffer %_struct_8
%_ptr_Workgroup__struct_8 = OpTypePointer Workgroup %_struct_8
%_ptr_Workgroup__struct_9 = OpTypePointer Workgroup %_struct_9
%_ptr_Workgroup__struct_10 = OpTypePointer Workgroup %_struct_10
          %5 = OpVariable %_ptr_Workgroup__struct_8 Workgroup
          %6 = OpVariable %_ptr_Workgroup__struct_9 Workgroup
          %7 = OpVariable %_ptr_Workgroup__struct_10 Workgroup
          %2 = OpVariable %_ptr_StorageBuffer__struct_9 StorageBuffer
          %3 = OpVariable %_ptr_StorageBuffer__struct_9_0 StorageBuffer
          %4 = OpVariable %_ptr_StorageBuffer__struct_8 StorageBuffer
          %1 = OpFunction %void None %19
         %28 = OpLabel
               OpCopyMemory %6 %2
         %29 = OpAccessChain %_ptr_Workgroup__arr_uint_uint_16 %7 %uint_0
         %30 = OpAccessChain %_ptr_StorageBuffer__arr_uint_uint_16 %3 %uint_0
               OpCopyMemory %29 %30
               OpCopyMemory %4 %5
               OpReturn
               OpFunctionEnd
