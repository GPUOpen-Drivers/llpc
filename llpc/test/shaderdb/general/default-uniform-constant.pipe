; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
; RUN: amdllpc -v -gfxip 10.1 %s | FileCheck -check-prefixes=CHECK %s
; REQUIRES: do-not-run-me

[Version]
version = 61

[ResourceMapping]
userDataNode[0].visibility = 128
userDataNode[0].type = DescriptorConstBuffer
userDataNode[0].offsetInDwords = 3
userDataNode[0].sizeInDwords = 4
userDataNode[0].set = 0xFFFFFFFF
userDataNode[0].binding = 1
userDataNode[1].visibility = 128
userDataNode[1].type = DescriptorTableVaPtr
userDataNode[1].offsetInDwords = 7
userDataNode[1].sizeInDwords = 1
userDataNode[1].next[0].type = DescriptorBuffer
userDataNode[1].next[0].offsetInDwords = 0
userDataNode[1].next[0].sizeInDwords = 4
userDataNode[1].next[0].set = 0x00000000
userDataNode[1].next[0].binding = 0

[ComputePipelineState]
options.resourceLayoutScheme = Compact

[UniformConstant]
uniformConstantMaps[0].visibility = 128
uniformConstantMaps[0].uniformConstants[0].location = 0
uniformConstantMaps[0].uniformConstants[0].offset = 0
uniformConstantMaps[0].uniformConstants[1].location = 2
uniformConstantMaps[0].uniformConstants[1].offset = 16
uniformConstantMaps[0].uniformConstants[2].location = 6
uniformConstantMaps[0].uniformConstants[2].offset = 80

; This is translated from glsl:
;#version 450 core
;
;layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
;
;uniform struct {
;  vec3 f3;
;  float f;
;} a;
;
;uniform vec3 b[2][2];
;
;uniform mat3 c;
;
;buffer Buffer {
;  float o[];
;} x;
;
;void main() {
; x.o[0] = a.f3.z;
; x.o[1] = a.f;
; x.o[2] = b[1][1].x;
; x.o[3] = c[1][1];
;}

[CsSpirv]
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %Buffer "Buffer"
               OpMemberName %Buffer 0 "o"
               OpName %x "x"
               OpName %_ ""
               OpMemberName %_ 0 "f3"
               OpMemberName %_ 1 "f"
               OpName %a "a"
               OpName %b "b"
               OpName %c "c"
               OpDecorate %_runtimearr_float ArrayStride 4
               OpMemberDecorate %Buffer 0 Offset 0
               OpDecorate %Buffer BufferBlock
               OpDecorate %x DescriptorSet 0
               OpDecorate %x Binding 0
               OpDecorate %a Location 0
               OpDecorate %a DescriptorSet 0
               OpDecorate %b Location 2
               OpDecorate %b DescriptorSet 0
               OpDecorate %c Location 6
               OpDecorate %c DescriptorSet 0
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
%_runtimearr_float = OpTypeRuntimeArray %float
     %Buffer = OpTypeStruct %_runtimearr_float
%_ptr_Uniform_Buffer = OpTypePointer Uniform %Buffer
          %x = OpVariable %_ptr_Uniform_Buffer Uniform
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
    %v3float = OpTypeVector %float 3
          %_ = OpTypeStruct %v3float %float
%_ptr_UniformConstant__ = OpTypePointer UniformConstant %_
          %a = OpVariable %_ptr_UniformConstant__ UniformConstant
       %uint = OpTypeInt 32 0
     %uint_2 = OpConstant %uint 2
%_ptr_UniformConstant_float = OpTypePointer UniformConstant %float
%_ptr_Uniform_float = OpTypePointer Uniform %float
      %int_1 = OpConstant %int 1
      %int_2 = OpConstant %int 2
%_arr_v3float_uint_2 = OpTypeArray %v3float %uint_2
%_arr__arr_v3float_uint_2_uint_2 = OpTypeArray %_arr_v3float_uint_2 %uint_2
%_ptr_UniformConstant__arr__arr_v3float_uint_2_uint_2 = OpTypePointer UniformConstant %_arr__arr_v3float_uint_2_uint_2
          %b = OpVariable %_ptr_UniformConstant__arr__arr_v3float_uint_2_uint_2 UniformConstant
     %uint_0 = OpConstant %uint 0
      %int_3 = OpConstant %int 3
%mat3v3float = OpTypeMatrix %v3float 3
%_ptr_UniformConstant_mat3v3float = OpTypePointer UniformConstant %mat3v3float
          %c = OpVariable %_ptr_UniformConstant_mat3v3float UniformConstant
     %uint_1 = OpConstant %uint 1
     %v3uint = OpTypeVector %uint 3
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_1 %uint_1 %uint_1
       %main = OpFunction %void None %3
          %5 = OpLabel
         %20 = OpAccessChain %_ptr_UniformConstant_float %a %int_0 %uint_2
         %21 = OpLoad %float %20
         %23 = OpAccessChain %_ptr_Uniform_float %x %int_0 %int_0
               OpStore %23 %21
         %25 = OpAccessChain %_ptr_UniformConstant_float %a %int_1
         %26 = OpLoad %float %25
         %27 = OpAccessChain %_ptr_Uniform_float %x %int_0 %int_1
               OpStore %27 %26
         %34 = OpAccessChain %_ptr_UniformConstant_float %b %int_1 %int_1 %uint_0
         %35 = OpLoad %float %34
         %36 = OpAccessChain %_ptr_Uniform_float %x %int_0 %int_2
               OpStore %36 %35
         %42 = OpAccessChain %_ptr_UniformConstant_float %c %int_1 %uint_1
         %43 = OpLoad %float %42
         %44 = OpAccessChain %_ptr_Uniform_float %x %int_0 %int_3
               OpStore %44 %43
               OpReturn
               OpFunctionEnd


[CsInfo]
entryPoint = main
options.waveSize = 32

; CHECK-LABEL: @lgc.shader.CS.main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <4 x i32> @lgc.root.descriptor.v4i32(i32 3) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr addrspace(4) @lgc.descriptor.table.addr(i32 6, i32 6, i32 0, i32 0, i32 -1) #[[ATTR1]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP2]], i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP3]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds <{ [3 x float], float }>, ptr addrspace(7) [[TMP1]], i64 0, i32 0, i64 2
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr addrspace(7) [[TMP6]], align 4
; CHECK-NEXT:    store float [[TMP7]], ptr addrspace(7) [[TMP5]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds <{ [3 x float], float }>, ptr addrspace(7) [[TMP1]], i64 0, i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr addrspace(7) [[TMP8]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds <{ [4294967295 x float] }>, ptr addrspace(7) [[TMP5]], i64 0, i32 0, i64 1
; CHECK-NEXT:    store float [[TMP9]], ptr addrspace(7) [[TMP10]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP1]], i64 64
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr addrspace(7) [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds <{ [4294967295 x float] }>, ptr addrspace(7) [[TMP5]], i64 0, i32 0, i64 2
; CHECK-NEXT:    store float [[TMP12]], ptr addrspace(7) [[TMP13]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP1]], i64 100
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr addrspace(7) [[TMP14]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds <{ [4294967295 x float] }>, ptr addrspace(7) [[TMP5]], i64 0, i32 0, i64 3
; CHECK-NEXT:    store float [[TMP15]], ptr addrspace(7) [[TMP16]], align 4
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @_amdgpu_cs_main(
; CHECK-NEXT:  .entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -4294967296
; CHECK-NEXT:    [[TMP2:%.*]] = zext i32 [[DESCTABLE1:%.*]] to i64
; CHECK-NEXT:    [[TMP3:%.*]] = or i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.raw.buffer.load.i32(<4 x i32> [[ROOTDESC3:%.*]], i32 8, i32 0, i32 0)
; CHECK-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32(i32 [[TMP6]], <4 x i32> [[TMP5]], i32 0, i32 0, i32 0)
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.raw.buffer.load.i32(<4 x i32> [[ROOTDESC3]], i32 12, i32 0, i32 0)
; CHECK-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32(i32 [[TMP7]], <4 x i32> [[TMP5]], i32 4, i32 0, i32 0)
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @llvm.amdgcn.raw.buffer.load.i32(<4 x i32> [[ROOTDESC3]], i32 64, i32 0, i32 0)
; CHECK-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32(i32 [[TMP8]], <4 x i32> [[TMP5]], i32 8, i32 0, i32 0)
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.raw.buffer.load.i32(<4 x i32> [[ROOTDESC3]], i32 100, i32 0, i32 0)
; CHECK-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32(i32 [[TMP9]], <4 x i32> [[TMP5]], i32 12, i32 0, i32 0)
; CHECK-NEXT:    ret void
;
