// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --version 5
/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

// RUN: amdllpc -o - -gfxip 11.0 -emit-lgc %s | FileCheck -check-prefixes=CHECK %s

// Test that the stride of cooperative matrix load/store operations is handled
// correctly when the array element type is not the same as the matrix element
// type.
#version 450 core
#pragma use_vulkan_memory_model
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_KHR_cooperative_matrix : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float32: enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16: enable

layout(set=0, binding=0, std430) buffer Input { uvec4 x[]; } bufIn;
layout(set=0, binding=1, std430) buffer Output { uvec4 x[]; } bufOut;

void main() {
  coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseA> matrix;
  coopMatLoad(matrix, bufIn.x, 0, 4, 0);
  coopMatStore(matrix, bufOut.x, 0, 4, 0);
}

// CHECK-LABEL: define dllexport spir_func void @lgc.shader.CS.main(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !spirv.ExecutionModel [[META10:![0-9]+]] !lgc.shaderstage [[META11:![0-9]+]] {
// CHECK-NEXT:  [[_ENTRY:.*:]]
// CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 1, i32 0, i32 2)
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 2)
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP1]])
// CHECK-NEXT:    [[TMP3:%.*]] = call ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7) [[TMP1]], i32 16, i32 0)
// CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.xdl.cooperative.matrix.load__v8f32(ptr addrspace(7) [[TMP3]], i32 64, i1 true, i32 1, i32 0, i32 0, i32 16, i32 16)
// CHECK-NEXT:    [[TMP4:%.*]] = call ptr addrspace(7) @lgc.buffer.index(ptr addrspace(7) [[TMP0]], i32 16, i32 0)
// CHECK-NEXT:    call void (...) @lgc.xdl.cooperative.matrix.store(ptr addrspace(7) [[TMP4]], i32 64, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[LOAD]], i32 16)
// CHECK-NEXT:    ret void
//
//.
// CHECK: [[META10]] = !{i32 5}
// CHECK: [[META11]] = !{i32 7}
//.
