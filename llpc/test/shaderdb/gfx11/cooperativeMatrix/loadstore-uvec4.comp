// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
// RUN: amdllpc -o - -gfxip 11.0 -emit-lgc %s | FileCheck -check-prefixes=CHECK %s

// Test that the stride of cooperative matrix load/store operations is handled
// correctly when the array element type is not the same as the matrix element
// type.
#version 450 core
#pragma use_vulkan_memory_model
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_KHR_cooperative_matrix : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float32: enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16: enable

layout(set=0, binding=0, std430) buffer Input { uvec4 x[]; } bufIn;
layout(set=0, binding=1, std430) buffer Output { uvec4 x[]; } bufOut;

void main() {
  coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseA> matrix;
  coopMatLoad(matrix, bufIn.x, 0, 4, 0);
  coopMatStore(matrix, bufOut.x, 0, 4, 0);
}

// CHECK-LABEL: @lgc.shader.CS.main(
// CHECK-NEXT:  .entry:
// CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 1, i32 0, i32 2)
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 2)
// CHECK-NEXT:    [[LOAD:%.*]] = call <8 x float> (...) @lgc.cooperative.matrix.load__v8f32(ptr addrspace(7) [[TMP1]], i32 64, i1 true, i32 1, i32 0, i32 0, i32 16)
// CHECK-NEXT:    call void (...) @lgc.cooperative.matrix.store(ptr addrspace(7) [[TMP0]], i32 64, i1 true, i32 1, i32 0, i32 0, i32 16, <8 x float> [[LOAD]])
// CHECK-NEXT:    ret void
//
