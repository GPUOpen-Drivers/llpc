;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Check that padBufferSizeToNextDword is set correctly by llpc and it enables the conversion to s_buffer_load_u16
; This is only possible on GFX12 if the buffer size is padded, which we do in the Vulkan driver

; BEGIN_SHADERTEST
; RUN: amdllpc -v -gfxip=12.0.1 %s --emit-llvm | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} LGC lowering results
; SHADERTEST: call i16 @llvm.amdgcn.s.buffer.load.i16(<4 x i32> [[desc:%[0-9]+]], i32 0, i32 0), !invariant.load !{{[0-9]+}}
; SHADERTEST: call i16 @llvm.amdgcn.s.buffer.load.i16(<4 x i32> [[desc]], i32 2, i32 0), !invariant.load !{{[0-9]+}}
; SHADERTEST: call i16 @llvm.amdgcn.s.buffer.load.i16(<4 x i32> [[desc]], i32 4, i32 0), !invariant.load !{{[0-9]+}}
; REQUIRES: do-not-run-me

[CsGlsl]
#version 450
#extension GL_EXT_shader_explicit_arithmetic_types: require

layout(local_size_x = 1) in;

struct Inputs
{
	float16_t in0;
	float16_t in1;
	float16_t in2;
};

layout(set = 0, binding = 0, std430) buffer InBuffer
{
    Inputs inputs[];
};
layout(set = 0, binding = 1, std430) buffer OutBuffer
{
    Inputs outputs[];
};

void main (void)
{
	float16_t in0 = float16_t(inputs[0].in0);
	float16_t in1 = float16_t(inputs[0].in1);
	float16_t in2 = float16_t(inputs[0].in2);


	outputs[0].in0 = in0;
	outputs[0].in1 = in1;
	outputs[0].in2 = in2;
}

[CsInfo]
entryPoint = main
userDataNode[0].visibility = 128
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 1
userDataNode[0].sizeInDwords = 1
userDataNode[0].next[0].type = DescriptorBuffer
userDataNode[0].next[0].offsetInDwords = 0
userDataNode[0].next[0].sizeInDwords = 4
userDataNode[0].next[0].set = 0x00000000
userDataNode[0].next[0].binding = 0
userDataNode[0].next[0].strideInDwords = 0
userDataNode[0].next[1].type = DescriptorBuffer
userDataNode[0].next[1].offsetInDwords = 4
userDataNode[0].next[1].sizeInDwords = 4
userDataNode[0].next[1].set = 0x00000000
userDataNode[0].next[1].binding = 1
userDataNode[0].next[1].strideInDwords = 0

[ComputePipelineState]
options.padBufferSizeToNextDword = 1
