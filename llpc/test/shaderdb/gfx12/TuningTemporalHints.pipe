;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --function amdgpu_gs_main
; RUN: amdllpc -gfxip 12.0.1 -filetype=asm -o - %s | FileCheck -check-prefix=CHECK %s
; Test tuning temporal hints:
; options.temporalHintControl=0xb represents that ATM temporal hint is TH_STORE_RT_WB.
[Version]
version = 72

[VsGlsl]
#version 450

layout(location = 0) in vec4 inPos;
layout(location = 1) in vec4 inColor;
layout(location = 0) out vec4 oColor;

void main() {
  gl_Position = inPos;
  oColor = inColor;
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 450

layout(location = 0) in vec4 oColor;
layout(location = 0) out vec4 outColor;

void main() {
  outColor = oColor;
}

[FsInfo]
entryPoint = main

[GraphicsPipelineState]
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
options.temporalHintControl = 0xb

[VertexInputState]
binding[0].binding = 0
binding[0].stride = 32
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 1
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[1].offset = 16

; CHECK-LABEL: amdgpu_gs_main:
; CHECK:         s_mov_b64 exec, -1
; CHECK-NEXT:    v_mbcnt_lo_u32_b32 v1, -1, 0
; CHECK-NEXT:    s_lshr_b32 s0, s3, 18
; CHECK-NEXT:    s_bfe_u32 s3, s2, 0x9000c
; CHECK-NEXT:    s_and_b32 s0, s0, 0x3c0
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mbcnt_hi_u32_b32 v1, -1, v1
; CHECK-NEXT:    v_add_nc_u32_e32 v9, s0, v1
; CHECK-NEXT:    s_mov_b64 s[0:1], exec
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; CHECK-NEXT:    v_cmpx_gt_u32_e64 s3, v9
; CHECK-NEXT:    s_cbranch_execz .LBB0_2
; CHECK-NEXT:    s_getpc_b64 s[12:13]
; CHECK-NEXT:    s_mov_b32 s6, s9
; CHECK-NEXT:    s_sext_i32_i16 s13, s13
; CHECK-NEXT:    v_add_nc_u32_e32 v5, s10, v3
; CHECK-NEXT:    s_mov_b32 s7, s13
; CHECK-NEXT:    s_load_b128 s[12:15], s[6:7], 0x0
; CHECK-NEXT:    s_wait_kmcnt 0x0
; CHECK-NEXT:    s_clause 0x1
; CHECK-NEXT:    tbuffer_load_format_xyzw v[1:4], v5, s[12:15], null format:[BUF_FMT_32_32_32_32_FLOAT] idxen
; CHECK-NEXT:    tbuffer_load_format_xyzw v[5:8], v5, s[12:15], null format:[BUF_FMT_32_32_32_32_FLOAT] idxen offset:16
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_or_b64 exec, exec, s[0:1]
; CHECK-NEXT:    s_bfe_u32 s0, s2, 0x90016
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    v_cmp_gt_u32_e32 vcc, s0, v9
; CHECK-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; CHECK-NEXT:    s_cbranch_execz .LBB0_4
; CHECK-NEXT:    export prim v0, off, off, off done
; CHECK-NEXT:  .LBB0_4:
; CHECK-NEXT:    s_wait_expcnt 0x0
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_or_b64 exec, exec, s[0:1]
; CHECK-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; CHECK-NEXT:    s_mov_b64 s[0:1], exec
; CHECK-NEXT:    v_cmpx_gt_u32_e64 s3, v9
; CHECK-NEXT:    s_cbranch_execz .LBB0_6
; CHECK-NEXT:    s_getpc_b64 s[0:1]
; CHECK-NEXT:    s_lshl_b32 s4, s5, 9
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_sext_i32_i16 s1, s1
; CHECK-NEXT:    s_and_b32 s4, s4, 0xfffe00
; CHECK-NEXT:    s_wait_alu 0xfffe
; CHECK-NEXT:    s_mov_b32 s9, s1
; CHECK-NEXT:    s_load_b128 s[0:3], s[8:9], 0xb0
; CHECK-NEXT:    s_wait_loadcnt 0x1
; CHECK-NEXT:    export pos0 v1, v2, v3, v4 done
; CHECK-NEXT:    s_wait_loadcnt 0x0
; CHECK-NEXT:    s_wait_kmcnt 0x0
; CHECK-NEXT:    buffer_store_b128 v[5:8], v9, s[0:3], s4 idxen th:TH_STORE_RT_WB scope:SCOPE_DEV
; CHECK-NEXT:  .LBB0_6:
; CHECK-NEXT:    s_endpgm
