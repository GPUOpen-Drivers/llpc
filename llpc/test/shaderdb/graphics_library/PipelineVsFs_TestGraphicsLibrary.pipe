; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
; RUN: amdllpc -v %s | FileCheck -check-prefix=SHADERTEST %s

[Version]
version = 70

[GraphicsLibrary]
preRaster=PipelineLibVs_TestVsLibrary.pipe
fragment=PipelineLibFs_TestFsLibrary.pipe
colorExport=PipelineLibCes_TestColorExport.pipe


; SHADERTEST-LABEL: @lgc.shader.VS.main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 0)
; SHADERTEST-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
; SHADERTEST-NEXT:    [[TMP2:%.*]] = call <4 x float> @lgc.input.import.generic__v4f32(i1 false, i32 0, i32 0, i32 0, i32 poison)
; SHADERTEST-NEXT:    [[TMP3:%.*]] = call i32 @lgc.special.user.data.BaseVertex(i32 268435459) #[[ATTR3:[0-9]+]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = call i32 @lgc.shader.input.VertexId(i32 17) #[[ATTR3]]
; SHADERTEST-NEXT:    [[VERTEXINDEX:%.*]] = add i32 [[TMP3]], [[TMP4]]
; SHADERTEST-NEXT:    [[DOTFR:%.*]] = freeze i32 [[VERTEXINDEX]]
; SHADERTEST-NEXT:    [[TMP5:%.*]] = icmp slt i32 [[DOTFR]], 3
; SHADERTEST-NEXT:    [[TMP6:%.*]] = getelementptr {{(inbounds )?}}i8, ptr addrspace(7) [[TMP0]], i32 4
; SHADERTEST-NEXT:    [[DOT0_IN:%.*]] = select i1 [[TMP5]], ptr addrspace(7) [[TMP0]], ptr addrspace(7) [[TMP6]]
; SHADERTEST-NEXT:    [[DOT0:%.*]] = load float, ptr addrspace(7) [[DOT0_IN]], align 4
; SHADERTEST-NEXT:    [[TMP7:%.*]] = insertelement <4 x float> [[TMP2]], float 1.000000e+00, i64 3
; SHADERTEST-NEXT:    [[TMP8:%.*]] = insertelement <4 x float> [[TMP7]], float [[DOT0]], i64 2
; SHADERTEST-NEXT:    call void @lgc.output.export.builtin.Position.i32.v4f32(i32 0, <4 x float> [[TMP8]]) #[[ATTR4:[0-9]+]]
; SHADERTEST-NEXT:    ret void
;
;
;
; SHADERTEST-LABEL: @lgc.shader.FS.main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 1, i32 1, i32 0, i32 0)
; SHADERTEST-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
; SHADERTEST-NEXT:    [[FRAGCOORD:%.*]] = call <4 x float> @lgc.input.import.builtin.FragCoord.v4f32.i32(i32 15) #[[ATTR4]]
; SHADERTEST-NEXT:    [[__LLPC_INPUT_PROXY_GL_FRAGCOORD_4_VEC_EXTRACT:%.*]] = extractelement <4 x float> [[FRAGCOORD]], i64 1
; SHADERTEST-NEXT:    [[TMP2:%.*]] = fadd reassoc nnan nsz arcp contract afn float [[__LLPC_INPUT_PROXY_GL_FRAGCOORD_4_VEC_EXTRACT]], -5.000000e-01
; SHADERTEST-NEXT:    [[TMP3:%.*]] = fptosi float [[TMP2]] to i32
; SHADERTEST-NEXT:    [[DOTFR:%.*]] = freeze i32 [[TMP3]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = icmp slt i32 [[DOTFR]], 8
; SHADERTEST-NEXT:    [[TMP5:%.*]] = getelementptr {{(inbounds )?}}i8, ptr addrspace(7) [[TMP0]], i32 16
; SHADERTEST-NEXT:    [[DOT0_IN:%.*]] = select i1 [[TMP4]], ptr addrspace(7) [[TMP0]], ptr addrspace(7) [[TMP5]]
; SHADERTEST-NEXT:    [[DOT0:%.*]] = load <4 x float>, ptr addrspace(7) [[DOT0_IN]], align 16
; SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[DOT0]]) #[[ATTR3]]
; SHADERTEST-NEXT:    ret void
;
;
;
; SHADERTEST-LABEL: @color_export_shader(
; SHADERTEST-NEXT:    [[TMP3:%.*]] = extractelement <4 x float> [[TMP0:%.*]], i64 0
; SHADERTEST-NEXT:    [[TMP4:%.*]] = extractelement <4 x float> [[TMP0]], i64 1
; SHADERTEST-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[TMP0]], i64 2
; SHADERTEST-NEXT:    [[TMP6:%.*]] = extractelement <4 x float> [[TMP0]], i64 3
; SHADERTEST-NEXT:    [[TMP7:%.*]] = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float [[TMP3]], float [[TMP4]])
; SHADERTEST-NEXT:    [[TMP8:%.*]] = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float [[TMP5]], float [[TMP6]])
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.compr.v2f16(i32 immarg 0, i32 immarg 15, <2 x half> [[TMP7]], <2 x half> [[TMP8]], i1 immarg true, i1 immarg true) #[[ATTR2:[0-9]+]]
; SHADERTEST-NEXT:    call void @llvm.amdgcn.endpgm()
; SHADERTEST-NEXT:    unreachable
;
