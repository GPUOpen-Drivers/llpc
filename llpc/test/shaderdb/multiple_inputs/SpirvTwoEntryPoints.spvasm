; This file contains two entry points: one vertex stage and one fragment stage.
; Check that amdllpc can compile them separately and together.

; BEGIN_SHADERTEST_VS
; RUN: amdllpc -v %gfxip %s,main_vs \
; RUN:   | FileCheck --check-prefix=SHADERTEST_VS %s
;
; SHADERTEST_VS-LABEL: {{^//}} LLPC pipeline before-patching results
; SHADERTEST_VS-LABEL: define dllexport spir_func void @lgc.shader.VS.main()
; SHADERTEST_VS-NOT:   define dllexport spir_func void @lgc.shader.FS.main()
; SHADERTEST_VS-LABEL: {{^=====}} AMDLLPC SUCCESS =====
; END_SHADERTEST_VS

; BEGIN_SHADERTEST_FS
; RUN: amdllpc -v %gfxip %s,main_fs \
; RUN:   | FileCheck --check-prefix=SHADERTEST_FS %s
;
; SHADERTEST_FS-LABEL: {{^//}} LLPC pipeline before-patching results
; SHADERTEST_FS-LABEL: define dllexport spir_func void @lgc.shader.FS.main()
; SHADERTEST_FS-NOT:   define dllexport spir_func void @lgc.shader.VS.main()
; SHADERTEST_FS-LABEL: {{^=====}} AMDLLPC SUCCESS =====
; END_SHADERTEST_FS

; BEGIN_SHADERTEST_BOTH_ST_PP0
; RUN: amdllpc -enable-part-pipeline=0 -v %gfxip %s,main_vs %s,main_fs \
; RUN:   | FileCheck --check-prefix=SHADERTEST_BOTH_ST_PP0 %s
;
; SHADERTEST_BOTH_ST_PP0-LABEL: {{^//}} LLPC final pipeline module info
; SHADERTEST_BOTH_ST_PP0:       define dllexport amdgpu_gs void @_amdgpu_gs_main
; SHADERTEST_BOTH_ST_PP0:       define dllexport amdgpu_ps void @_amdgpu_ps_main
; SHADERTEST_BOTH_ST_PP0-LABEL: {{^//}} LLPC final ELF info
; SHADERTEST_BOTH_ST_PP0-LABEL: _amdgpu_gs_main:
; SHADERTEST_BOTH_ST_PP0-LABEL: _amdgpu_ps_main:
; SHADERTEST_BOTH_ST_PP0-LABEL: {{^=====}} AMDLLPC SUCCESS =====
; END_SHADERTEST_BOTH_ST_PP0

; BEGIN_SHADERTEST_BOTH_ST_PP1
; RUN: amdllpc -enable-part-pipeline=1 -v %gfxip %s,main_vs %s,main_fs \
; RUN:   | FileCheck --check-prefix=SHADERTEST_BOTH_ST_PP1 %s
;
; SHADERTEST_BOTH_ST_PP1-LABEL: {{^//}} LLPC final pipeline module info
; SHADERTEST_BOTH_ST_PP1:       define dllexport amdgpu_ps void @_amdgpu_ps_main
; SHADERTEST_BOTH_ST_PP1-LABEL: {{^//}} LLPC final pipeline module info
; SHADERTEST_BOTH_ST_PP1:       define dllexport amdgpu_gs void @_amdgpu_gs_main
; SHADERTEST_BOTH_ST_PP1-LABEL: {{^//}} LLPC final ELF info
; SHADERTEST_BOTH_ST_PP1-LABEL: _amdgpu_gs_main:
; SHADERTEST_BOTH_ST_PP1-LABEL: _amdgpu_ps_main:
; SHADERTEST_BOTH_ST_PP1-LABEL: {{^=====}} AMDLLPC SUCCESS =====
; END_SHADERTEST_BOTH_ST_PP1

; BEGIN_SHADERTEST_BOTH_MT
; This test uses llvm-objdump instead of verbose output, as it is not allowed to mix multi-threaded
; compilation with verbose output.
;
; RUN: amdllpc %gfxip %s,main_vs %s,main_fs --num-threads=2 -o %t.both.elf
; RUN: llvm-objdump --arch=amdgcn --mcpu=gfx1010 -d %t.both.elf \
; RUN:   | FileCheck --check-prefix=SHADERTEST_BOTH_MT %s
;
; SHADERTEST_BOTH_MT-LABEL: <_amdgpu_gs_main>:
; SHADERTEST_BOTH_MT-LABEL: <_amdgpu_ps_main>:
; END_SHADERTEST_BOTH_MT

; SPIR-V
; Version: 1.5
; Generator: Khronos; 17
; Bound: 34
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %main "main_vs" %_ %pos %vertColor
               OpEntryPoint Fragment %main_0 "main_fs" %fragColor
               OpExecutionMode %main_0 OriginUpperLeft
               OpSource GLSL 460
               OpSource GLSL 460
               OpName %main "main"
               OpName %gl_PerVertex "gl_PerVertex"
               OpMemberName %gl_PerVertex 0 "gl_Position"
               OpMemberName %gl_PerVertex 1 "gl_PointSize"
               OpMemberName %gl_PerVertex 2 "gl_ClipDistance"
               OpMemberName %gl_PerVertex 3 "gl_CullDistance"
               OpName %_ ""
               OpName %pos "pos"
               OpName %vertColor "vertColor"
               OpName %main_0 "main"
               OpName %fragColor "fragColor"
               OpModuleProcessed "Linked by SPIR-V Tools Linker"
               OpMemberDecorate %gl_PerVertex 0 BuiltIn Position
               OpMemberDecorate %gl_PerVertex 1 BuiltIn PointSize
               OpMemberDecorate %gl_PerVertex 2 BuiltIn ClipDistance
               OpMemberDecorate %gl_PerVertex 3 BuiltIn CullDistance
               OpDecorate %gl_PerVertex Block
               OpDecorate %pos Location 0
               OpDecorate %vertColor Location 0
               OpDecorate %fragColor Location 0
       %void = OpTypeVoid
         %10 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
       %uint = OpTypeInt 32 0
     %uint_1 = OpConstant %uint 1
%_arr_float_uint_1 = OpTypeArray %float %uint_1
%gl_PerVertex = OpTypeStruct %v4float %float %_arr_float_uint_1 %_arr_float_uint_1
%_ptr_Output_gl_PerVertex = OpTypePointer Output %gl_PerVertex
          %_ = OpVariable %_ptr_Output_gl_PerVertex Output
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
    %v3float = OpTypeVector %float 3
%_ptr_Input_v3float = OpTypePointer Input %v3float
        %pos = OpVariable %_ptr_Input_v3float Input
    %float_0 = OpConstant %float 0
%_ptr_Output_v4float = OpTypePointer Output %v4float
  %vertColor = OpVariable %_ptr_Output_v4float Output
         %23 = OpConstantComposite %v4float %float_0 %float_0 %float_0 %float_0
  %fragColor = OpVariable %_ptr_Output_v4float Output
    %float_1 = OpConstant %float 1
         %25 = OpConstantComposite %v4float %float_1 %float_1 %float_1 %float_1
       %main = OpFunction %void None %10
         %26 = OpLabel
         %27 = OpLoad %v3float %pos
         %28 = OpCompositeExtract %float %27 0
         %29 = OpCompositeExtract %float %27 1
         %30 = OpCompositeExtract %float %27 2
         %31 = OpCompositeConstruct %v4float %28 %29 %30 %float_0
         %32 = OpAccessChain %_ptr_Output_v4float %_ %int_0
               OpStore %32 %31
               OpStore %vertColor %23
               OpReturn
               OpFunctionEnd
     %main_0 = OpFunction %void None %10
         %33 = OpLabel
               OpStore %fragColor %25
               OpReturn
               OpFunctionEnd
