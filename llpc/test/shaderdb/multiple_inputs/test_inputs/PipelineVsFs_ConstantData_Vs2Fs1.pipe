; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --function _amdgpu_ps_main
; Test that constant data in the fragment shader is handled correctly.
; RUN: amdllpc -v -gfxip 10.1.0 -enable-relocatable-shader-elf %s | FileCheck -check-prefix=SHADERTEST %s
; RUN: amdllpc -v -gfxip 10.1.0 -enable-part-pipeline=0 %s | FileCheck -check-prefix=SHADERTEST2_PP0 %s
; RUN: amdllpc -v -gfxip 10.1.0 -enable-part-pipeline=1 %s | FileCheck -check-prefix=SHADERTEST2_PP1 %s

[Version]
version = 40

[VsGlslFile]
fileName = Vs2.vert

[VsInfo]
entryPoint = main

[FsGlslFile]
fileName = Fs1.frag

[FsInfo]
entryPoint = main

[GraphicsPipelineState]
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
; SHADERTEST-LABEL: @_amdgpu_ps_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = lshr i32 [[ANCILLARY:%.*]], 8
; SHADERTEST-NEXT:    [[TMP1:%.*]] = trunc i32 [[TMP0]] to i8
; SHADERTEST-NEXT:    [[DOTLHS_TRUNC:%.*]] = and i8 [[TMP1]], 15
; SHADERTEST-NEXT:    [[TMP2:%.*]] = urem i8 [[DOTLHS_TRUNC]], 3
; SHADERTEST-NEXT:    [[TMP3:%.*]] = zext nneg i8 [[TMP2]] to i64
; SHADERTEST-NEXT:    [[TMP4:%.*]] = getelementptr [3 x <4 x float>], ptr addrspace(4) @__llpc_global_proxy_colors, i64 0, i64 [[TMP3]]
; SHADERTEST-NEXT:    [[TMP5:%.*]] = load <4 x float>, ptr addrspace(4) [[TMP4]], align 16
; SHADERTEST-NEXT:    [[TMP6:%.*]] = insertvalue { <4 x float>, i32 } poison, <4 x float> [[TMP5]], 0
; SHADERTEST-NEXT:    [[TMP7:%.*]] = insertvalue { <4 x float>, i32 } [[TMP6]], i32 0, 1
; SHADERTEST-NEXT:    ret { <4 x float>, i32 } [[TMP7]]
;
;
; SHADERTEST2_PP0-LABEL: @_amdgpu_ps_main(
; SHADERTEST2_PP0-NEXT:  .entry:
; SHADERTEST2_PP0-NEXT:    [[TMP0:%.*]] = lshr i32 [[ANCILLARY:%.*]], 8
; SHADERTEST2_PP0-NEXT:    [[TMP1:%.*]] = trunc i32 [[TMP0]] to i8
; SHADERTEST2_PP0-NEXT:    [[DOTLHS_TRUNC:%.*]] = and i8 [[TMP1]], 15
; SHADERTEST2_PP0-NEXT:    [[TMP2:%.*]] = urem i8 [[DOTLHS_TRUNC]], 3
; SHADERTEST2_PP0-NEXT:    [[TMP3:%.*]] = zext nneg i8 [[TMP2]] to i64
; SHADERTEST2_PP0-NEXT:    [[TMP4:%.*]] = getelementptr [3 x <4 x float>], ptr addrspace(4) @__llpc_global_proxy_colors, i64 0, i64 [[TMP3]]
; SHADERTEST2_PP0-NEXT:    [[TMP5:%.*]] = load <4 x float>, ptr addrspace(4) [[TMP4]], align 16
; SHADERTEST2_PP0-NEXT:    [[DOTI3:%.*]] = extractelement <4 x float> [[TMP5]], i64 3
; SHADERTEST2_PP0-NEXT:    [[DOTI2:%.*]] = extractelement <4 x float> [[TMP5]], i64 2
; SHADERTEST2_PP0-NEXT:    [[DOTI1:%.*]] = extractelement <4 x float> [[TMP5]], i64 1
; SHADERTEST2_PP0-NEXT:    [[DOTI0:%.*]] = extractelement <4 x float> [[TMP5]], i64 0
; SHADERTEST2_PP0-NEXT:    call void @llvm.amdgcn.exp.f32(i32 immarg 0, i32 immarg 15, float [[DOTI0]], float [[DOTI1]], float [[DOTI2]], float [[DOTI3]], i1 immarg true, i1 immarg true) #[[ATTR2:[0-9]+]]
; SHADERTEST2_PP0-NEXT:    ret void
;
;
; SHADERTEST2_PP1-LABEL: @_amdgpu_ps_main(
; SHADERTEST2_PP1-NEXT:  .entry:
; SHADERTEST2_PP1-NEXT:    [[TMP0:%.*]] = lshr i32 [[ANCILLARY:%.*]], 8
; SHADERTEST2_PP1-NEXT:    [[TMP1:%.*]] = trunc i32 [[TMP0]] to i8
; SHADERTEST2_PP1-NEXT:    [[DOTLHS_TRUNC:%.*]] = and i8 [[TMP1]], 15
; SHADERTEST2_PP1-NEXT:    [[TMP2:%.*]] = urem i8 [[DOTLHS_TRUNC]], 3
; SHADERTEST2_PP1-NEXT:    [[TMP3:%.*]] = zext nneg i8 [[TMP2]] to i64
; SHADERTEST2_PP1-NEXT:    [[TMP4:%.*]] = getelementptr [3 x <4 x float>], ptr addrspace(4) @__llpc_global_proxy_colors, i64 0, i64 [[TMP3]]
; SHADERTEST2_PP1-NEXT:    [[TMP5:%.*]] = load <4 x float>, ptr addrspace(4) [[TMP4]], align 16
; SHADERTEST2_PP1-NEXT:    [[DOTI3:%.*]] = extractelement <4 x float> [[TMP5]], i64 3
; SHADERTEST2_PP1-NEXT:    [[DOTI2:%.*]] = extractelement <4 x float> [[TMP5]], i64 2
; SHADERTEST2_PP1-NEXT:    [[DOTI1:%.*]] = extractelement <4 x float> [[TMP5]], i64 1
; SHADERTEST2_PP1-NEXT:    [[DOTI0:%.*]] = extractelement <4 x float> [[TMP5]], i64 0
; SHADERTEST2_PP1-NEXT:    call void @llvm.amdgcn.exp.f32(i32 immarg 0, i32 immarg 15, float [[DOTI0]], float [[DOTI1]], float [[DOTI2]], float [[DOTI3]], i1 immarg true, i1 immarg true) #[[ATTR1:[0-9]+]]
; SHADERTEST2_PP1-NEXT:    ret void
;
