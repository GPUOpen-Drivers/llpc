/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 *
 **********************************************************************************************************************/

#version 450

#extension GL_ARB_gpu_shader_int64: enable
#extension GL_ARB_shader_ballot: enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) buffer Buffers
{
    vec4  f4;
    ivec4 i4;
    uvec4 u4;
} data[4];

void main()
{
    uint invocation = (gl_SubGroupInvocationARB + gl_SubGroupSizeARB) % 4;

    uint64_t relMask = gl_SubGroupEqMaskARB +
                       gl_SubGroupGeMaskARB +
                       gl_SubGroupGtMaskARB +
                       gl_SubGroupLeMaskARB +
                       gl_SubGroupLtMaskARB;

    if (relMask == ballotARB(true))
    {
        data[invocation].f4.x   = readInvocationARB(data[0].f4.x,    invocation);
        data[invocation].i4.xy  = readInvocationARB(data[1].i4.xy,   invocation);
        data[invocation].u4.xyz = readInvocationARB(data[2].u4.xyz,  invocation);
    }
    else
    {
        data[invocation].f4.x   = readFirstInvocationARB(data[0].f4.x);
        data[invocation].i4.xy  = readFirstInvocationARB(data[1].i4.xy);
        data[invocation].u4.xyz = readFirstInvocationARB(data[2].u4.xyz);
    }
}
// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC.*}} FE lowering results
; SHADERTEST: call <4 x i32> (...) @lgc.create.subgroup.ballot.v4i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.i32(
; SHADERTEST: call reassoc nnan nsz arcp contract afn float (...) @lgc.create.subgroup.broadcast.first.f32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.first.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.first.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.first.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.first.i32(
; SHADERTEST: call i32 (...) @lgc.create.subgroup.broadcast.first.i32(

; SHADERTEST-LABEL: {{^// LLPC.*}} LGC lowering results
; SHADERTEST: call i32 @llvm.amdgcn.readlane{{(.i32)?}}(i32 %{{.*}}, i32 %{{.*}})
; SHADERTEST: call i32 @llvm.amdgcn.readfirstlane{{(.i32)?}}(i32 %{{.*}})
; SHADERTEST-COUNT-5: call i32 @llvm.amdgcn.readlane{{(.i32)?}}(i32 %{{.*}}, i32 %{{.*}})
; SHADERTEST-COUNT-7: call i32 @llvm.amdgcn.readfirstlane{{(.i32)?}}(i32 %{{.*}})

; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
