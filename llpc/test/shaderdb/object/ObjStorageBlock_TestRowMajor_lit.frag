// NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
#version 450

layout(std430, row_major, set = 0, binding = 0) buffer BufferObject
{
    mat4 m4;
};

layout(location = 0) out vec4 output0;

void main()
{
    m4[0] = vec4(1);
    output0 = m4[0];
}

// BEGIN_SHADERTEST
/*
; RUN: amdllpc -v -gfxip=11 %s | FileCheck -check-prefix=SHADERTEST %s

; SHADERTEST-LABEL: {{^}}// LLPC SPIRV-to-LLVM translation results
*/
// END_SHADERTEST
// SHADERTEST-LABEL: @lgc.shader.FS.main(
// SHADERTEST-NEXT:  .entry:
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 0, i32 0, i32 0, i32 2)
// SHADERTEST-NEXT:    store float 1.000000e+00, ptr addrspace(7) [[TMP0]], align 4
// SHADERTEST-NEXT:    [[TMP1:%.*]] = getelementptr inbounds {{(nuw )?}}i8, ptr addrspace(7) [[TMP0]], i32 16
// SHADERTEST-NEXT:    store float 1.000000e+00, ptr addrspace(7) [[TMP1]], align 4
// SHADERTEST-NEXT:    [[TMP2:%.*]] = getelementptr inbounds {{(nuw )?}}i8, ptr addrspace(7) [[TMP0]], i32 32
// SHADERTEST-NEXT:    store float 1.000000e+00, ptr addrspace(7) [[TMP2]], align 4
// SHADERTEST-NEXT:    [[TMP3:%.*]] = getelementptr inbounds {{(nuw )?}}i8, ptr addrspace(7) [[TMP0]], i32 48
// SHADERTEST-NEXT:    store float 1.000000e+00, ptr addrspace(7) [[TMP3]], align 4
// SHADERTEST-NEXT:    [[TMP4:%.*]] = load float, ptr addrspace(7) [[TMP0]], align 16
// SHADERTEST-NEXT:    [[TMP5:%.*]] = insertelement <4 x float> poison, float [[TMP4]], i64 0
// SHADERTEST-NEXT:    [[TMP6:%.*]] = load float, ptr addrspace(7) [[TMP1]], align 16
// SHADERTEST-NEXT:    [[TMP7:%.*]] = insertelement <4 x float> [[TMP5]], float [[TMP6]], i64 1
// SHADERTEST-NEXT:    [[TMP8:%.*]] = load float, ptr addrspace(7) [[TMP2]], align 16
// SHADERTEST-NEXT:    [[TMP9:%.*]] = insertelement <4 x float> [[TMP7]], float [[TMP8]], i64 2
// SHADERTEST-NEXT:    [[TMP10:%.*]] = insertelement <4 x float> [[TMP9]], float 1.000000e+00, i64 3
// SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP10]]) #[[ATTR2:[0-9]+]]
// SHADERTEST-NEXT:    ret void
//
//
// SHADERTEST-LABEL: @_amdgpu_ps_main(
// SHADERTEST-NEXT:  .entry:
// SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
// SHADERTEST-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -4294967296
// SHADERTEST-NEXT:    [[TMP2:%.*]] = zext i32 [[USERDATA0:%.*]] to i64
// SHADERTEST-NEXT:    [[TMP3:%.*]] = or disjoint i64 [[TMP1]], [[TMP2]]
// SHADERTEST-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
// SHADERTEST-NEXT:    call void @llvm.assume(i1 true) [ "align"(ptr addrspace(4) [[TMP4]], i32 4), "dereferenceable"(ptr addrspace(4) [[TMP4]], i32 -1) ]
// SHADERTEST-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP4]], align 16
// SHADERTEST-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32{{(\.v4i32)?}}(i32 1065353216, <4 x i32> [[TMP5]], i32 0, i32 0, i32 0)
// SHADERTEST-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32{{(\.v4i32)?}}(i32 1065353216, <4 x i32> [[TMP5]], i32 16, i32 0, i32 0)
// SHADERTEST-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32{{(\.v4i32)?}}(i32 1065353216, <4 x i32> [[TMP5]], i32 32, i32 0, i32 0)
// SHADERTEST-NEXT:    call void @llvm.amdgcn.raw.buffer.store.i32{{(\.v4i32)?}}(i32 1065353216, <4 x i32> [[TMP5]], i32 48, i32 0, i32 0)
// SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, i1 true, i1 true)
// SHADERTEST-NEXT:    ret void
//
