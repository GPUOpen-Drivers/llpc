; This test case checks shader cache creation in the standalone compilation mode.
; BEGIN_SHADERTEST
; RUN: rm -rf %t_dir && \
; RUN: mkdir -p %t_dir && \
; RUN: amdllpc -spvgen-dir=%spvgendir% %gfxip \
; RUN:         -shader-cache-mode=2 \
; RUN:         -shader-cache-filename=cache.bin -shader-cache-file-dir=%t_dir \
; RUN:         -enable-relocatable-shader-elf \
; RUN:         -o %t.elf %s -v | FileCheck -check-prefix=CREATE %s
; REQUIRES: llpc-shader-cache
; CREATE: Building pipeline with relocatable shader elf.
; CREATE: Cache miss for shader stage compute
; CREATE: Updating the cache for shader stage compute
; CREATE: =====  AMDLLPC SUCCESS  =====
; END_SHADERTEST

; Check that the cache file exists under the expected location and is not empty.
; BEGIN_SHADERTEST
; RUN: ls -s %t_dir/AMD/LlpcCache/cache.bin | FileCheck -check-prefix=SIZE %s
; REQUIRES: llpc-shader-cache
; SIZE: {{[1-9][0-9]*}} {{.*}}cache.bin
; END_SHADERTEST

; Now, attempt to load the shader cache from the previous run in the read-only mode.
; No new cache entries should be added.
; BEGIN_SHADERTEST
; RUN: amdllpc -spvgen-dir=%spvgendir% %gfxip \
; RUN:         -shader-cache-mode=4 \
; RUN:         -shader-cache-filename=cache.bin -shader-cache-file-dir=%t_dir \
; RUN:         -enable-relocatable-shader-elf \
; RUN:         -o %t.elf %s -v | FileCheck -check-prefix=LOAD %s
; REQUIRES: llpc-shader-cache
; LOAD: Building pipeline with relocatable shader elf.
; LOAD: Cache hit for shader stage compute
; LOAD-NOT: Updating the cache for shader stage compute
; LOAD: =====  AMDLLPC SUCCESS  =====
; END_SHADERTEST

; Lastly, attempt to load the shader cache from the previous run in the read/write mode and modify it.
; Add a dummy compilation flag to force a different shader hash and a cache miss.
; BEGIN_SHADERTEST
; RUN: amdllpc -spvgen-dir=%spvgendir% %gfxip \
; RUN:         -vgpr-limit=64 \
; RUN:         -shader-cache-mode=3 \
; RUN:         -shader-cache-filename=cache.bin -shader-cache-file-dir=%t_dir \
; RUN:         -enable-relocatable-shader-elf \
; RUN:         -o %t.elf %s -v | FileCheck -check-prefix=MODIFY %s
; REQUIRES: llpc-shader-cache
; MODIFY: Building pipeline with relocatable shader elf.
; MODIFY: Cache miss for shader stage compute
; MODIFY: Updating the cache for shader stage compute
; MODIFY: =====  AMDLLPC SUCCESS  =====
; END_SHADERTEST


[CsGlsl]
#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferObject {
    vec4 i;
} ubo;

layout(set = 1, binding = 0, std430) buffer OUT
{
    vec4 o;
};

layout(local_size_x = 2, local_size_y = 3) in;
void main() {
    o = ubo.i;
}


[CsInfo]
entryPoint = main
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[0].set = 0
userDataNode[0].next[0].type = DescriptorBuffer
userDataNode[0].next[0].offsetInDwords = 4
userDataNode[0].next[0].sizeInDwords = 8
userDataNode[0].next[0].set = 0
userDataNode[0].next[0].binding = 0
userDataNode[1].type = DescriptorTableVaPtr
userDataNode[1].offsetInDwords = 1
userDataNode[1].sizeInDwords = 1
userDataNode[1].set = 1
userDataNode[1].next[0].type = DescriptorBuffer
userDataNode[1].next[0].offsetInDwords = 4
userDataNode[1].next[0].sizeInDwords = 8
userDataNode[1].next[0].set = 1
userDataNode[1].next[0].binding = 0
