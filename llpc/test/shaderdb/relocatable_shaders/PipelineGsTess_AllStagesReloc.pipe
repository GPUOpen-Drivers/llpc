; Test a relocatable shader compilation with every shader stage and a vertex input.

; BEGIN_SHADERTEST
; RUN: amdllpc -enable-relocatable-shader-elf -o %t.elf -gfxip=9 %s -v | \
; RUN: FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST: Building pipeline with relocatable shader elf.
; SHADERTEST: {{^//}} LLPC pipeline patching results

; Make sure the hs shader comes first and has the vertex attribute as its last parameter.
; SHADERTEST: define dllexport amdgpu_hs void @_amdgpu_hs_main_fetchless({{.*}}, <4 x float> [[vert_attrib:%[0-9]*]])

; Call the original vertex shader passing in the attribute
; SHADERTEST: call amdgpu_ls void @_amdgpu_ls_main_fetchless({{.*}}, <4 x float> [[vert_attrib]])

; Reach the end of the hs shader
; SHADERTEST: ret void

; Make sure that the GS shader does not have the vertex attribute.  It is not needed if it does not call the original
; vertex shader.
; SHADERTEST: define dllexport amdgpu_gs void @_amdgpu_gs_main({{.*}}, i32 {{%[0-9]*}})

; SHADERTEST: {{^//}} LLPC final pipeline module info

; Test that the vertex input is correctly loaded.  For GFX9, if the HS has no vertecies, then the first two vgpr inputs are dropped.  This must be accounted for.
; SHADERTEST: {{^//}} LGC glue shader results
; Fist identify the vgpr input in the function parameters.  We want to make sure we get the vertex id and the vgpr 2 place before it.
; SHADERTEST: define amdgpu_hs { {{.*}} } @_amdgpu_hs_main({{(i32 inreg %[a-zA-Z0-9]+, )+}}float [[vgpr0:%[a-zA-Z0-9]+]], float [[vgpr1:%[a-zA-Z0-9]+]], float %VertexId, float [[vgpr3:%[a-zA-Z0-9]+]], float [[vgpr4:%[a-zA-Z0-9]+]], float %InstanceId)
;
; Make sure that the code picks the vgpr that actually contains the vertex id by checking if the HS has any vertices.
; SHADERTEST: [[hsVertexCount:%[0-9]+]] = and i32 %MergedWaveInfo, 65280
; SHADERTEST: %IsNullHs = icmp eq i32 [[hsVertexCount]], 0
; SHADERTEST: %VgprArgument = select i1 %IsNullHs, float [[vgpr0]], float %VertexId
; SHADERTEST: [[vgprAsInt:%[0-9]+]] = bitcast float %VgprArgument to i32

; Calculate the vertex index and load the data.
; SHADERTEST: %VertexIndex = add i32 [[vgprAsInt]], %BaseVertex
; SHADERTEST: @llvm.amdgcn.struct.tbuffer.load.v4i32(<4 x i32> {{%[0-9]+}}, i32 %VertexIndex,

; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST

; BEGIN_SHADERTEST
; RUN: amdllpc -enable-relocatable-shader-elf -o %t.elf -gfxip=10.1 %s -v | \
; RUN: FileCheck -check-prefix=SHADERTEST_GFX10 %s

; Test that the vertex input is correctly loaded.  GFX10 does not have to issue mentioned above.  Make sure that %VertexId is used.
; SHADERTEST_GFX10: {{^//}} LGC glue shader results
; SHADERTEST_GFX10: define amdgpu_hs { {{.*}} } @_amdgpu_hs_main({{.*}}, float %VertexId
; SHADERTEST_GFX10: [[vgprAsInt:%[0-9]+]] = bitcast float %VertexId to i32
; SHADERTEST_GFX10: %VertexIndex = add i32 [[vgprAsInt]], %BaseVertex
; SHADERTEST_GFX10: @llvm.amdgcn.struct.tbuffer.load.v4i32(<4 x i32> {{%[0-9]+}}, i32 %VertexIndex,

; SHADERTEST_GFX10: AMDLLPC SUCCESS
; END_SHADERTEST

[Version]
version = 52

[VsGlsl]
#version 450

layout(location = 0) in vec4 _14;
layout(location = 0) out vec4 _18;

void main()
{
    _18 = _14;
}

[VsInfo]
entryPoint = main

[TcsGlsl]
#version 450
layout(vertices = 3) out;

void main()
{
}


[TcsInfo]
entryPoint = main

[TesGlsl]
#version 450
layout(triangles, ccw, equal_spacing) in;

void main()
{
}

[TesInfo]
entryPoint = main

[GsGlsl]
#version 450
layout(triangles) in;
layout(max_vertices = 3, triangle_strip) out;

void main()
{
}


[GsInfo]
entryPoint = main

[FsGlsl]
#version 450

void main()
{
}


[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 1
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[0].next[0].type = DescriptorConstBuffer
userDataNode[0].next[0].offsetInDwords = 0
userDataNode[0].next[0].sizeInDwords = 4
userDataNode[0].next[0].set = 0x00000000
userDataNode[0].next[0].binding = 0
userDataNode[1].visibility = 31
userDataNode[1].type = PushConst
userDataNode[1].offsetInDwords = 1
userDataNode[1].sizeInDwords = 12
userDataNode[1].set = 0xFFFFFFFF
userDataNode[1].binding = 0
userDataNode[2].visibility = 8
userDataNode[2].type = StreamOutTableVaPtr
userDataNode[2].offsetInDwords = 13
userDataNode[2].sizeInDwords = 1
userDataNode[3].visibility = 1
userDataNode[3].type = IndirectUserDataVaPtr
userDataNode[3].offsetInDwords = 14
userDataNode[3].sizeInDwords = 1
userDataNode[3].indirectUserDataCount = 4

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
patchControlPoints = 3
deviceIndex = 0
disableVertexReuse = 0
switchWinding = 0
enableMultiView = 0
depthClipEnable = 1
rasterizerDiscardEnable = 0
perSampleShading = 0
numSamples = 0
samplePatternIdx = 0
usrClipPlaneMask = 0
alphaToCoverageEnable = 0
dualSourceBlendEnable = 0
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 0
nggState.enableNgg = 0
nggState.enableGsUse = 0
nggState.forceCullingMode = 0
nggState.compactMode = NggCompactDisable
nggState.enableVertexReuse = 0
nggState.enableBackfaceCulling = 0
nggState.enableFrustumCulling = 0
nggState.enableBoxFilterCulling = 0
nggState.enableSphereCulling = 0
nggState.enableSmallPrimFilter = 0
nggState.enableCullDistanceCulling = 0
nggState.backfaceExponent = 0
nggState.subgroupSizing = Auto
nggState.primsPerSubgroup = 0
nggState.vertsPerSubgroup = 0
dynamicVertexStride = 0
enableUberFetchShader = 0
enableEarlyCompile = 0
options.includeDisassembly = 0
options.scalarBlockLayout = 1
options.includeIr = 0
options.robustBufferAccess = 0
options.reconfigWorkgroupLayout = 0
options.shadowDescriptorTableUsage = Enable
options.shadowDescriptorTablePtrHigh = 2
options.extendedRobustness.robustBufferAccess = 0
options.extendedRobustness.robustImageAccess = 0
options.extendedRobustness.nullDescriptor = 0


[VertexInputState]
binding[0].binding = 0
binding[0].stride = 32
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 1
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[1].offset = 16
