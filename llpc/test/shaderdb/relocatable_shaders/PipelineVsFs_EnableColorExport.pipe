; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
;RUN: amdllpc -v -gfxip 10.3.0 %s | FileCheck -check-prefix=SHADERTEST %s
[Version]
version = 38

[VsGlsl]
#version 450

layout(location = 0) in vec2 inPosition;
layout(location = 0) out vec2 outUV;

void main() {
    outUV = inPosition;
}


[VsInfo]
entryPoint = main

[FsGlsl]
#version 450 core

layout(set = 0, binding = 0) uniform sampler s;
layout(set = 0, binding = 1) uniform texture2D tex;

layout(location = 0) in vec2 inUV;
layout(location = 0) out vec4 oColor;

void main()
{
    ivec2 iUV = ivec2(inUV);
    oColor = texture(sampler2D(tex, s), iUV);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 17
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 11
userDataNode[0].sizeInDwords = 1
userDataNode[0].next[0].type = DescriptorSampler
userDataNode[0].next[0].offsetInDwords = 0
userDataNode[0].next[0].sizeInDwords = 4
userDataNode[0].next[0].set = 0
userDataNode[0].next[0].binding = 0
userDataNode[0].next[1].type = DescriptorResource
userDataNode[0].next[1].offsetInDwords = 0
userDataNode[0].next[1].sizeInDwords = 8
userDataNode[0].next[1].set = 0
userDataNode[0].next[1].binding = 1
userDataNode[1].visibility = 2
userDataNode[1].type = IndirectUserDataVaPtr
userDataNode[1].offsetInDwords = 12
userDataNode[1].sizeInDwords = 1
userDataNode[1].indirectUserDataCount = 4

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
enableColorExportShader = 1
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 1
colorBuffer[0].blendSrcAlphaToColor = 1

[VertexInputState]
binding[0].binding = 1
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0

;
; SHADERTEST-LABEL: @_amdgpu_ps_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[PERSPINTERPCENTER_I1:%.*]] = extractelement <2 x float> [[PERSPINTERPCENTER:%.*]], i64 1
; SHADERTEST-NEXT:    [[PERSPINTERPCENTER_I0:%.*]] = extractelement <2 x float> [[PERSPINTERPCENTER]], i64 0
; SHADERTEST-NEXT:    [[TMP11:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; SHADERTEST-NEXT:    [[TMP12:%.*]] = and i64 [[TMP11]], -4294967296
; SHADERTEST-NEXT:    [[TMP13:%.*]] = zext i32 [[DESCTABLE0:%.*]] to i64
; SHADERTEST-NEXT:    [[TMP14:%.*]] = or i64 [[TMP12]], [[TMP13]]
; SHADERTEST-NEXT:    [[TMP15:%.*]] = inttoptr i64 [[TMP14]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP16:%.*]] = call float @llvm.amdgcn.interp.p1(float [[PERSPINTERPCENTER_I0]], i32 immarg 0, i32 immarg 0, i32 [[PRIMMASK:%.*]]) #[[ATTR2:[0-9]+]]
; SHADERTEST-NEXT:    [[TMP17:%.*]] = call float @llvm.amdgcn.interp.p2(float [[TMP16]], float [[PERSPINTERPCENTER_I1]], i32 immarg 0, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP18:%.*]] = call float @llvm.amdgcn.interp.p1(float [[PERSPINTERPCENTER_I0]], i32 immarg 1, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[TMP19:%.*]] = call float @llvm.amdgcn.interp.p2(float [[TMP18]], float [[PERSPINTERPCENTER_I1]], i32 immarg 1, i32 immarg 0, i32 [[PRIMMASK]]) #[[ATTR2]]
; SHADERTEST-NEXT:    [[DOTI0:%.*]] = fptosi float [[TMP17]] to i32
; SHADERTEST-NEXT:    [[DOTI1:%.*]] = fptosi float [[TMP19]] to i32
; SHADERTEST-NEXT:    [[TMP20:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP15]], align 32, !invariant.load !10
; SHADERTEST-NEXT:    [[TMP21:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP15]], align 16, !invariant.load !10
; SHADERTEST-NEXT:    [[DOTI01:%.*]] = sitofp i32 [[DOTI0]] to float
; SHADERTEST-NEXT:    [[DOTI12:%.*]] = sitofp i32 [[DOTI1]] to float
; SHADERTEST-NEXT:    [[TMP22:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32(i32 15, float [[DOTI01]], float [[DOTI12]], <8 x i32> [[TMP20]], <4 x i32> [[TMP21]], i1 false, i32 0, i32 0)
; SHADERTEST-NEXT:    [[TMP23:%.*]] = insertvalue { <4 x float> } poison, <4 x float> [[TMP22]], 0
; SHADERTEST-NEXT:    [[TMP24:%.*]] = zext i32 [[COLOREXPADDR:%.*]] to i64
; SHADERTEST-NEXT:    [[TMP25:%.*]] = or i64 [[TMP12]], [[TMP24]]
; SHADERTEST-NEXT:    [[TMP26:%.*]] = inttoptr i64 [[TMP25]] to ptr addrspace(4)
; SHADERTEST-NEXT:    call amdgpu_gfx addrspace(4) void [[TMP26]]({ <4 x float> } [[TMP23]])
; SHADERTEST-NEXT:    unreachable
;
;
; SHADERTEST-LABEL: amdgpu_ps_main:
; SHADERTEST:         s_getpc_b64 s[2:3]
; SHADERTEST-NEXT:    s_mov_b32 s2, s0
; SHADERTEST-NEXT:    s_mov_b32 s32, 0
; SHADERTEST-NEXT:    s_load_dwordx2 s[2:3], s[2:3], 0x0
; SHADERTEST-NEXT:    s_waitcnt lgkmcnt(0)
; SHADERTEST-NEXT:    s_and_b32 s3, s3, 0xffff
; SHADERTEST-NEXT:    s_add_u32 s2, s2, s17
; SHADERTEST-NEXT:    s_addc_u32 s3, s3, 0
; SHADERTEST-NEXT:    s_setreg_b32 hwreg(HW_REG_FLAT_SCR_LO), s2
; SHADERTEST-NEXT:    s_setreg_b32 hwreg(HW_REG_FLAT_SCR_HI), s3
; SHADERTEST-NEXT:    s_wqm_b64 exec, exec
; SHADERTEST-NEXT:    s_getpc_b64 s[12:13]
; SHADERTEST-NEXT:    s_mov_b32 s8, s1
; SHADERTEST-NEXT:    s_mov_b32 m0, s16
; SHADERTEST-NEXT:    s_mov_b32 s9, s13
; SHADERTEST-NEXT:    v_interp_p1_f32_e32 v2, v0, attr0.x
; SHADERTEST-NEXT:    v_interp_p1_f32_e32 v0, v0, attr0.y
; SHADERTEST-NEXT:    s_clause 0x1
; SHADERTEST-NEXT:    s_load_dwordx8 s[0:7], s[8:9], 0x0
; SHADERTEST-NEXT:    s_load_dwordx4 s[8:11], s[8:9], 0x0
; SHADERTEST-NEXT:    s_mov_b32 s15, s13
; SHADERTEST-NEXT:    v_interp_p2_f32_e32 v2, v1, attr0.x
; SHADERTEST-NEXT:    v_interp_p2_f32_e32 v0, v1, attr0.y
; SHADERTEST-NEXT:    v_cvt_i32_f32_e32 v1, v2
; SHADERTEST-NEXT:    v_cvt_i32_f32_e32 v2, v0
; SHADERTEST-NEXT:    v_cvt_f32_i32_e32 v0, v1
; SHADERTEST-NEXT:    v_cvt_f32_i32_e32 v1, v2
; SHADERTEST-NEXT:    s_waitcnt lgkmcnt(0)
; SHADERTEST-NEXT:    image_sample v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf dim:SQ_RSRC_IMG_2D
; SHADERTEST-NEXT:    s_swappc_b64 s[30:31], s[14:15]
;
;
; SHADERTEST-LABEL: @color_export_shader(
; SHADERTEST-NEXT:    call void @llvm.amdgcn.s.waitcnt(i32 0)
; SHADERTEST-NEXT:    [[TMP2:%.*]] = extractelement <4 x float> [[TMP0:%.*]], i64 0
; SHADERTEST-NEXT:    [[TMP3:%.*]] = extractelement <4 x float> [[TMP0]], i64 1
; SHADERTEST-NEXT:    [[TMP4:%.*]] = extractelement <4 x float> [[TMP0]], i64 2
; SHADERTEST-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[TMP0]], i64 3
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.f32(i32 immarg 0, i32 immarg 15, float [[TMP2]], float [[TMP3]], float [[TMP4]], float [[TMP5]], i1 immarg true, i1 immarg true) #[[ATTR2]]
; SHADERTEST-NEXT:    ret void
;
; SHADERTEST-LABEL: color_export_shader:
; SHADERTEST:         s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; SHADERTEST-NEXT:    exp mrt0 v0, v1, v2, v3 done vm
; SHADERTEST-NEXT:    s_endpgm
;
