; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py
;RUN: amdllpc -v -gfxip 10.3.0 %s | FileCheck -check-prefix=SHADERTEST %s
[Version]
version = 38

[VsGlsl]
#version 450

layout(location = 0) in vec2 inPosition;
layout(location = 0) out vec2 outUV;

void main() {
    outUV = inPosition;
}


[VsInfo]
entryPoint = main

[FsGlsl]
#version 450 core

layout(set = 0, binding = 0) uniform sampler s;
layout(set = 0, binding = 1) uniform texture2D tex;

layout(location = 0) in vec2 inUV;
layout(location = 0) out vec4 oColor;

void main()
{
    ivec2 iUV = ivec2(inUV);
    oColor = texture(sampler2D(tex, s), iUV);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 11
userDataNode[0].sizeInDwords = 1
userDataNode[0].next[0].type = DescriptorSampler
userDataNode[0].next[0].offsetInDwords = 0
userDataNode[0].next[0].sizeInDwords = 4
userDataNode[0].next[0].set = 0
userDataNode[0].next[0].binding = 0
userDataNode[0].next[1].type = DescriptorResource
userDataNode[0].next[1].offsetInDwords = 0
userDataNode[0].next[1].sizeInDwords = 8
userDataNode[0].next[1].set = 0
userDataNode[0].next[1].binding = 1
userDataNode[1].type = IndirectUserDataVaPtr
userDataNode[1].offsetInDwords = 12
userDataNode[1].sizeInDwords = 1
userDataNode[1].indirectUserDataCount = 4

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
enableColorExportShader = 1
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 1
colorBuffer[0].blendSrcAlphaToColor = 1

[VertexInputState]
binding[0].binding = 1
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0

; SHADERTEST-LABEL: @lgc.shader.VS.main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call <2 x float> @lgc.input.import.generic__v2f32(i1 false, i32 0, i32 0, i32 0, i32 poison)
; SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v2f32(i32 0, i32 0, <2 x float> [[TMP0]]) #[[ATTR1:[0-9]+]]
; SHADERTEST-NEXT:    ret void
;
;
;
; SHADERTEST-LABEL: @lgc.shader.FS.main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; SHADERTEST-NEXT:    [[TMP1:%.*]] = bitcast i64 [[TMP0]] to <2 x i32>
; SHADERTEST-NEXT:    [[TMP2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; SHADERTEST-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to <2 x i32>
; SHADERTEST-NEXT:    [[INTERPPERSPCENTER:%.*]] = call <2 x float> @lgc.input.import.builtin.InterpPerspCenter.v2f32.i32(i32 268435457) #[[ATTR5:[0-9]+]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = call <2 x float> (...) @lgc.input.import.interpolated__v2f32(i1 false, i32 0, i32 0, i32 0, i32 poison, i32 0, <2 x float> [[INTERPPERSPCENTER]])
; SHADERTEST-NEXT:    [[TMP5:%.*]] = call i32 @lgc.load.user.data__i32(i32 44)
; SHADERTEST-NEXT:    [[TMP6:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP5]], i64 0
; SHADERTEST-NEXT:    [[TMP7:%.*]] = bitcast <2 x i32> [[TMP6]] to i64
; SHADERTEST-NEXT:    [[TMP8:%.*]] = inttoptr i64 [[TMP7]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP8]], i32 0
; SHADERTEST-NEXT:    [[TMP10:%.*]] = call i32 @lgc.load.user.data__i32(i32 44)
; SHADERTEST-NEXT:    [[TMP11:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[TMP10]], i64 0
; SHADERTEST-NEXT:    [[TMP12:%.*]] = bitcast <2 x i32> [[TMP11]] to i64
; SHADERTEST-NEXT:    [[TMP13:%.*]] = inttoptr i64 [[TMP12]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP13]], i32 0
; SHADERTEST-NEXT:    [[TMP15:%.*]] = fptosi <2 x float> [[TMP4]] to <2 x i32>
; SHADERTEST-NEXT:    [[TMP16:%.*]] = sitofp <2 x i32> [[TMP15]] to <2 x float>
; SHADERTEST-NEXT:    [[TMP17:%.*]] = load <8 x i32>, ptr addrspace(4) [[TMP14]], align 32, !invariant.load !11
; SHADERTEST-NEXT:    [[TMP18:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP9]], align 16, !invariant.load !11
; SHADERTEST-NEXT:    [[TMP19:%.*]] = extractelement <2 x float> [[TMP16]], i64 0
; SHADERTEST-NEXT:    [[TMP20:%.*]] = extractelement <2 x float> [[TMP16]], i64 1
; SHADERTEST-NEXT:    [[TMP21:%.*]] = extractelement <4 x i32> [[TMP18]], i64 0
; SHADERTEST-NEXT:    [[TMP22:%.*]] = call i32 @llvm.amdgcn.readfirstlane(i32 [[TMP21]])
; SHADERTEST-NEXT:    [[TMP23:%.*]] = insertelement <4 x i32> poison, i32 [[TMP22]], i64 0
; SHADERTEST-NEXT:    [[TMP24:%.*]] = extractelement <4 x i32> [[TMP18]], i64 1
; SHADERTEST-NEXT:    [[TMP25:%.*]] = call i32 @llvm.amdgcn.readfirstlane(i32 [[TMP24]])
; SHADERTEST-NEXT:    [[TMP26:%.*]] = insertelement <4 x i32> [[TMP23]], i32 [[TMP25]], i64 1
; SHADERTEST-NEXT:    [[TMP27:%.*]] = extractelement <4 x i32> [[TMP18]], i64 2
; SHADERTEST-NEXT:    [[TMP28:%.*]] = call i32 @llvm.amdgcn.readfirstlane(i32 [[TMP27]])
; SHADERTEST-NEXT:    [[TMP29:%.*]] = insertelement <4 x i32> [[TMP26]], i32 [[TMP28]], i64 2
; SHADERTEST-NEXT:    [[TMP30:%.*]] = extractelement <4 x i32> [[TMP18]], i64 3
; SHADERTEST-NEXT:    [[TMP31:%.*]] = call i32 @llvm.amdgcn.readfirstlane(i32 [[TMP30]])
; SHADERTEST-NEXT:    [[TMP32:%.*]] = insertelement <4 x i32> [[TMP29]], i32 [[TMP31]], i64 3
; SHADERTEST-NEXT:    [[TMP33:%.*]] = call reassoc nnan nsz arcp contract afn <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32(i32 15, float [[TMP19]], float [[TMP20]], <8 x i32> [[TMP17]], <4 x i32> [[TMP32]], i1 false, i32 0, i32 0)
; SHADERTEST-NEXT:    call void @lgc.output.export.generic.i32.i32.v4f32(i32 0, i32 0, <4 x float> [[TMP33]]) #[[ATTR6:[0-9]+]]
; SHADERTEST-NEXT:    ret void
;
;
;
; SHADERTEST-LABEL: @color_export_shader(
; SHADERTEST-NEXT:    [[TMP3:%.*]] = extractelement <4 x float> [[TMP0:%.*]], i64 0
; SHADERTEST-NEXT:    [[TMP4:%.*]] = extractelement <4 x float> [[TMP0]], i64 1
; SHADERTEST-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[TMP0]], i64 2
; SHADERTEST-NEXT:    [[TMP6:%.*]] = extractelement <4 x float> [[TMP0]], i64 3
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.f32(i32 immarg 0, i32 immarg 15, float [[TMP3]], float [[TMP4]], float [[TMP5]], float [[TMP6]], i1 immarg true, i1 immarg true) #[[ATTR1]]
; SHADERTEST-NEXT:    call void @llvm.amdgcn.endpgm()
; SHADERTEST-NEXT:    unreachable
;
