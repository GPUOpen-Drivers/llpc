; This test checks that all of the shaders in a graphics pipeline are correctly add to the shader cache and retrieved from it.
; We only check the internal shader cache because of the limitation on the testing infrastructure.

; BEGIN_SHADERTEST
; RUN: rm -rf %t_dir && \
; RUN: mkdir -p %t_dir && \
; RUN: amdllpc %gfxip \
; RUN:         -shader-cache-mode=2 \
; RUN:         -shader-cache-filename=cache.bin -shader-cache-file-dir=%t_dir \
; RUN:         -enable-relocatable-shader-elf \
; RUN:         -cache-full-pipelines=false \
; RUN:         -o %t.elf %s -v | FileCheck -check-prefix=CREATE %s
; REQUIRES: llpc_enable_shader_cache
; CREATE: Building pipeline with relocatable shader elf.
; CREATE: Cache miss for shader stage vertex
; CREATE: Updating the cache for unlinked shader stage vertex
; CREATE: Cache miss for shader stage fragment
; CREATE: Updating the cache for unlinked shader stage fragment
; CREATE: ID for glue shader0: 00000000000000007632663332570000000100000002000000030000000E00000000000000030000000400000000000000000000000000000000000000000000000E000000070000000000000001
; CREATE: Cache miss for glue shader 0
; CREATE: Updating the cache for glue shader 0
; CREATE: ID for glue shader1: 0000000000000000007634663332090000000000000000000000000000000000000000000000000000000000000000
; CREATE: Cache miss for glue shader 1
; CREATE: Updating the cache for glue shader 1
; CREATE: =====  AMDLLPC SUCCESS  =====
; END_SHADERTEST

; Check that the cache file exists under the expected location and is not empty.
; BEGIN_SHADERTEST
; RUN: ls -s %t_dir/AMD/LlpcCache/cache.bin | FileCheck -check-prefix=SIZE %s
; REQUIRES: llpc_enable_shader_cache
; SIZE: {{[1-9][0-9]*}} {{.*}}cache.bin
; END_SHADERTEST

; Now, attempt to load the shader cache from the previous run in the read-only mode.
; No new cache entries should be added.
; BEGIN_SHADERTEST
; RUN: amdllpc %gfxip \
; RUN:         -shader-cache-mode=4 \
; RUN:         -shader-cache-filename=cache.bin -shader-cache-file-dir=%t_dir \
; RUN:         -enable-relocatable-shader-elf \
; RUN:         -cache-full-pipelines=false \
; RUN:         -o %t.elf %s -v | FileCheck -check-prefix=LOAD %s
; REQUIRES: llpc_enable_shader_cache
; LOAD: Building pipeline with relocatable shader elf.
; LOAD: Cache hit for shader stage vertex
; LOAD-NOT: Updating the cache for shader stage vertex
; LOAD: Cache hit for shader stage fragment
; LOAD-NOT: Updating the cache for shader stage fragment
; LOAD: ID for glue shader0: 00000000000000007632663332570000000100000002000000030000000E00000000000000030000000400000000000000000000000000000000000000000000000E000000070000000000000001
; LOAD: Cache hit for glue shader 0
; LOAD-NOT: Updating the cache for glue shader
; LOAD: ID for glue shader1: 0000000000000000007634663332090000000000000000000000000000000000000000000000000000000000000000
; LOAD: Cache hit for glue shader 1
; LOAD-NOT: Updating the cache for glue shader
; LOAD: =====  AMDLLPC SUCCESS  =====
; END_SHADERTEST

[Version]
version = 38

[VsGlsl]
#version 450

layout(location = 0) in vec2 inPosition;
layout(location = 0) out vec2 outUV;

void main() {
    outUV = inPosition;
}


[VsInfo]
entryPoint = main

[FsGlsl]
#version 450 core

layout(set = 0, binding = 0) uniform sampler s;
layout(set = 0, binding = 1) uniform texture2D tex;
layout(location = 0) in vec2 inUV;
layout(location = 0) out vec4 oColor;

void main()
{
    ivec2 iUV = ivec2(inUV);
    oColor = texture(sampler2D(tex, s), iUV);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 17
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 11
userDataNode[0].sizeInDwords = 1
userDataNode[0].next[0].type = DescriptorSampler
userDataNode[0].next[0].offsetInDwords = 0
userDataNode[0].next[0].sizeInDwords = 4
userDataNode[0].next[0].set = 0
userDataNode[0].next[0].binding = 0
userDataNode[0].next[1].type = DescriptorResource
userDataNode[0].next[1].offsetInDwords = 0
userDataNode[0].next[1].sizeInDwords = 8
userDataNode[0].next[1].set = 0
userDataNode[0].next[1].binding = 1
userDataNode[1].visibility = 2
userDataNode[1].type = IndirectUserDataVaPtr
userDataNode[1].offsetInDwords = 12
userDataNode[1].sizeInDwords = 1
userDataNode[1].indirectUserDataCount = 4

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 1
colorBuffer[0].blendSrcAlphaToColor = 1

[VertexInputState]
binding[0].binding = 1
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
