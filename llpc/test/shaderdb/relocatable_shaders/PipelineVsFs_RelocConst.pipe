// This test case checks that descriptor offset and descriptor buffer pointer relocation works
// for buffer descriptors in a vs/fs pipeline.
// Also check that the user data limit is set correctly.

; BEGIN_SHADERTEST
; RUN: amdllpc -enable-relocatable-shader-elf -o %t.elf %gfxip %s && llvm-objdump --triple=amdgcn --mcpu=gfx900 -d %t.elf | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: 0000000000000000 <_amdgpu_vs_main>:
; SHADERTEST: s_cmp_eq_u32 0, 0 //{{.*}}
; SHADERTEST: s_cselect_b32 s[[RELOCCOND:[0-9]+]], s{{[0-9]+}}, s{{[0-9]+}} //{{.*}}
; SHADERTEST: s_mov_b32 s[[RELOREG:[0-9]+]], 12 //{{.*}}
; SHADERTEST: s_load_dwordx4 s[{{.*}}:{{.*}}], s[{{.*}}:{{.*}}], s[[RELOREG]] //{{.*}}
; SHADERTEST: {{[0-9A-Za-z]+}} <_amdgpu_ps_main>:
; SHADERTEST: s_cmp_eq_u32 0, 0 //{{.*}}
; SHADERTEST: s_cselect_b32 s[[RELOCCOND1:[0-9]+]], s{{[0-9]+}}, s{{[0-9]+}} //{{.*}}
; SHADERTEST: s_mov_b32 s[[RELOREG1:[0-9]+]], 12 //{{.*}}
; SHADERTEST: s_load_dwordx4 s[{{.*}}:{{.*}}], s[{{.*}}:{{.*}}], s[[RELOREG1]] //{{.*}}
; END_SHADERTEST

; BEGIN_SHADERTEST
; RUN: amdllpc -enable-relocatable-shader-elf -enable-opaque-pointers=true -v %gfxip %s | FileCheck -check-prefix=SHADERTEST1 %s
; RUN: amdllpc -enable-relocatable-shader-elf -enable-opaque-pointers=false -v %gfxip %s | FileCheck -check-prefix=SHADERTEST1 %s
; SHADERTEST1-LABEL: {{^// LLPC}} pipeline patching results
; SHADERTEST1-LABEL: _amdgpu_vs_main_fetchless
; SHADERTEST1: %[[SPILLCONST:.+]] = call i32 @llvm.amdgcn.reloc.constant(metadata ![[SPILLNODE:[0-9]+]])
; SHADERTEST1: %[[CONSTICMP:.+]] = icmp eq i32 %[[SPILLCONST]], 0
; SHADERTEST1: %[[DESCPTRSELECT:.+]] = select i1 %[[CONSTICMP]], {{.*}}
; SHADERTEST1: %[[OFFCONST:.+]] = call i32 @llvm.amdgcn.reloc.constant(metadata ![[OFFNODE:[0-9]+]])
; SHADERTEST1: %[[OFFCONSTEXT:.+]] = zext i32 %[[OFFCONST]] to i64
; SHADERTEST1: %[[BUFFFERDESCADDR:.+]] = add i64 %{{.+}}, %[[OFFCONSTEXT]]
; SHADERTEST1: %[[BUFFERDESCPTR:.+]] = inttoptr i64 %[[BUFFFERDESCADDR]] {{.*}}
; SHADERTEST1: %{{.+}} = load <4 x i32>, {{<4 x i32> addrspace\(4\)\*|ptr addrspace\(4\)}} %[[BUFFERDESCPTR]], align 1
; SHADERTEST1: ![[SPILLNODE]] = !{!"dusespill_0_0"}
; SHADERTEST1: ![[OFFNODE]] = !{!"doff_0_0_b"}
; SHADERTEST1-LABEL: {{^// LLPC}} final pipeline module info
; SHADERTEST1-DAG: SPI_SHADER_USER_DATA_VS_{{.}} 0x000000000000000B
; SHADERTEST1-DAG: SPI_SHADER_USER_DATA_PS_{{.}} 0x000000000000000B
; SHADERTEST1: .spill_threshold: 0x00000000FFFFFFFF
; SHADERTEST1: .user_data_limit: 0x000000000000000C
; SHADERTEST1: AMDLLPC SUCCESS
; END_SHADERTEST

[VsGlsl]
#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    vec4 proj;
} ubo;

layout(location = 0) in vec2 inPosition;
layout(location = 1) in vec3 inColor;

layout(location = 0) out vec3 fragColor;

void main() {
    gl_Position = ubo.proj;
    fragColor = inColor;
}


[VsInfo]
entryPoint = main
userDataNode[0].type = IndirectUserDataVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[0].indirectUserDataCount = 0
userDataNode[1].type = DescriptorTableVaPtr
userDataNode[1].offsetInDwords = 11
userDataNode[1].sizeInDwords = 1
userDataNode[1].set = 0
userDataNode[1].next[0].type = DescriptorBuffer
userDataNode[1].next[0].offsetInDwords = 3
userDataNode[1].next[0].sizeInDwords = 8
userDataNode[1].next[0].set = 0
userDataNode[1].next[0].binding = 0

trapPresent = 0
debugMode = 0
enablePerformanceData = 0
vgprLimit = 0
sgprLimit = 0
maxThreadGroupsPerComputeUnit = 0

[FsGlsl]
#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    vec4 proj;
} ubo;

layout(location = 0) in vec3 fragColor;
layout(location = 0) out vec4 outputColor;
void main() {
    outputColor = vec4(fragColor, 1.0) + ubo.proj;
}

[FsInfo]
entryPoint = main
trapPresent = 0
debugMode = 0
enablePerformanceData = 0
vgprLimit = 0
sgprLimit = 0
maxThreadGroupsPerComputeUnit = 0

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
patchControlPoints = 0
deviceIndex = 0
disableVertexReuse = 0
switchWinding = 0
enableMultiView = 0
depthClipEnable = 1
rasterizerDiscardEnable = 0
perSampleShading = 1
numSamples = 8
samplePatternIdx = 48
usrClipPlaneMask = 0
includeDisassembly = 0
alphaToCoverageEnable = 0
dualSourceBlendEnable = 1
colorBuffer[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 1
colorBuffer[0].blendSrcAlphaToColor = 1
userDataNode[0].type = DescriptorTableVaPtr
userDataNode[0].offsetInDwords = 11
userDataNode[0].sizeInDwords = 1
userDataNode[0].set = 0
userDataNode[0].next[0].type = DescriptorBuffer
userDataNode[0].next[0].offsetInDwords = 3
userDataNode[0].next[0].sizeInDwords = 8
userDataNode[0].next[0].set = 0
userDataNode[0].next[0].binding = 0

[VertexInputState]
binding[0].binding = 1
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
binding[1].binding = 0
binding[1].stride = 16
binding[1].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 1
attribute[0].binding = 1
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 0
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[1].offset = 0
