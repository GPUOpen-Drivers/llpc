// This test case checks the use of descriptor compact buffer:
// 1. If set is -1, it is a internal buffer,use spill table to load it
// 2. If set is not -1, it may be descriptorBufferCompact or descriptorBuffer if there is no pipeline layout

; BEGIN_SHADERTEST
; RUN: amdllpc -enable-relocatable-shader-elf -v -gfxip=10.3 %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^}}// LLPC pipeline patching results
; set = -1, binding = 5, this is a internal buffer
; SHADERTEST:call i32 @llvm.amdgcn.reloc.constant(metadata ![[OFFSET_4294967295_5:[0-9]+]])
; set = 0, binding = 1, this is a buffer that app creates.
; SHADERTEST: [[USESPILL:%[0-9]*]] = call i32 @llvm.amdgcn.reloc.constant(metadata ![[NODE_0_1:[0-9]+]])
; SHADERTEST: [[NOTUSESPILL:%[^,]*]] = icmp eq i32 [[USESPILL]], 0
; SHADERTEST: select i1 [[NOTUSESPILL]], i32 %descTable0, i32 %spillTable
; SHADERTEST: call i32 @llvm.amdgcn.reloc.constant(metadata
; determine if it is a compact buffer
; SHADERTEST: [[isCompact:%[0-9]*]] = call i32 @llvm.amdgcn.reloc.constant(metadata ![[COMPACTBUFFER_0_1:[0-9]+]])
; SHADERTEST: icmp eq i32 [[isCompact]], 0
; SHADERTEST: ![[OFFSET_4294967295_5]] = !{!"doff_4294967295_5_b"}
; SHADERTEST: ![[NODE_0_1]] = !{!"dusespill_0_1"}
; SHADERTEST: ![[COMPACTBUFFER_0_1]] = !{!"compactbuffer_0_1"}
; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST

[Version]
version = 57

[VsGlsl]
#version 450

layout (location = 0) in vec3 inPos;
layout (location = 1) in vec3 inColor;

layout (binding = 1) uniform UboInstance 
{
	mat4 model; 
} uboInstance;

layout (location = 0) out vec3 outColor;

out gl_PerVertex 
{
	vec4 gl_Position;
};

void main() 
{
	outColor = inColor;
	gl_Position = uboInstance.model * vec4(inPos.xyz, 1.0);
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 450

layout (location = 0) in vec3 inColor;

layout (location = 0) out vec4 outFragColor;

void main() 
{
	outFragColor = vec4(inColor, 1.0);	
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 2
userDataNode[0].type = DescriptorConstBufferCompact
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 2
userDataNode[0].set = 0x00000000
userDataNode[0].binding = 1
userDataNode[1].visibility = 2
userDataNode[1].type = DescriptorTableVaPtr
userDataNode[1].offsetInDwords = 2
userDataNode[1].sizeInDwords = 1
userDataNode[1].next[0].type = DescriptorConstBuffer
userDataNode[1].next[0].offsetInDwords = 0
userDataNode[1].next[0].sizeInDwords = 4
userDataNode[1].next[0].set = 0x00000000
userDataNode[1].next[0].binding = 0
userDataNode[2].visibility = 2
userDataNode[2].type = IndirectUserDataVaPtr
userDataNode[2].offsetInDwords = 3
userDataNode[2].sizeInDwords = 1
userDataNode[2].indirectUserDataCount = 4
userDataNode[3].visibility = 2
userDataNode[3].type = DescriptorBufferCompact
userDataNode[3].offsetInDwords = 4
userDataNode[3].sizeInDwords = 2
userDataNode[3].set = 0xFFFFFFFF
userDataNode[3].binding = 5

[GraphicsPipelineState]
colorBuffer[0].format = VK_FORMAT_B8G8R8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 0
enableUberFetchShader = 1

[VertexInputState]
binding[0].binding = 0
binding[0].stride = 24
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32_SFLOAT
attribute[0].offset = 0
attribute[1].location = 1
attribute[1].binding = 0
attribute[1].format = VK_FORMAT_R32G32B32_SFLOAT
attribute[1].offset = 12
