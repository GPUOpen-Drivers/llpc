; Check that a warning is printed when relocatable compilation is requested but not possible.
; Use a geometry shader, as this stage is not yet supported in the relocatable compilation flow.

; BEGIN_SHADERTEST
; RUN: amdllpc -enable-relocatable-shader-elf -auto-layout-desc -spvgen-dir=%spvgendir% -v %gfxip %s \
; RUN:   | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} calculated hash results (graphics pipeline)
; SHADERTEST-LABEL: {{^Warning:}} Relocatable shader compilation requested but not possible
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST: {{^=====}} AMDLLPC SUCCESS
; END_SHADERTEST

[VsGlsl]
#version 450 core

void main()
{
    gl_Position = vec4(0);
    gl_PointSize = 0;
    gl_ClipDistance[2] = 0;
    gl_CullDistance[2] = 0;
}

[VsInfo]
entryPoint = main

[GsGlsl]
#version 450 core
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

layout(location = 2) out vec4 outColor;

void main()
{
    for (int i = 0; i < gl_in.length(); ++i)
    {
        outColor    = gl_in[i].gl_Position;
        outColor.x += gl_in[i].gl_PointSize;
        outColor.y += gl_in[i].gl_ClipDistance[2];
        outColor.z += gl_in[i].gl_CullDistance[2];
        outColor.w += float(gl_PrimitiveIDIn + gl_InvocationID);

        EmitVertex();
    }

    EndPrimitive();
}

[GsInfo]
entryPoint = main

[GraphicsPipelineState]
patchControlPoints = 0
alphaToCoverageEnable = 0
dualSourceBlendEnable = 0
colorBuffer[0].format = VK_FORMAT_B8G8R8A8_UNORM
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 0
