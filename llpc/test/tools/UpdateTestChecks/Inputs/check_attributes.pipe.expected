; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --check-attributes --generalize-calls
; Test that the layer input is not output when multiview is enabled.
; For GFX10+, dummy generic output is no longer needed
; If multiview is enabled, it will fail to build with relocatable ELF.

; RUN: amdllpc -enable-relocatable-shader-elf -emit-llvm -o - -gfxip=10.3 %s | FileCheck -check-prefix=SHADERTEST %s

;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


[Version]
version = 52

[VsGlsl]
#version 450

layout(location = 0) in vec4 _17;

void main()
{
    gl_Position = _17;
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 450

layout(location = 0) out vec4 _9;

void main()
{
    _9 = vec4(0,0,0,0);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 1
userDataNode[0].type = IndirectUserDataVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[0].indirectUserDataCount = 8

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
enableMultiView = 1
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 1


[VertexInputState]
binding[0].binding = 0
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
; SHADERTEST: Function Attrs: alwaysinline nounwind memory(readwrite)
; SHADERTEST-LABEL: @_amdgpu_vs_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; SHADERTEST-NEXT:    [[VERTEXINDEX:%.*]] = add i32 [[VERTEXID:%.*]], [[BASEVERTEX:%.*]]
; SHADERTEST-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -4294967296
; SHADERTEST-NEXT:    [[TMP2:%.*]] = zext i32 [[VERTEXBUFFERTABLE:%.*]] to i64
; SHADERTEST-NEXT:    [[TMP3:%.*]] = or disjoint i64 [[TMP1]], [[TMP2]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP4]], align 16, !invariant.load [[META7:![0-9]+]]
; SHADERTEST-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 0, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 4, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP8:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 8, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 12, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP6]] to float
; SHADERTEST-NEXT:    [[TMP11:%.*]] = bitcast i32 [[TMP7]] to float
; SHADERTEST-NEXT:    [[TMP12:%.*]] = bitcast i32 [[TMP8]] to float
; SHADERTEST-NEXT:    [[TMP13:%.*]] = bitcast i32 [[TMP9]] to float
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp{{.*}}(i32 12, i32 15, float [[TMP10]], float [[TMP11]], float [[TMP12]], float [[TMP13]], i1 false, i1 false)
; SHADERTEST-NEXT:    [[TMP14:%.*]] = bitcast i32 [[VIEWID:%.*]] to float
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp{{.*}}(i32 13, i32 4, float poison, float poison, float [[TMP14]], float poison, i1 true, i1 false)
; SHADERTEST-NEXT:    ret void
;
;
; SHADERTEST: Function Attrs: alwaysinline nounwind memory(readwrite)
; SHADERTEST-LABEL: @_amdgpu_ps_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.compr{{.*}}(i32 0, i32 15, <2 x half> zeroinitializer, <2 x half> zeroinitializer, i1 true, i1 true)
; SHADERTEST-NEXT:    ret void
;
