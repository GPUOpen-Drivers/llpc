; NOTE: Assertions have been autogenerated by tool/update_llpc_test_checks.py UTC_ARGS: --check-globals --generalize-calls
; Test that the layer input is not output when multiview is enabled.
; For GFX10+, dummy generic output is no longer needed
; If multiview is enabled, it will fail to build with relocatable ELF.

; RUN: amdllpc -enable-relocatable-shader-elf -emit-llvm -o - -gfxip=10.3 %s | FileCheck -check-prefix=SHADERTEST %s

;; Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved. ;;


[Version]
version = 52

[VsGlsl]
#version 450

layout(location = 0) in vec4 _17;

void main()
{
    gl_Position = _17;
}

[VsInfo]
entryPoint = main

[FsGlsl]
#version 450

layout(location = 0) out vec4 _9;

void main()
{
    _9 = vec4(0,0,0,0);
}

[FsInfo]
entryPoint = main

[ResourceMapping]
userDataNode[0].visibility = 1
userDataNode[0].type = IndirectUserDataVaPtr
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 1
userDataNode[0].indirectUserDataCount = 8

[GraphicsPipelineState]
topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
enableMultiView = 1
colorBuffer[0].format = VK_FORMAT_R8G8B8A8_UNORM
colorBuffer[0].channelWriteMask = 15
colorBuffer[0].blendEnable = 0
colorBuffer[0].blendSrcAlphaToColor = 1


[VertexInputState]
binding[0].binding = 0
binding[0].stride = 16
binding[0].inputRate = VK_VERTEX_INPUT_RATE_VERTEX
attribute[0].location = 0
attribute[0].binding = 0
attribute[0].format = VK_FORMAT_R32G32B32A32_SFLOAT
attribute[0].offset = 0
; SHADERTEST-LABEL: @_amdgpu_vs_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    [[TMP0:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; SHADERTEST-NEXT:    [[VERTEXINDEX:%.*]] = add i32 [[VERTEXID:%.*]], [[BASEVERTEX:%.*]]
; SHADERTEST-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -4294967296
; SHADERTEST-NEXT:    [[TMP2:%.*]] = zext i32 [[VERTEXBUFFERTABLE:%.*]] to i64
; SHADERTEST-NEXT:    [[TMP3:%.*]] = or disjoint i64 [[TMP1]], [[TMP2]]
; SHADERTEST-NEXT:    [[TMP4:%.*]] = inttoptr i64 [[TMP3]] to ptr addrspace(4)
; SHADERTEST-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr addrspace(4) [[TMP4]], align 16, !invariant.load [[META7:![0-9]+]]
; SHADERTEST-NEXT:    [[TMP6:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 0, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP7:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 4, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP8:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 8, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP9:%.*]] = call i32 @llvm.amdgcn.struct.tbuffer.load{{.*}}(<4 x i32> [[TMP5]], i32 [[VERTEXINDEX]], i32 12, i32 0, i32 22, i32 0), !invariant.load [[META7]]
; SHADERTEST-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP6]] to float
; SHADERTEST-NEXT:    [[TMP11:%.*]] = bitcast i32 [[TMP7]] to float
; SHADERTEST-NEXT:    [[TMP12:%.*]] = bitcast i32 [[TMP8]] to float
; SHADERTEST-NEXT:    [[TMP13:%.*]] = bitcast i32 [[TMP9]] to float
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp{{.*}}(i32 12, i32 15, float [[TMP10]], float [[TMP11]], float [[TMP12]], float [[TMP13]], i1 false, i1 false)
; SHADERTEST-NEXT:    [[TMP14:%.*]] = bitcast i32 [[VIEWID:%.*]] to float
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp{{.*}}(i32 13, i32 4, float poison, float poison, float [[TMP14]], float poison, i1 true, i1 false)
; SHADERTEST-NEXT:    ret void
;
;
; SHADERTEST-LABEL: @_amdgpu_ps_main(
; SHADERTEST-NEXT:  .entry:
; SHADERTEST-NEXT:    call void @llvm.amdgcn.exp.compr{{.*}}(i32 0, i32 15, <2 x half> zeroinitializer, <2 x half> zeroinitializer, i1 true, i1 true)
; SHADERTEST-NEXT:    ret void
;
;.
; SHADERTEST: attributes #[[ATTR0:[0-9]+]] = { alwaysinline nounwind memory(readwrite) "amdgpu-memory-bound"="false" "amdgpu-prealloc-sgpr-spill-vgprs" "amdgpu-unroll-threshold"="700" "amdgpu-wave-limiter"="false" "denormal-fp-math-f32"="preserve-sign" "target-features"=",+wavefrontsize32,+cumode,+enable-flat-scratch" }
; SHADERTEST: attributes #[[ATTR1:[0-9]+]] = { alwaysinline nounwind memory(readwrite) "InitialPSInputAddr"="0" "amdgpu-color-export"="1" "amdgpu-depth-export"="0" "amdgpu-memory-bound"="false" "amdgpu-prealloc-sgpr-spill-vgprs" "amdgpu-unroll-threshold"="700" "amdgpu-wave-limiter"="false" "denormal-fp-math-f32"="preserve-sign" "target-features"=",+wavefrontsize64,+cumode,+enable-flat-scratch" }
; SHADERTEST: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(read) }
; SHADERTEST: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
; SHADERTEST: attributes #[[ATTR4:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
;.
; SHADERTEST: [[META0:![0-9]+]] = !{!"Vulkan"}
; SHADERTEST: [[META1:![0-9]+]] = !{i32 -456748678, i32 696546207, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
; SHADERTEST: [[META2:![0-9]+]] = !{i32 -1516779780, i32 289691743, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 1800, i32 0, i32 0, i32 1}
; SHADERTEST: [[META3:![0-9]+]] = !{i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 64, i32 32}
; SHADERTEST: [[META4:![0-9]+]] = !{!"\82\B0amdpal.pipelines{{.*}}amdpal.version\92\03\00"}
; SHADERTEST: [[META5:![0-9]+]] = !{i32 0}
; SHADERTEST: [[META6:![0-9]+]] = !{i32 1}
; SHADERTEST: [[META7]] = !{}
; SHADERTEST: [[META8:![0-9]+]] = !{i32 4}
; SHADERTEST: [[META9:![0-9]+]] = !{i32 6}
;.
