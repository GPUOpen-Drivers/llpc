; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt --verify-each -passes='lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,dxil-cleanup-continuations,lint' -S %s --lint-abort-on-error | FileCheck %s

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-p32:32:32-i1:32-i8:8-i16:16-i32:32-i64:32-f16:16-f32:32-f64:32-v8:8-v16:16-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

declare void @lgc.cps.await__void(...)
declare ptr @async_fun(i64, i32)
declare void @lgc.cps.jump(...)
declare void @lgc.cps.complete()

define <4 x i32> @simple_await(i64 %dummyRet, <4 x i32> %arg) !continuation.registercount !1 {
; CHECK-LABEL: define void @simple_await(
; CHECK-SAME: i64 [[DUMMYRET:%.*]], <4 x i32> [[ARG:%.*]]) !continuation.registercount [[META1:![0-9]+]] !continuation [[META2:![0-9]+]] !continuation.stacksize [[META3:![0-9]+]] !continuation.state [[META3]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CONT_STATE_STACK_SEGMENT:%.*]] = call ptr addrspace(32) @lgc.cps.alloc(i32 24)
; CHECK-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], ptr addrspace(32) [[CONT_STATE_STACK_SEGMENT]], i32 0, i32 0
; CHECK-NEXT:    store <4 x i32> [[ARG]], ptr addrspace(32) [[ARG_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[DUMMYRET_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], ptr addrspace(32) [[CONT_STATE_STACK_SEGMENT]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[DUMMYRET]], ptr addrspace(32) [[DUMMYRET_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[CALLEE:%.*]] = ptrtoint ptr @async_fun to i64
; CHECK-NEXT:    [[TMP0:%.*]] = inttoptr i64 [[CALLEE]] to ptr
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @simple_await.resume.0)
; CHECK-NEXT:    call void (...) @lgc.cps.jump(i64 [[CALLEE]], i32 -1, {} poison, i32 poison, i64 [[TMP1]]), !continuation.registercount [[META1]], !continuation.returnedRegistercount [[META1]]
; CHECK-NEXT:    unreachable
;
  %callee = ptrtoint ptr @async_fun to i64
  call void (...) @lgc.cps.await__void(i64 %callee, i32 3), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void (...) @lgc.cps.jump(i64 %dummyRet, i32 -1, {} poison, i64 poison, <4 x i32> %arg), !continuation.registercount !1
  unreachable
}

define void @simple_await_entry(i64 %dummyRet, <4 x i32> %arg, <4 x i32> addrspace(1)* %mem) !continuation.entry !0 !continuation.registercount !1 {
; CHECK-LABEL: define void @simple_await_entry(
; CHECK-SAME: i64 [[DUMMYRET:%.*]], <4 x i32> [[ARG:%.*]], ptr addrspace(1) [[MEM:%.*]]) !continuation.registercount [[META1]] !continuation.entry [[META4:![0-9]+]] !continuation [[META5:![0-9]+]] !continuation.stacksize [[META3]] !continuation.state [[META3]] {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CONT_STATE_STACK_SEGMENT:%.*]] = call ptr addrspace(32) @lgc.cps.alloc(i32 24)
; CHECK-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], ptr addrspace(32) [[CONT_STATE_STACK_SEGMENT]], i32 0, i32 1
; CHECK-NEXT:    store ptr addrspace(1) [[MEM]], ptr addrspace(32) [[MEM_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], ptr addrspace(32) [[CONT_STATE_STACK_SEGMENT]], i32 0, i32 0
; CHECK-NEXT:    store <4 x i32> [[ARG]], ptr addrspace(32) [[ARG_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[CALLEE:%.*]] = ptrtoint ptr @async_fun to i64
; CHECK-NEXT:    [[TMP0:%.*]] = inttoptr i64 [[CALLEE]] to ptr
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @simple_await_entry.resume.0)
; CHECK-NEXT:    call void (...) @lgc.cps.jump(i64 [[CALLEE]], i32 -1, {} poison, i32 poison, i64 [[TMP1]]), !continuation.registercount [[META1]], !continuation.returnedRegistercount [[META1]]
; CHECK-NEXT:    unreachable
;
  %callee = ptrtoint ptr @async_fun to i64
  call void (...) @lgc.cps.await__void(i64 %callee, i32 3), !continuation.registercount !1, !continuation.returnedRegistercount !1
  store <4 x i32> %arg, <4 x i32> addrspace(1)* %mem
  call void @lgc.cps.complete(), !continuation.registercount !1
  unreachable
}

!continuation.stackAddrspace = !{!2}

!0 = !{}
!1 = !{i32 0}
!2 = !{i32 21}
