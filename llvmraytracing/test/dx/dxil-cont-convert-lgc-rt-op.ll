; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function ClosestHit --version 3
; RUN: opt --verify-each -passes='dxil-cont-intrinsic-prepare,lint,dxil-cont-lgc-rt-op-converter,lint,remove-types-metadata' -S %s --lint-abort-on-error | FileCheck %s

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-p32:32:32-i1:32-i8:8-i16:16-i32:32-i64:32-f16:16-f32:32-f64:32-v8:8-v16:16-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%struct.DispatchSystemData = type { <3 x i32> }
%struct.SystemData = type { %struct.DispatchSystemData }

%dx.types.Handle = type { i8* }
%struct.RaytracingAccelerationStructure = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%struct.RayPayload = type { float, float, i32, i32 }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }

@"\01?Scene@@3URaytracingAccelerationStructure@@A" = external constant %dx.types.Handle, align 4
@"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4

; Function Attrs: nounwind
define void @ClosestHit(%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*) #0 !types !31 {
; CHECK-LABEL: define void @ClosestHit(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]]) #[[ATTR0:[0-9]+]] !cont.payload.type [[META19:![0-9]+]] !lgc.rt.shaderstage [[META20:![0-9]+]] {
; CHECK-NEXT:    [[TMP3:%.*]] = alloca [4 x <3 x float>], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = alloca [4 x <3 x float>], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = alloca [4 x <3 x float>], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = alloca [4 x <3 x float>], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @lgc.rt.shader.index()
; CHECK-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = call <3 x i32> @lgc.rt.dispatch.rays.index()
; CHECK-NEXT:    [[A:%.*]] = extractelement <3 x i32> [[TMP8]], i8 0
; CHECK-NEXT:    [[TMP9:%.*]] = call <3 x i32> @lgc.rt.dispatch.rays.dimensions()
; CHECK-NEXT:    [[B:%.*]] = extractelement <3 x i32> [[TMP9]], i8 0
; CHECK-NEXT:    [[TMP10:%.*]] = call <3 x float> @lgc.rt.world.ray.origin()
; CHECK-NEXT:    [[C:%.*]] = extractelement <3 x float> [[TMP10]], i8 0
; CHECK-NEXT:    [[TMP11:%.*]] = call <3 x float> @lgc.rt.world.ray.direction()
; CHECK-NEXT:    [[D:%.*]] = extractelement <3 x float> [[TMP11]], i8 0
; CHECK-NEXT:    [[E:%.*]] = call float @lgc.rt.ray.tmin()
; CHECK-NEXT:    [[F:%.*]] = call float @lgc.rt.ray.tcurrent()
; CHECK-NEXT:    [[G:%.*]] = call i32 @lgc.rt.ray.flags()
; CHECK-NEXT:    [[H:%.*]] = call i32 @lgc.rt.instance.index()
; CHECK-NEXT:    [[I:%.*]] = call i32 @lgc.rt.instance.id()
; CHECK-NEXT:    [[J:%.*]] = call i32 @lgc.rt.primitive.index()
; CHECK-NEXT:    [[TMP12:%.*]] = call <3 x float> @lgc.rt.object.ray.origin()
; CHECK-NEXT:    [[K:%.*]] = extractelement <3 x float> [[TMP12]], i8 0
; CHECK-NEXT:    [[TMP13:%.*]] = call <3 x float> @lgc.rt.object.ray.direction()
; CHECK-NEXT:    [[L:%.*]] = extractelement <3 x float> [[TMP13]], i8 0
; CHECK-NEXT:    [[TMP14:%.*]] = call [4 x <3 x float>] @lgc.rt.object.to.world()
; CHECK-NEXT:    store [4 x <3 x float>] [[TMP14]], ptr [[TMP4]], align 4
; CHECK-NEXT:    [[COL_GEP1:%.*]] = getelementptr [4 x <3 x float>], ptr [[TMP4]], i32 0, i8 0
; CHECK-NEXT:    [[COL_GEP_LOAD2:%.*]] = load <3 x float>, ptr [[COL_GEP1]], align 4
; CHECK-NEXT:    [[M:%.*]] = extractelement <3 x float> [[COL_GEP_LOAD2]], i32 0
; CHECK-NEXT:    [[TMP15:%.*]] = call [4 x <3 x float>] @lgc.rt.world.to.object()
; CHECK-NEXT:    store [4 x <3 x float>] [[TMP15]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[COL_GEP:%.*]] = getelementptr [4 x <3 x float>], ptr [[TMP3]], i32 0, i8 0
; CHECK-NEXT:    [[COL_GEP_LOAD:%.*]] = load <3 x float>, ptr [[COL_GEP]], align 4
; CHECK-NEXT:    [[N:%.*]] = extractelement <3 x float> [[COL_GEP_LOAD]], i32 0
; CHECK-NEXT:    [[TMP16:%.*]] = call [4 x <3 x float>] @lgc.rt.object.to.world()
; CHECK-NEXT:    store [4 x <3 x float>] [[TMP16]], ptr [[TMP5]], align 4
; CHECK-NEXT:    [[COL_GEP3:%.*]] = getelementptr [4 x <3 x float>], ptr [[TMP5]], i32 0, i8 3
; CHECK-NEXT:    [[COL_GEP_LOAD4:%.*]] = load <3 x float>, ptr [[COL_GEP3]], align 4
; CHECK-NEXT:    [[O:%.*]] = extractelement <3 x float> [[COL_GEP_LOAD4]], i32 0
; CHECK-NEXT:    [[TMP17:%.*]] = call [4 x <3 x float>] @lgc.rt.object.to.world()
; CHECK-NEXT:    store [4 x <3 x float>] [[TMP17]], ptr [[TMP6]], align 4
; CHECK-NEXT:    [[COL_GEP5:%.*]] = getelementptr [4 x <3 x float>], ptr [[TMP6]], i32 0, i8 3
; CHECK-NEXT:    [[COL_GEP_LOAD6:%.*]] = load <3 x float>, ptr [[COL_GEP5]], align 4
; CHECK-NEXT:    [[P:%.*]] = extractelement <3 x float> [[COL_GEP_LOAD6]], i32 2
; CHECK-NEXT:    [[Q:%.*]] = call i32 @lgc.rt.hit.kind()
; CHECK-NEXT:    ret void
;
  %a = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %b = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %c = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %d = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %e = call float @dx.op.rayTMin.f32(i32 153)  ; RayTMin()
  %f = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %g = call i32 @dx.op.rayFlags.i32(i32 144)  ; RayFlags()
  %h = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %i = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %j = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %k = call float @dx.op.objectRayOrigin.f32(i32 149, i8 0)  ; ObjectRayOrigin(col)
  %l = call float @dx.op.objectRayDirection.f32(i32 150, i8 0)  ; ObjectRayDirection(col)
  %m = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 0)  ; ObjectToWorld(row,col)
  %n = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 0)  ; WorldToObject(row,col)
  %o = call float @dx.op.objectToWorld.f32(i32 151, i32 0, i8 3)  ; ObjectToWorld(row,col)
  %p = call float @dx.op.objectToWorld.f32(i32 151, i32 2, i8 3)  ; ObjectToWorld(row,col)
  %q = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  ret void
}

declare i32 @dx.op.dispatchRaysDimensions.i32(i32, i8) #2
declare i32 @dx.op.dispatchRaysIndex.i32(i32, i8) #2
declare float @dx.op.objectRayDirection.f32(i32, i8) #2
declare float @dx.op.objectRayOrigin.f32(i32, i8) #2
declare float @dx.op.worldRayDirection.f32(i32, i8) #2
declare float @dx.op.worldRayOrigin.f32(i32, i8) #2
declare float @dx.op.rayTCurrent.f32(i32) #1
declare float @dx.op.rayTMin.f32(i32) #2
declare i32 @dx.op.hitKind.i32(i32) #2
declare i32 @dx.op.primitiveIndex.i32(i32) #2
declare i32 @dx.op.instanceID.i32(i32) #2
declare i32 @dx.op.instanceIndex.i32(i32) #2
declare i32 @dx.op.rayFlags.i32(i32) #2
declare float @dx.op.worldToObject.f32(i32, i32, i8) #2
declare float @dx.op.objectToWorld.f32(i32, i32, i8) #2

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!1}
!dx.shaderModel = !{!2}
!dx.resources = !{!3}
!dx.typeAnnotations = !{!10}
!dx.entryPoints = !{!18, !29}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{!"lib", i32 6, i32 6}
!3 = !{!4, !7, null, null}
!4 = !{!5}
!5 = !{i32 0, %struct.RaytracingAccelerationStructure* bitcast (%dx.types.Handle* @"\01?Scene@@3URaytracingAccelerationStructure@@A" to %struct.RaytracingAccelerationStructure*), !"Scene", i32 0, i32 0, i32 1, i32 16, i32 0, !6}
!6 = !{i32 0, i32 4}
!7 = !{!8}
!8 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" to %"class.RWTexture2D<vector<float, 4> >"*), !"RenderTarget", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 1, void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @ClosestHit, !11}
!11 = !{!12}
!12 = !{i32 1, !13, !13}
!13 = !{}
!18 = !{null, !"", null, !3, !19}
!19 = !{i32 0, i64 65536}
!22 = !{i32 0}
!29 = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @ClosestHit, !"ClosestHit", null, null, !30}
!30 = !{i32 8, i32 10, i32 5, !22}
!31 = !{!"function", !"void", !32, !33}
!32 = !{i32 0, %struct.RayPayload poison}
!33 = !{i32 0, %struct.BuiltInTriangleIntersectionAttributes poison}
