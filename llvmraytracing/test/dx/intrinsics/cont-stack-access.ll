; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: grep -v SKIP_GLOBAL_ADDRSPACE %s | opt --verify-each -passes='dxil-cont-post-process,lint,remove-types-metadata' -S --lint-abort-on-error | FileCheck %s -check-prefix=STACK_SCRATCH
; RUN: grep -v SKIP_SCRATCH_ADDRSPACE %s | opt --verify-each -passes='dxil-cont-post-process,lint,remove-types-metadata' -S --lint-abort-on-error | FileCheck %s -check-prefix=STACK_GLOBAL

declare i32 @_AmdContStackAlloc(i32 %size)
declare i32 @_AmdContStackLoadI32(i32 %addr)
declare i32 @_AmdContStackLoadLastUseI32(i32 %addr)
declare i32 @_AmdContStackStoreI32(i32 %addr, i32 %val)
declare i32 @_AmdContStackFree(i32 %size)
declare i32 @_cont_GetContinuationStackAddr() #0
declare i64 @_cont_GetContinuationStackGlobalMemBase() ; SKIP_GLOBAL_ADDRSPACE

%struct.DispatchSystemData = type { i32 }
%struct.type = type { <2 x float> }

%struct.Payload = type { [8 x i32] }

@debug_global = external global i32

define void @main(%struct.type %cont.state, i32 %return.addr, i32 %shader.index, %struct.DispatchSystemData %system.data) !lgc.rt.shaderstage !14 !lgc.cps !15 {
; STACK_SCRATCH-LABEL: define void @main(
; STACK_SCRATCH-SAME: [[STRUCT_TYPE:%.*]] [[CONT_STATE:%.*]], i32 [[CSPINIT:%.*]], i32 [[RETURN_ADDR:%.*]], i32 [[SHADER_INDEX:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[SYSTEM_DATA:%.*]]) !lgc.rt.shaderstage [[META5:![0-9]+]] !lgc.cps [[META8:![0-9]+]] !continuation.stacksize [[META9:![0-9]+]] {
; STACK_SCRATCH-NEXT:  entry:
; STACK_SCRATCH-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; STACK_SCRATCH-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; STACK_SCRATCH-NEXT:    [[TMP0:%.*]] = load i32, ptr [[CSP]], align 4
; STACK_SCRATCH-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], 12
; STACK_SCRATCH-NEXT:    store i32 [[TMP1]], ptr [[CSP]], align 4
; STACK_SCRATCH-NEXT:    [[PTR_FINAL:%.*]] = add i32 [[TMP0]], 4
; STACK_SCRATCH-NEXT:    [[TMP2:%.*]] = inttoptr i32 [[PTR_FINAL]] to ptr addrspace(21)
; STACK_SCRATCH-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP2]], i32 0
; STACK_SCRATCH-NEXT:    store i32 10, ptr addrspace(21) [[TMP3]], align 4
; STACK_SCRATCH-NEXT:    [[TMP4:%.*]] = inttoptr i32 [[PTR_FINAL]] to ptr addrspace(21)
; STACK_SCRATCH-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP4]], i32 0
; STACK_SCRATCH-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(21) [[TMP5]], align 4
; STACK_SCRATCH-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; STACK_SCRATCH-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], -12
; STACK_SCRATCH-NEXT:    store i32 [[TMP8]], ptr [[CSP]], align 4
; STACK_SCRATCH-NEXT:    store i32 [[TMP6]], ptr @debug_global, align 4
; STACK_SCRATCH-NEXT:    ret void
;
; STACK_GLOBAL-LABEL: define void @main(
; STACK_GLOBAL-SAME: [[STRUCT_TYPE:%.*]] [[CONT_STATE:%.*]], i32 [[CSPINIT:%.*]], i32 [[RETURN_ADDR:%.*]], i32 [[SHADER_INDEX:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[SYSTEM_DATA:%.*]]) !lgc.rt.shaderstage [[META5:![0-9]+]] !lgc.cps [[META8:![0-9]+]] !continuation.stacksize [[META9:![0-9]+]] {
; STACK_GLOBAL-NEXT:  entry:
; STACK_GLOBAL-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; STACK_GLOBAL-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; STACK_GLOBAL-NEXT:    [[TMP0:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; STACK_GLOBAL-NEXT:    [[TMP1:%.*]] = inttoptr i64 [[TMP0]] to ptr addrspace(22)
; STACK_GLOBAL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[CSP]], align 4
; STACK_GLOBAL-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 12
; STACK_GLOBAL-NEXT:    store i32 [[TMP3]], ptr [[CSP]], align 4
; STACK_GLOBAL-NEXT:    [[PTR_FINAL:%.*]] = add i32 [[TMP2]], 4
; STACK_GLOBAL-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr addrspace(22) [[TMP1]], i32 [[PTR_FINAL]]
; STACK_GLOBAL-NEXT:    store i32 10, ptr addrspace(22) [[TMP4]], align 4
; STACK_GLOBAL-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr addrspace(22) [[TMP1]], i32 [[PTR_FINAL]]
; STACK_GLOBAL-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(22) [[TMP5]], align 4
; STACK_GLOBAL-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr addrspace(22) [[TMP1]], i32 [[PTR_FINAL]]
; STACK_GLOBAL-NEXT:    [[TMP8:%.*]] = load i32, ptr addrspace(22) [[TMP7]], align 4, !amdgpu.last.use [[META10:![0-9]+]]
; STACK_GLOBAL-NEXT:    [[TMP9:%.*]] = load i32, ptr [[CSP]], align 4
; STACK_GLOBAL-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], -12
; STACK_GLOBAL-NEXT:    store i32 [[TMP10]], ptr [[CSP]], align 4
; STACK_GLOBAL-NEXT:    store i32 [[TMP6]], ptr @debug_global, align 4
; STACK_GLOBAL-NEXT:    ret void
;
entry:
  %ptr = call i32 @_AmdContStackAlloc(i32 12)
  %ptr.final = add i32 %ptr, 4
  call void @_AmdContStackStoreI32(i32 %ptr.final, i32 10)
  %val = call i32 @_AmdContStackLoadI32(i32 %ptr.final)
  %val.2 = call i32 @_AmdContStackLoadLastUseI32(i32 %ptr.final)  ; SKIP_GLOBAL_ADDRSPACE
  call void @_AmdContStackFree(i32 12)
  store i32 %val, ptr @debug_global
  ret void
}

!dx.entryPoints = !{!1, !5}
!continuation.stackAddrspace = !{!16} ; SKIP_GLOBAL_ADDRSPACE
!continuation.stackAddrspace = !{!17} ; SKIP_SCRATCH_ADDRSPACE

!1 = !{null, !"", null, !3, !2}
!2 = !{i32 0, i64 65536}
!3 = !{!4, null, null, null}
!4 = !{!5}
!5 = !{void ()* @main, !"main", null, null, !6}
!6 = !{i32 8, i32 7, i32 6, i32 16, i32 7, i32 8, i32 5, !7}
!7 = !{i32 0}
!9 = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !7}
!10 = !{!"function", !"void", !11, !11}
!11 = !{i32 0, %struct.Payload poison}
!12 = !{!"function", i32 poison, !13, !14}
!13 = !{i32 0, %struct.DispatchSystemData poison}
!14 = !{i32 0}
!15 =!{i32 1}
!16 = !{i32 22}
!17 = !{i32 21}
