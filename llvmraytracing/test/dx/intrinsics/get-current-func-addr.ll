; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: grep -v lgc.cps.module %s | opt --verify-each -passes='lower-raytracing-pipeline,lint' -S --lint-abort-on-error | FileCheck --check-prefix=CHECK %s
; RUN: opt --verify-each -passes='lower-raytracing-pipeline,lint' -S %s --lint-abort-on-error | FileCheck --check-prefix=CHECK-CPS %s

%struct.DispatchSystemData = type { i32 }

declare void @Use(i64)
declare i64 @_AmdGetCurrentFuncAddr()
declare !types !2 i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)

define void @MyRayGen() {
; CHECK-LABEL: define void @MyRayGen() {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @MyRayGen)
; CHECK-NEXT:    call void @Use(i64 [[TMP0]])
; CHECK-NEXT:    ret void
;
; CHECK-CPS-LABEL: define void @MyRayGen() {
; CHECK-CPS-NEXT:  AllocaSpillBB:
; CHECK-CPS-NEXT:    [[TMP0:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @MyRayGen)
; CHECK-CPS-NEXT:    call void @Use(i64 [[TMP0]])
; CHECK-CPS-NEXT:    ret void
;
AllocaSpillBB:
  %val = call i64 @_AmdGetCurrentFuncAddr()
  call void @Use(i64 %val)
  ret void
}

define void @MyRayGen.resume.0() {
; CHECK-LABEL: define void @MyRayGen.resume.0() {
; CHECK-NEXT:  entryresume.0:
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @MyRayGen.resume.0)
; CHECK-NEXT:    call void @Use(i64 [[TMP0]])
; CHECK-NEXT:    ret void
;
; CHECK-CPS-LABEL: define void @MyRayGen.resume.0() {
; CHECK-CPS-NEXT:  entryresume.0:
; CHECK-CPS-NEXT:    [[TMP0:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @MyRayGen.resume.0)
; CHECK-CPS-NEXT:    call void @Use(i64 [[TMP0]])
; CHECK-CPS-NEXT:    ret void
;
entryresume.0:
  %val = call i64 @_AmdGetCurrentFuncAddr()
  call void @Use(i64 %val)
  ret void
}

!lgc.cps.module = !{}
!1 = !{i32 0, %struct.DispatchSystemData poison}
!2 = !{!"function", i32 poison, !1}
