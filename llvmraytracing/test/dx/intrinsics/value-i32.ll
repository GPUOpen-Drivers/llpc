; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt --verify-each -passes='dxil-cont-post-process,lint' -S %s --lint-abort-on-error | FileCheck %s

%struct.Payload = type { float, i32, i64, i32 }

declare !pointeetys !0 i32 @_AmdValueI32Count(%struct.Payload*)

declare !pointeetys !0 i32 @_AmdValueGetI32(%struct.Payload*, i32)

declare !pointeetys !0 void @_AmdValueSetI32(%struct.Payload*, i32, i32)

define i32 @count(%struct.Payload* %pl) !pointeetys !0 {
; CHECK-LABEL: define i32 @count
; CHECK-SAME: (ptr [[PL:%.*]]) !pointeetys [[META1:![0-9]+]] {
; CHECK-NEXT:    ret i32 5
;
  %val = call i32 @_AmdValueI32Count(%struct.Payload* %pl)
  ret i32 %val
}

define i32 @get(%struct.Payload* %pl) !pointeetys !0 {
; CHECK-LABEL: define i32 @get
; CHECK-SAME: (ptr [[PL:%.*]]) !pointeetys [[META1]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i32, ptr [[PL]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 4
; CHECK-NEXT:    ret i32 [[TMP2]]
;
  %val = call i32 @_AmdValueGetI32(%struct.Payload* %pl, i32 2)
  ret i32 %val
}

define void @set(%struct.Payload* %pl, i32 %val) !pointeetys !0 {
; CHECK-LABEL: define void @set
; CHECK-SAME: (ptr [[PL:%.*]], i32 [[VAL:%.*]]) !pointeetys [[META3:![0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i32, ptr [[PL]], i32 2
; CHECK-NEXT:    store i32 [[VAL]], ptr [[TMP1]], align 4
; CHECK-NEXT:    ret void
;
  call void @_AmdValueSetI32(%struct.Payload* %pl, i32 2, i32 %val)
  ret void
}

!continuation.stackAddrspace = !{!5}

!0 = !{%struct.Payload poison}
!5 = !{i32 21}
