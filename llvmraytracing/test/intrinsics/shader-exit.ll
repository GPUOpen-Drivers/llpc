; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 5
; RUN: opt --verify-each -passes="dxil-cont-prepare-gpurt-library,lint<abort-on-error>,dxil-cont-lgc-rt-op-converter,lint<abort-on-error>,lower-raytracing-pipeline,lint<abort-on-error>,continuations-lint,remove-types-metadata" -S %s | FileCheck %s

target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%struct.SystemData = type { %struct.DispatchSystemData }
%struct.DispatchSystemData = type { <3 x i32> }
%struct.MyPayload = type { i32 }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%struct.TraversalData = type { %struct.SystemData, i32 }
%struct.HitData = type { float, i32 }
%struct.HitObject = type { i64, i32, <3 x float>, <3 x float>, float, float }
declare !pointeetys !6 void @_cont_DispatchRaysIndex3(%struct.DispatchSystemData*)
declare !pointeetys !5 %struct.BuiltInTriangleIntersectionAttributes @_cont_GetTriangleHitAttributes(%struct.SystemData*) #3
declare !pointeetys !11 i1 @_cont_ReportHit(%struct.TraversalData* %data, float %t, i32 %hitKind)
declare !pointeetys !12 i32 @_cont_HitKind(%struct.SystemData* nocapture readnone, %struct.HitData*) #2
declare !pointeetys !13 %struct.SystemData @_cont_GlobalHitObject(%struct.SystemData*)

define void @_cont_TraceRay(%struct.DispatchSystemData* %data, i64 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, float %6, float %7, float %8, float %9, float %10, float %11, float %12, float %13) #0 !pointeetys !10 {
  ret void
}

declare !pointeetys !7 void @_cont_ShaderExit(%struct.DispatchSystemData* %data) #0
declare !pointeetys !8 void @"_cont_ShaderExit@SystemData"(%struct.SystemData* %data) #0

define void @ClosestHit(%struct.MyPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture %attr) !pointeetys !9 {
  ret void
}

; Function Attrs: nounwind
define void @Main() #0 {
  ret void
}

!dx.entryPoints = !{!0, !3}

!0 = !{void (%struct.MyPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @ClosestHit, !"ClosestHit", null, null, !1}
!1 = !{i32 8, i32 10, i32 6, i32 4, i32 7, i32 8, i32 5, !2}
!2 = !{i32 0}
!3 = !{void ()* @Main, !"Main", null, null, !4}
!4 = !{i32 8, i32 7, i32 5, !5}
!5 = !{%struct.SystemData poison}
!6 = !{%struct.DispatchSystemData poison}
!7 = !{i32 0, %struct.DispatchSystemData poison}
!8 = !{i32 0, %struct.SystemData poison}
!9 = !{null, %struct.MyPayload poison, %struct.BuiltInTriangleIntersectionAttributes poison}
!10 = !{i32 0, %struct.MyPayload poison}
!11 = !{%struct.TraversalData poison}
!12 = !{null, %struct.SystemData poison, %struct.HitData poison}
!13 = !{%struct.SystemData poison}
; CHECK-LABEL: define void @ClosestHit(
; CHECK-SAME: i32 [[SHADERINDEX:%.*]], i32 [[RETURNADDR:%.*]], [[STRUCT_SYSTEMDATA:%.*]] [[SYSTEM_DATA:%.*]], {} [[HIT_ATTRS:%.*]], [9 x i32] [[PADDING:%.*]], [1 x i32] [[PAYLOAD:%.*]]) !continuation [[META10:![0-9]+]] !lgc.rt.shaderstage [[META11:![0-9]+]] !lgc.cps [[META12:![0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]], align 8
; CHECK-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_SYSTEMDATA]], align 16
; CHECK-NEXT:    [[PAYLOAD_SERIALIZATION_ALLOCA:%.*]] = alloca [7 x i32], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = alloca [[STRUCT_MYPAYLOAD:%.*]], align 8
; CHECK-NEXT:    [[HITATTRS:%.*]] = alloca [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES]], align 8
; CHECK-NEXT:    store [1 x i32] [[PAYLOAD]], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-NEXT:    store [[STRUCT_SYSTEMDATA]] [[SYSTEM_DATA]], ptr [[SYSTEM_DATA_ALLOCA]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_MYPAYLOAD]], ptr [[TMP2]], i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = call [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES]] @[[_CONT_GETTRIANGLEHITATTRIBUTES:[a-zA-Z0-9_$\"\\.-]*[a-zA-Z_$\"\\.-][a-zA-Z0-9_$\"\\.-]*]](ptr [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    store [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES]] [[TMP5]], ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP1]], align 4
; CHECK-NEXT:    store i32 [[TMP6]], ptr [[HITATTRS]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[HITATTRS]], i32 1
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[TMP8]], align 4
; CHECK-NEXT:    store i32 [[TMP9]], ptr [[TMP7]], align 4
; CHECK-NEXT:    call void @lgc.ilcps.setLocalRootIndex(i32 [[SHADERINDEX]])
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_MYPAYLOAD]], ptr [[TMP2]], i32 0
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP11]], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_SYSTEMDATA]], ptr [[SYSTEM_DATA_ALLOCA]], i32 0, i32 0
; CHECK-NEXT:    [[TMP13:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], ptr [[TMP12]], align 16
; CHECK-NEXT:    call void @"_cont_ShaderExit@SystemData"(ptr [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    [[TMP14:%.*]] = load [1 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-NEXT:    call void (...) @lgc.cps.jump(i32 [[RETURNADDR]], i32 6, i32 poison, i32 poison, i32 poison, [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP13]], {} poison, [9 x i32] poison, [1 x i32] [[TMP14]]), !continuation.registercount [[META7:![0-9]+]]
; CHECK-NEXT:    unreachable
;
;
; CHECK-LABEL: define void @Main(
; CHECK-SAME: i32 [[SHADERINDEX:%.*]], i32 [[RETURNADDR:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP0:%.*]], {} [[TMP1:%.*]], [0 x i32] [[TMP2:%.*]], [0 x i32] [[TMP3:%.*]]) !continuation [[META13:![0-9]+]] !lgc.rt.shaderstage [[META2:![0-9]+]] !lgc.cps [[META7]] {
; CHECK-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA]], align 16
; CHECK-NEXT:    [[PAYLOAD_SERIALIZATION_ALLOCA:%.*]] = alloca [0 x i32], align 4
; CHECK-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP0]], ptr [[SYSTEM_DATA_ALLOCA]], align 16
; CHECK-NEXT:    call void @lgc.ilcps.setLocalRootIndex(i32 0)
; CHECK-NEXT:    call void @_cont_ShaderExit(ptr [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    call void @lgc.cps.complete()
; CHECK-NEXT:    unreachable
;
;.
; CHECK: [[META2]] = !{i32 0}
; CHECK: [[META7]] = !{i32 1}
; CHECK: [[META10]] = !{ptr @ClosestHit}
; CHECK: [[META11]] = !{i32 3}
; CHECK: [[META12]] = !{i32 2}
; CHECK: [[META13]] = !{ptr @Main}
;.
