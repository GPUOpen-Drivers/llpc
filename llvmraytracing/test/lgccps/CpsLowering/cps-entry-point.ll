; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -o - -passes='lower-await,coro-early,lgc-coro-split,coro-cleanup,cleanup-continuations' %s -S | FileCheck --check-prefixes=CHECK %s
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

declare void @lgc.cps.jump(...) #0

declare void @lgc.cps.set.vsp(ptr addrspace(32)) #1

declare ptr addrspace(32) @lgc.cps.get.vsp() #2

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !3 !lgc.rt.shaderstage !3 {
; CHECK-LABEL: define dllexport spir_func void @lgc.shader.CS.main(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] !lgc.shaderstage [[META3:![0-9]+]] !lgc.rt.shaderstage [[META3]] {
; CHECK-NEXT:  [[_ENTRY:.*:]]
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DESC:%.*]] = call <4 x i32> @lgc.load.user.data__v4i32(i32 0)
; CHECK-NEXT:    [[PTR:%.*]] = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> [[DESC]], i1 false)
; CHECK-NEXT:    [[P0:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 0
; CHECK-NEXT:    [[I_VSP:%.*]] = load i32, ptr addrspace(7) [[P0]], align 4
; CHECK-NEXT:    store i32 [[I_VSP]], ptr [[CSP]], align 4
; CHECK-NEXT:    [[P1:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 1
; CHECK-NEXT:    [[CR:%.*]] = load i32, ptr addrspace(7) [[P1]], align 4
; CHECK-NEXT:    [[P2:%.*]] = getelementptr i32, ptr addrspace(7) [[PTR]], i32 2
; CHECK-NEXT:    [[ARG:%.*]] = load i32, ptr addrspace(7) [[P2]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[CSP]], align 4
; CHECK-NEXT:    call void (...) @lgc.cps.jump(i32 [[CR]], i32 1, i32 [[TMP1]], i32 poison, i32 [[ARG]], i32 [[TMP0]])
; CHECK-NEXT:    unreachable
;
.entry:
  %desc = call <4 x i32> @lgc.load.user.data__v4i32(i32 0)
  %ptr = call ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32> %desc, i1 false)
  %p0 = getelementptr i32, ptr addrspace(7) %ptr, i32 0
  %i_vsp = load i32, ptr addrspace(7) %p0, align 4
  %vsp = inttoptr i32 %i_vsp to ptr addrspace(32)
  call void @lgc.cps.set.vsp(ptr addrspace(32) %vsp)

  %p1 = getelementptr i32, ptr addrspace(7) %ptr, i32 1
  %cr = load i32, ptr addrspace(7) %p1, align 4

  %p2 = getelementptr i32, ptr addrspace(7) %ptr, i32 2
  %arg = load i32, ptr addrspace(7) %p2, align 4

  %p32 = call ptr addrspace(32) @lgc.cps.get.vsp()

  call void (...) @lgc.cps.jump(i32 %cr, i32 1, i32 poison, i32 poison, i32 %arg, ptr addrspace(32) %p32)
  unreachable
}

declare <4 x i32> @lgc.load.user.data__v4i32(i32) #4

declare ptr addrspace(7) @lgc.buffer.desc.to.ptr(<4 x i32>, i1) #5

attributes #0 = { nounwind }
attributes #1 = { nounwind willreturn memory(inaccessiblemem: write) }
attributes #2 = { nounwind willreturn memory(inaccessiblemem: read) }
attributes #4 = { nounwind memory(none) }
attributes #5 = { nounwind willreturn memory(none) }

!lgc.user.data.nodes = !{!1}
!llpc.compute.mode = !{!2}
!continuation.stackAddrspace = !{!4}

!1 = !{!"DescriptorBuffer", i32 6, i32 6, i32 0, i32 4, i64 0, i32 0, i32 4}
!2 = !{i32 8, i32 4, i32 1, i32 0, i32 0, i32 1}
!3 = !{i32 7}
!4 = !{i32 5}
;.
; CHECK: [[META3]] = !{i32 7}
;.
