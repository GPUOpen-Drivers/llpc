; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt --verify-each -passes='lower-raytracing-pipeline,lint' -S %s 2> %t0.stderr | FileCheck -check-prefix=LOWERRAYTRACINGPIPELINE-CPS %s
; RUN: count 0 < %t0.stderr

%struct.AnyHitTraversalData = type { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } }
%struct.DispatchSystemData = type { i32 }

; Need _cont_ReportHit to get system data type
declare  !types !6 i1 @_cont_ReportHit(%struct.AnyHitTraversalData* %data, float %t, i32 %hitKind)

declare !types !10 i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)

declare i64 @_AmdGetCurrentFuncAddr()

define dso_local spir_func { { float, i32, i32, i32, i32 }, <2 x float>, i32 } @_cont_Traversal(ptr addrspace(5) %0) local_unnamed_addr !lgc.shaderstage !0 !types !1 !lgc.rt.shaderstage !3 !lgc.rt.attribute.size !4 {
; LOWERRAYTRACINGPIPELINE-CPS-LABEL: define dso_local spir_func void @_cont_Traversal(
; LOWERRAYTRACINGPIPELINE-CPS-SAME: {} [[CONT_STATE:%.*]], i32 [[RETURN_ADDR:%.*]], i32 [[SHADER_INDEX:%.*]], { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[SYSTEM_DATA:%.*]], {} [[HIT_ATTRS:%.*]], [7 x i32] [[PADDING:%.*]], [8 x i32] [[PAYLOAD:%.*]]) local_unnamed_addr !lgc.shaderstage [[META4:![0-9]+]] !lgc.rt.shaderstage [[META5:![0-9]+]] !lgc.rt.attribute.size [[META6:![0-9]+]] !lgc.cps [[META7:![0-9]+]] !continuation [[META8:![0-9]+]] {
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:  .entry:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, align 16, addrspace(5)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    store { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[SYSTEM_DATA]], ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 93, i32 17, i32 0, i32 0)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP2:%.*]] = load <3 x i32>, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP3:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 0, i32 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP4:%.*]] = load i32, ptr addrspace(5) [[TMP3]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP5:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP6:%.*]] = load i64, ptr addrspace(5) [[TMP5]], align 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP7:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP8:%.*]] = load i32, ptr addrspace(5) [[TMP7]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP9:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP10:%.*]] = load i32, ptr addrspace(5) [[TMP9]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFR539:%.*]] = freeze i32 [[TMP10]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP11:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP12:%.*]] = load <3 x float>, ptr addrspace(5) [[TMP11]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP13:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP14:%.*]] = load <3 x float>, ptr addrspace(5) [[TMP13]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP15:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP16:%.*]] = load float, ptr addrspace(5) [[TMP15]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP17:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 1, i32 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP18:%.*]] = load float, ptr addrspace(5) [[TMP17]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP19:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP20:%.*]] = load float, ptr addrspace(5) [[TMP19]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP21:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 0, i32 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP22:%.*]] = load i32, ptr addrspace(5) [[TMP21]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFR:%.*]] = freeze i32 [[TMP22]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP23:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 0, i32 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP24:%.*]] = load i32, ptr addrspace(5) [[TMP23]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP25:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 0, i32 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP26:%.*]] = load i32, ptr addrspace(5) [[TMP25]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP27:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 0, i32 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP28:%.*]] = load i32, ptr addrspace(5) [[TMP27]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP29:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP30:%.*]] = load <2 x float>, ptr addrspace(5) [[TMP29]], align 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP31:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP32:%.*]] = load i32, ptr addrspace(5) [[TMP31]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP33:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP34:%.*]] = load i32, ptr addrspace(5) [[TMP33]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP35:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP36:%.*]] = load i32, ptr addrspace(5) [[TMP35]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP37:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP38:%.*]] = load i32, ptr addrspace(5) [[TMP37]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP39:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP40:%.*]] = load i32, ptr addrspace(5) [[TMP39]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP41:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 7
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP42:%.*]] = load i32, ptr addrspace(5) [[TMP41]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP43:%.*]] = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 0, i32 2, i32 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP44:%.*]] = load i64, ptr addrspace(5) [[TMP43]], align 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP45:%.*]] = icmp ugt i32 [[DOTFR]], -3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br i1 [[TMP45]], label [[TMP46:%.*]], label [[TMP67:%.*]]
; LOWERRAYTRACINGPIPELINE-CPS:       46:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP47:%.*]] = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) [[TMP0]], i32 0, i32 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP48:%.*]] = load i32, ptr addrspace(7) [[TMP47]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP49:%.*]] = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) [[TMP0]], i32 0, i32 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP50:%.*]] = load i32, ptr addrspace(7) [[TMP49]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP51:%.*]] = zext i32 [[TMP50]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP52:%.*]] = shl nuw i64 [[TMP51]], 32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP53:%.*]] = zext i32 [[TMP48]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP54:%.*]] = or i64 [[TMP52]], [[TMP53]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFR541:%.*]] = freeze i64 [[TMP54]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP55:%.*]] = icmp eq i64 [[DOTFR541]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br i1 [[TMP55]], label [[DOTEXIT2:%.*]], label [[TMP56:%.*]]
; LOWERRAYTRACINGPIPELINE-CPS:       56:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP57:%.*]] = lshr i32 [[TMP8]], 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP58:%.*]] = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) [[TMP0]], i32 0, i32 7
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP59:%.*]] = load i32, ptr addrspace(7) [[TMP58]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP60:%.*]] = mul i32 [[TMP59]], [[TMP57]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP61:%.*]] = zext i32 [[TMP60]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP62:%.*]] = add i64 [[DOTFR541]], [[TMP61]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP63:%.*]] = inttoptr i64 [[TMP62]] to ptr addrspace(4)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP64:%.*]] = load i32, ptr addrspace(4) [[TMP63]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP65:%.*]] = freeze i32 [[TMP64]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br label [[DOTEXIT2]]
; LOWERRAYTRACINGPIPELINE-CPS:       .exit2:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOT0:%.*]] = phi i32 [ [[TMP57]], [[TMP56]] ], [ undef, [[TMP46]] ]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0128_0_EXTRACT_TRUNC:%.*]] = phi i32 [ [[TMP65]], [[TMP56]] ], [ 0, [[TMP46]] ]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTNOT542:%.*]] = icmp eq i32 [[DOTSROA_0128_0_EXTRACT_TRUNC]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br i1 [[DOTNOT542]], label [[TMP106:%.*]], label [[TMP66:%.*]]
; LOWERRAYTRACINGPIPELINE-CPS:       66:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0130_0_EXTRACT_TRUNC:%.*]] = trunc i64 [[TMP44]] to i32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_0_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } poison, <3 x i32> [[TMP2]], 0, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_0_0_INSERT]], i32 [[DOT0]], 0, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_0_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_0_1_INSERT]], i64 [[TMP6]], 1, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_1_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_0_INSERT]], i32 [[TMP8]], 1, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_2_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_1_INSERT]], i32 [[DOTFR539]], 1, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_3_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_2_INSERT]], <3 x float> [[TMP12]], 1, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_4_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_3_INSERT]], <3 x float> [[TMP14]], 1, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_5_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_4_INSERT]], float [[TMP16]], 1, 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_6_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_5_INSERT]], float [[TMP18]], 1, 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_0_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_6_INSERT]], float [[TMP20]], 2, 0, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_1_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_0_INSERT]], i32 [[DOTFR]], 2, 0, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_2_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_1_INSERT]], i32 [[TMP24]], 2, 0, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_3_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_2_INSERT]], i32 [[TMP26]], 2, 0, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_4_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_3_INSERT]], i32 [[TMP28]], 2, 0, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_1_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_4_INSERT]], <2 x float> [[TMP30]], 2, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_2_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_1_INSERT]], i32 [[TMP32]], 2, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_3_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_2_INSERT]], i32 [[TMP34]], 2, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_4_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_3_INSERT]], i32 [[TMP36]], 2, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_5_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_4_INSERT]], i32 [[TMP38]], 2, 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_6_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_5_INSERT]], i32 [[TMP40]], 2, 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_7_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_6_INSERT]], i32 [[TMP42]], 2, 7
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_8_INSERT:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_7_INSERT]], i64 [[TMP44]], 2, 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    call void (...) @lgc.cps.jump(i32 [[DOTSROA_0128_0_EXTRACT_TRUNC]], i32 -1, {} poison, i32 [[DOTSROA_0130_0_EXTRACT_TRUNC]], i32 [[DOT0]], { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_8_INSERT]], [7 x i32] poison, [8 x i32] [[PAYLOAD]])
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    unreachable
; LOWERRAYTRACINGPIPELINE-CPS:       67:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP68:%.*]] = shl i32 [[DOTFR]], 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP69:%.*]] = and i32 [[TMP68]], -64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP70:%.*]] = zext i32 [[TMP69]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP71:%.*]] = add i64 [[TMP6]], [[TMP70]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP72:%.*]] = add i64 [[TMP71]], 48
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP73:%.*]] = inttoptr i64 [[TMP72]] to ptr addrspace(1)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP74:%.*]] = load <4 x i32>, ptr addrspace(1) [[TMP73]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOT4_VEC_EXTRACT452:%.*]] = extractelement <4 x i32> [[TMP74]], i64 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP75:%.*]] = and i32 [[TMP26]], 16777215
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP76:%.*]] = and i32 [[DOT4_VEC_EXTRACT452]], 16777215
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP77:%.*]] = lshr i32 [[TMP8]], 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP78:%.*]] = and i32 [[TMP77]], 15
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP79:%.*]] = lshr i32 [[TMP8]], 12
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP80:%.*]] = and i32 [[TMP79]], 15
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP81:%.*]] = mul nuw nsw i32 [[TMP80]], [[TMP75]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP82:%.*]] = add nuw nsw i32 [[TMP78]], [[TMP81]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP83:%.*]] = add nuw nsw i32 [[TMP82]], [[TMP76]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP84:%.*]] = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) [[TMP0]], i32 0, i32 9
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP85:%.*]] = load i32, ptr addrspace(7) [[TMP84]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP86:%.*]] = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) [[TMP0]], i32 0, i32 10
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP87:%.*]] = load i32, ptr addrspace(7) [[TMP86]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP88:%.*]] = zext i32 [[TMP87]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP89:%.*]] = shl nuw i64 [[TMP88]], 32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP90:%.*]] = zext i32 [[TMP85]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP91:%.*]] = or i64 [[TMP89]], [[TMP90]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFR537:%.*]] = freeze i64 [[TMP91]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTNOT:%.*]] = icmp eq i64 [[DOTFR537]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br i1 [[DOTNOT]], label [[DOTEXIT5:%.*]], label [[TMP92:%.*]]
; LOWERRAYTRACINGPIPELINE-CPS:       92:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP93:%.*]] = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) [[TMP0]], i32 0, i32 11
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP94:%.*]] = load i32, ptr addrspace(7) [[TMP93]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP95:%.*]] = mul i32 [[TMP94]], [[TMP83]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP96:%.*]] = zext i32 [[TMP95]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP97:%.*]] = add i64 [[DOTFR537]], [[TMP96]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP98:%.*]] = inttoptr i64 [[TMP97]] to ptr addrspace(1)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP99:%.*]] = load <4 x i32>, ptr addrspace(1) [[TMP98]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP100:%.*]] = shufflevector <4 x i32> [[TMP99]], <4 x i32> poison, <2 x i32> <i32 0, i32 1>
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP101:%.*]] = freeze <2 x i32> [[TMP100]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br label [[DOTEXIT5]]
; LOWERRAYTRACINGPIPELINE-CPS:       .exit5:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0501_0:%.*]] = phi <2 x i32> [ [[TMP101]], [[TMP92]] ], [ zeroinitializer, [[TMP67]] ]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP102:%.*]] = and i32 [[DOTFR539]], 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP103:%.*]] = icmp ne i32 [[TMP102]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0150_0_VEC_EXTRACT:%.*]] = extractelement <2 x i32> [[DOTSROA_0501_0]], i64 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTNOT540:%.*]] = icmp eq i32 [[DOTSROA_0150_0_VEC_EXTRACT]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[OR_COND:%.*]] = or i1 [[TMP103]], [[DOTNOT540]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br i1 [[OR_COND]], label [[TMP106]], label [[TMP104:%.*]]
; LOWERRAYTRACINGPIPELINE-CPS:       104:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP105:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @_cont_Traversal)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0320_0_EXTRACT_TRUNC:%.*]] = trunc i64 [[TMP105]] to i32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_0_INSERT322:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } poison, <3 x i32> [[TMP2]], 0, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_INSERT323:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_0_0_INSERT322]], i32 [[TMP83]], 0, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_0_INSERT324:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_0_1_INSERT323]], i64 [[TMP6]], 1, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_1_INSERT325:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_0_INSERT324]], i32 [[TMP8]], 1, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_2_INSERT326:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_1_INSERT325]], i32 [[DOTFR539]], 1, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_3_INSERT327:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_2_INSERT326]], <3 x float> [[TMP12]], 1, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_4_INSERT328:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_3_INSERT327]], <3 x float> [[TMP14]], 1, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_5_INSERT329:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_4_INSERT328]], float [[TMP16]], 1, 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_6_INSERT330:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_5_INSERT329]], float [[TMP18]], 1, 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_0_INSERT331:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_1_6_INSERT330]], float [[TMP20]], 2, 0, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_1_INSERT332:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_0_INSERT331]], i32 [[DOTFR]], 2, 0, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_2_INSERT333:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_1_INSERT332]], i32 [[TMP24]], 2, 0, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_3_INSERT334:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_2_INSERT333]], i32 [[TMP26]], 2, 0, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_0_4_INSERT335:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_3_INSERT334]], i32 [[TMP28]], 2, 0, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_1_INSERT336:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_0_4_INSERT335]], <2 x float> [[TMP30]], 2, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_2_INSERT337:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_1_INSERT336]], i32 [[TMP32]], 2, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_3_INSERT338:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_2_INSERT337]], i32 [[TMP34]], 2, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_4_INSERT339:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_3_INSERT338]], i32 [[TMP36]], 2, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_5_INSERT340:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_4_INSERT339]], i32 [[TMP38]], 2, 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_6_INSERT341:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_5_INSERT340]], i32 [[TMP40]], 2, 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_7_INSERT342:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_6_INSERT341]], i32 [[TMP42]], 2, 7
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_2_8_INSERT343:%.*]] = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_7_INSERT342]], i64 [[TMP44]], 2, 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    call void (...) @lgc.cps.jump(i32 [[DOTSROA_0150_0_VEC_EXTRACT]], i32 -1, {} poison, i32 [[DOTSROA_0320_0_EXTRACT_TRUNC]], i32 [[TMP83]], { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[DOTFCA_2_8_INSERT343]], [7 x i32] poison, [8 x i32] [[PAYLOAD]])
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    unreachable
; LOWERRAYTRACINGPIPELINE-CPS:       106:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_7_0:%.*]] = phi i32 [ [[TMP4]], [[DOTEXIT2]] ], [ [[TMP83]], [[DOTEXIT5]] ]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0373_0_EXTRACT_TRUNC:%.*]] = trunc i64 [[TMP44]] to i32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_INSERT:%.*]] = insertvalue { <3 x i32>, i32 } poison, <3 x i32> [[TMP2]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_INSERT:%.*]] = insertvalue { <3 x i32>, i32 } [[DOTFCA_0_INSERT]], i32 [[DOTSROA_7_0]], 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    call void (...) @lgc.cps.jump(i32 [[DOTSROA_0373_0_EXTRACT_TRUNC]], i32 -1, {} poison, i32 poison, i32 [[DOTSROA_7_0]], { <3 x i32>, i32 } [[DOTFCA_1_INSERT]], [34 x i32] poison, [8 x i32] [[PAYLOAD]])
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    unreachable
;
.entry:
  %1 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 93, i32 17, i32 0, i32 0)
  %2 = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) %1)
  %3 = load <3 x i32>, ptr addrspace(5) %0, align 16
  %4 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 0, i32 1
  %5 = load i32, ptr addrspace(5) %4, align 4
  %6 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 0
  %7 = load i64, ptr addrspace(5) %6, align 8
  %8 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 1
  %9 = load i32, ptr addrspace(5) %8, align 4
  %10 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 2
  %11 = load i32, ptr addrspace(5) %10, align 4
  %.fr539 = freeze i32 %11
  %12 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 3
  %13 = load <3 x float>, ptr addrspace(5) %12, align 16
  %14 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 4
  %15 = load <3 x float>, ptr addrspace(5) %14, align 16
  %16 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 5
  %17 = load float, ptr addrspace(5) %16, align 4
  %18 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 1, i32 6
  %19 = load float, ptr addrspace(5) %18, align 4
  %20 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 0, i32 0
  %21 = load float, ptr addrspace(5) %20, align 4
  %22 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 0, i32 1
  %23 = load i32, ptr addrspace(5) %22, align 4
  %.fr = freeze i32 %23
  %24 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 0, i32 2
  %25 = load i32, ptr addrspace(5) %24, align 4
  %26 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 0, i32 3
  %27 = load i32, ptr addrspace(5) %26, align 4
  %28 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 0, i32 4
  %29 = load i32, ptr addrspace(5) %28, align 4
  %30 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 1
  %31 = load <2 x float>, ptr addrspace(5) %30, align 8
  %32 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 2
  %33 = load i32, ptr addrspace(5) %32, align 4
  %34 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 3
  %35 = load i32, ptr addrspace(5) %34, align 4
  %36 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 4
  %37 = load i32, ptr addrspace(5) %36, align 4
  %38 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 5
  %39 = load i32, ptr addrspace(5) %38, align 4
  %40 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 6
  %41 = load i32, ptr addrspace(5) %40, align 4
  %42 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 7
  %43 = load i32, ptr addrspace(5) %42, align 4
  %44 = getelementptr { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, ptr addrspace(5) %0, i32 0, i32 2, i32 8
  %45 = load i64, ptr addrspace(5) %44, align 8
  %46 = icmp ugt i32 %.fr, -3
  br i1 %46, label %47, label %68

47:                                               ; preds = %.entry
  %48 = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) %1, i32 0, i32 5
  %49 = load i32, ptr addrspace(7) %48, align 4
  %50 = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) %1, i32 0, i32 6
  %51 = load i32, ptr addrspace(7) %50, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %49 to i64
  %55 = or i64 %53, %54
  %.fr541 = freeze i64 %55
  %56 = icmp eq i64 %.fr541, 0
  br i1 %56, label %.exit2, label %57

57:                                               ; preds = %47
  %58 = lshr i32 %9, 16
  %59 = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) %1, i32 0, i32 7
  %60 = load i32, ptr addrspace(7) %59, align 4
  %61 = mul i32 %60, %58
  %62 = zext i32 %61 to i64
  %63 = add i64 %.fr541, %62
  %64 = inttoptr i64 %63 to ptr addrspace(4)
  %65 = load i32, ptr addrspace(4) %64, align 4
  %66 = freeze i32 %65
  br label %.exit2

.exit2:                                           ; preds = %47, %57
  %.0 = phi i32 [ %58, %57 ], [ undef, %47 ]
  %.sroa.0128.0.extract.trunc = phi i32 [ %66, %57 ], [ 0, %47 ]
  %.not542 = icmp eq i32 %.sroa.0128.0.extract.trunc, 0
  br i1 %.not542, label %106, label %67

67:                                               ; preds = %.exit2
  %.sroa.0130.0.extract.trunc = trunc i64 %45 to i32
  %.fca.0.0.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } poison, <3 x i32> %3, 0, 0
  %.fca.0.1.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.0.0.insert, i32 %.0, 0, 1
  %.fca.1.0.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.0.1.insert, i64 %7, 1, 0
  %.fca.1.1.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.0.insert, i32 %9, 1, 1
  %.fca.1.2.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.1.insert, i32 %.fr539, 1, 2
  %.fca.1.3.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.2.insert, <3 x float> %13, 1, 3
  %.fca.1.4.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.3.insert, <3 x float> %15, 1, 4
  %.fca.1.5.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.4.insert, float %17, 1, 5
  %.fca.1.6.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.5.insert, float %19, 1, 6
  %.fca.2.0.0.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.6.insert, float %21, 2, 0, 0
  %.fca.2.0.1.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.0.insert, i32 %.fr, 2, 0, 1
  %.fca.2.0.2.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.1.insert, i32 %25, 2, 0, 2
  %.fca.2.0.3.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.2.insert, i32 %27, 2, 0, 3
  %.fca.2.0.4.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.3.insert, i32 %29, 2, 0, 4
  %.fca.2.1.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.4.insert, <2 x float> %31, 2, 1
  %.fca.2.2.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.1.insert, i32 %33, 2, 2
  %.fca.2.3.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.2.insert, i32 %35, 2, 3
  %.fca.2.4.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.3.insert, i32 %37, 2, 4
  %.fca.2.5.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.4.insert, i32 %39, 2, 5
  %.fca.2.6.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.5.insert, i32 %41, 2, 6
  %.fca.2.7.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.6.insert, i32 %43, 2, 7
  %.fca.2.8.insert = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.7.insert, i64 %45, 2, 8
  call void (...) @lgc.cps.jump(i32 %.sroa.0128.0.extract.trunc, i32 -1, {} poison, i32 %.sroa.0130.0.extract.trunc, i32 %.0, { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.8.insert)
  unreachable

68:                                               ; preds = %.entry
  %69 = shl i32 %.fr, 3
  %70 = and i32 %69, -64
  %71 = zext i32 %70 to i64
  %72 = add i64 %7, %71
  %73 = add i64 %72, 48
  %74 = inttoptr i64 %73 to ptr addrspace(1)
  %75 = load <4 x i32>, ptr addrspace(1) %74, align 16
  %.4.vec.extract452 = extractelement <4 x i32> %75, i64 1
  %76 = and i32 %27, 16777215
  %77 = and i32 %.4.vec.extract452, 16777215
  %78 = lshr i32 %9, 8
  %79 = and i32 %78, 15
  %80 = lshr i32 %9, 12
  %81 = and i32 %80, 15
  %82 = mul nuw nsw i32 %81, %76
  %83 = add nuw nsw i32 %79, %82
  %84 = add nuw nsw i32 %83, %77
  %85 = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) %1, i32 0, i32 9
  %86 = load i32, ptr addrspace(7) %85, align 4
  %87 = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) %1, i32 0, i32 10
  %88 = load i32, ptr addrspace(7) %87, align 4
  %89 = zext i32 %88 to i64
  %90 = shl nuw i64 %89, 32
  %91 = zext i32 %86 to i64
  %92 = or i64 %90, %91
  %.fr537 = freeze i64 %92
  %.not = icmp eq i64 %.fr537, 0
  br i1 %.not, label %.exit5, label %93

93:                                               ; preds = %68
  %94 = getelementptr inbounds <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>, ptr addrspace(7) %1, i32 0, i32 11
  %95 = load i32, ptr addrspace(7) %94, align 4
  %96 = mul i32 %95, %84
  %97 = zext i32 %96 to i64
  %98 = add i64 %.fr537, %97
  %99 = inttoptr i64 %98 to ptr addrspace(1)
  %100 = load <4 x i32>, ptr addrspace(1) %99, align 16
  %101 = shufflevector <4 x i32> %100, <4 x i32> poison, <2 x i32> <i32 0, i32 1>
  %102 = freeze <2 x i32> %101
  br label %.exit5

.exit5:                                           ; preds = %93, %68
  %.sroa.0501.0 = phi <2 x i32> [ %102, %93 ], [ zeroinitializer, %68 ]
  %103 = and i32 %.fr539, 8
  %104 = icmp ne i32 %103, 0
  %.sroa.0150.0.vec.extract = extractelement <2 x i32> %.sroa.0501.0, i64 0
  %.not540 = icmp eq i32 %.sroa.0150.0.vec.extract, 0
  %or.cond = or i1 %104, %.not540
  br i1 %or.cond, label %106, label %105

105:                                              ; preds = %.exit5
  %addr = call i64 @_AmdGetCurrentFuncAddr()
  %.sroa.0320.0.extract.trunc = trunc i64 %addr to i32
  %.fca.0.0.insert322 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } poison, <3 x i32> %3, 0, 0
  %.fca.0.1.insert323 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.0.0.insert322, i32 %84, 0, 1
  %.fca.1.0.insert324 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.0.1.insert323, i64 %7, 1, 0
  %.fca.1.1.insert325 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.0.insert324, i32 %9, 1, 1
  %.fca.1.2.insert326 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.1.insert325, i32 %.fr539, 1, 2
  %.fca.1.3.insert327 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.2.insert326, <3 x float> %13, 1, 3
  %.fca.1.4.insert328 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.3.insert327, <3 x float> %15, 1, 4
  %.fca.1.5.insert329 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.4.insert328, float %17, 1, 5
  %.fca.1.6.insert330 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.5.insert329, float %19, 1, 6
  %.fca.2.0.0.insert331 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.1.6.insert330, float %21, 2, 0, 0
  %.fca.2.0.1.insert332 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.0.insert331, i32 %.fr, 2, 0, 1
  %.fca.2.0.2.insert333 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.1.insert332, i32 %25, 2, 0, 2
  %.fca.2.0.3.insert334 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.2.insert333, i32 %27, 2, 0, 3
  %.fca.2.0.4.insert335 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.3.insert334, i32 %29, 2, 0, 4
  %.fca.2.1.insert336 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.0.4.insert335, <2 x float> %31, 2, 1
  %.fca.2.2.insert337 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.1.insert336, i32 %33, 2, 2
  %.fca.2.3.insert338 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.2.insert337, i32 %35, 2, 3
  %.fca.2.4.insert339 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.3.insert338, i32 %37, 2, 4
  %.fca.2.5.insert340 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.4.insert339, i32 %39, 2, 5
  %.fca.2.6.insert341 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.5.insert340, i32 %41, 2, 6
  %.fca.2.7.insert342 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.6.insert341, i32 %43, 2, 7
  %.fca.2.8.insert343 = insertvalue { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.7.insert342, i64 %45, 2, 8
  call void (...) @lgc.cps.jump(i32 %.sroa.0150.0.vec.extract, i32 -1, {} poison, i32 %.sroa.0320.0.extract.trunc, i32 %84, { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } %.fca.2.8.insert343)
  unreachable

106:                                              ; preds = %.exit5, %.exit2
  %.sroa.7.0 = phi i32 [ %5, %.exit2 ], [ %84, %.exit5 ]
  %.sroa.0373.0.extract.trunc = trunc i64 %45 to i32
  %.fca.0.insert = insertvalue { <3 x i32>, i32 } poison, <3 x i32> %3, 0
  %.fca.1.insert = insertvalue { <3 x i32>, i32 } %.fca.0.insert, i32 %.sroa.7.0, 1
  call void (...) @lgc.cps.jump(i32 %.sroa.0373.0.extract.trunc, i32 -1, {} poison, i32 poison, i32 %.sroa.7.0, { <3 x i32>, i32 } %.fca.1.insert)
  unreachable
}

; Set !lgc.rt.attribute.size to 0 to test padding is added correctly for _AmdEnqueueAnyHit (should be poison {})
define dso_local spir_func { { float, i32, i32, i32, i32 }, <2 x float>, i32 } @_cont_Traversal_2(ptr addrspace(5) %0) local_unnamed_addr !lgc.shaderstage !0 !types !1 !lgc.rt.shaderstage !3 !lgc.rt.attribute.size !8 {
; LOWERRAYTRACINGPIPELINE-CPS-LABEL: define dso_local spir_func void @_cont_Traversal_2(
; LOWERRAYTRACINGPIPELINE-CPS-SAME: {} [[CONT_STATE:%.*]], i32 [[RETURN_ADDR:%.*]], i32 [[SHADER_INDEX:%.*]], { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[SYSTEM_DATA:%.*]], {} [[HIT_ATTRS:%.*]], [5 x i32] [[PADDING:%.*]], [8 x i32] [[PAYLOAD:%.*]]) local_unnamed_addr !lgc.shaderstage [[META4]] !lgc.rt.shaderstage [[META5]] !lgc.rt.attribute.size [[META9:![0-9]+]] !lgc.cps [[META7]] !continuation [[META10:![0-9]+]] {
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:  .entry:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } }, align 16, addrspace(5)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    store { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } [[SYSTEM_DATA]], ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP0:%.*]] = call ptr addrspace(7) @lgc.load.buffer.desc(i64 93, i32 17, i32 0, i32 0)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP1:%.*]] = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) [[TMP0]])
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP2:%.*]] = load i32, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP4:%.*]] = load i64, ptr addrspace(5) [[TMP3]], align 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 24
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(5) [[TMP5]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP8:%.*]] = load <3 x float>, ptr addrspace(5) [[TMP7]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 48
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP10:%.*]] = load <3 x float>, ptr addrspace(5) [[TMP9]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP12:%.*]] = load float, ptr addrspace(5) [[TMP11]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 68
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP14:%.*]] = load float, ptr addrspace(5) [[TMP13]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 80
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP16:%.*]] = load float, ptr addrspace(5) [[TMP15]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 84
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP18:%.*]] = load i32, ptr addrspace(5) [[TMP17]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 88
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP20:%.*]] = load i32, ptr addrspace(5) [[TMP19]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 92
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP22:%.*]] = load i32, ptr addrspace(5) [[TMP21]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 96
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP24:%.*]] = load i32, ptr addrspace(5) [[TMP23]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 104
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP26:%.*]] = load <2 x float>, ptr addrspace(5) [[TMP25]], align 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP27:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 112
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP28:%.*]] = load i32, ptr addrspace(5) [[TMP27]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 116
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP30:%.*]] = load i32, ptr addrspace(5) [[TMP29]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP31:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 120
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP32:%.*]] = load i32, ptr addrspace(5) [[TMP31]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP33:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 124
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP34:%.*]] = load i32, ptr addrspace(5) [[TMP33]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP35:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 128
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP36:%.*]] = load i32, ptr addrspace(5) [[TMP35]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 132
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP38:%.*]] = load i32, ptr addrspace(5) [[TMP37]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP39:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 136
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP40:%.*]] = load i32, ptr addrspace(5) [[TMP39]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP41:%.*]] = getelementptr i8, ptr addrspace(5) [[SYSTEM_DATA_ALLOCA]], i32 144
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP42:%.*]] = load i64, ptr addrspace(5) [[TMP41]], align 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP43:%.*]] = and i64 [[TMP4]], 281474976710655
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP44:%.*]] = add nuw nsw i64 [[TMP43]], 48
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP45:%.*]] = inttoptr i64 [[TMP44]] to ptr addrspace(1)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP46:%.*]] = load <4 x i32>, ptr addrspace(1) [[TMP45]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOT4_VEC_EXTRACT:%.*]] = extractelement <4 x i32> [[TMP46]], i64 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP47:%.*]] = and i32 [[DOT4_VEC_EXTRACT]], 16777215
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP48:%.*]] = lshr i32 [[TMP6]], 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP49:%.*]] = and i32 [[TMP48]], 15
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP50:%.*]] = add nuw nsw i32 [[TMP49]], [[TMP47]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP51:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP0]], i32 36
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP52:%.*]] = load i32, ptr addrspace(7) [[TMP51]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP53:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP0]], i32 40
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP54:%.*]] = load i32, ptr addrspace(7) [[TMP53]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP55:%.*]] = zext i32 [[TMP54]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP56:%.*]] = shl nuw i64 [[TMP55]], 32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP57:%.*]] = zext i32 [[TMP52]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP58:%.*]] = or i64 [[TMP56]], [[TMP57]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFR:%.*]] = freeze i64 [[TMP58]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTNOT:%.*]] = icmp eq i64 [[DOTFR]], 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br i1 [[DOTNOT]], label [[DOTEXIT4:%.*]], label [[TMP59:%.*]]
; LOWERRAYTRACINGPIPELINE-CPS:       59:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP60:%.*]] = getelementptr inbounds i8, ptr addrspace(7) [[TMP0]], i32 44
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP61:%.*]] = load i32, ptr addrspace(7) [[TMP60]], align 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP62:%.*]] = mul i32 [[TMP61]], [[TMP50]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP63:%.*]] = zext i32 [[TMP62]] to i64
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP64:%.*]] = add i64 [[DOTFR]], [[TMP63]]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP65:%.*]] = inttoptr i64 [[TMP64]] to ptr addrspace(1)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP66:%.*]] = load <4 x i32>, ptr addrspace(1) [[TMP65]], align 16
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP67:%.*]] = shufflevector <4 x i32> [[TMP66]], <4 x i32> poison, <2 x i32> <i32 2, i32 3>
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    br label [[DOTEXIT4]]
; LOWERRAYTRACINGPIPELINE-CPS:       .exit4:
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_5334_0:%.*]] = phi <2 x i32> [ [[TMP67]], [[TMP59]] ], [ zeroinitializer, [[DOTENTRY:%.*]] ]
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_370_8_VEC_EXTRACT:%.*]] = extractelement <2 x i32> [[DOTSROA_5334_0]], i64 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[TMP68:%.*]] = call i64 (...) @lgc.cps.as.continuation.reference__i64(ptr @_cont_Traversal_2)
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTSROA_0112_0_EXTRACT_TRUNC:%.*]] = trunc i64 [[TMP68]] to i32
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_0_0_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } poison, i32 [[TMP2]], 0, 0, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_0_1_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_0_0_INSERT]], i32 [[TMP50]], 0, 0, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_0_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_0_1_INSERT]], i64 [[TMP4]], 0, 1, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_1_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_1_0_INSERT]], i32 [[TMP6]], 0, 1, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_2_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_1_1_INSERT]], <3 x float> [[TMP8]], 0, 1, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_3_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_1_2_INSERT]], <3 x float> [[TMP10]], 0, 1, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_4_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_1_3_INSERT]], float [[TMP12]], 0, 1, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_1_5_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_1_4_INSERT]], float [[TMP14]], 0, 1, 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_0_0_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_1_5_INSERT]], float [[TMP16]], 0, 2, 0, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_0_1_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_0_0_INSERT]], i32 [[TMP18]], 0, 2, 0, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_0_2_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_0_1_INSERT]], i32 [[TMP20]], 0, 2, 0, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_0_3_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_0_2_INSERT]], i32 [[TMP22]], 0, 2, 0, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_0_4_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_0_3_INSERT]], i32 [[TMP24]], 0, 2, 0, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_1_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_0_4_INSERT]], <2 x float> [[TMP26]], 0, 2, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_2_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_1_INSERT]], i32 [[TMP28]], 0, 2, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_3_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_2_INSERT]], i32 [[TMP30]], 0, 2, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_4_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_3_INSERT]], i32 [[TMP32]], 0, 2, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_5_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_4_INSERT]], i32 [[TMP34]], 0, 2, 5
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_6_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_5_INSERT]], i32 [[TMP36]], 0, 2, 6
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_7_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_6_INSERT]], i32 [[TMP38]], 0, 2, 7
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_8_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_7_INSERT]], i32 [[TMP40]], 0, 2, 8
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_0_2_9_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_8_INSERT]], i64 [[TMP42]], 0, 2, 9
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_0_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_0_2_9_INSERT]], float 0.000000e+00, 1, 0
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_1_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_1_0_INSERT]], i32 0, 1, 1
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_2_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_1_1_INSERT]], i32 0, 1, 2
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_3_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_1_2_INSERT]], i32 0, 1, 3
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    [[DOTFCA_1_4_INSERT:%.*]] = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_1_3_INSERT]], i32 0, 1, 4
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    call void (...) @lgc.cps.jump(i32 [[DOTSROA_370_8_VEC_EXTRACT]], i32 -1, {} poison, i32 [[DOTSROA_0112_0_EXTRACT_TRUNC]], i32 [[TMP50]], { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } [[DOTFCA_1_4_INSERT]], <2 x float> zeroinitializer, {} poison, [8 x i32] [[PAYLOAD]])
; LOWERRAYTRACINGPIPELINE-CPS-NEXT:    unreachable
;
.entry:
  %1 = call ptr addrspace(7) @lgc.load.buffer.desc(i64 93, i32 17, i32 0, i32 0)
  %2 = call ptr @llvm.invariant.start.p7(i64 -1, ptr addrspace(7) %1)
  %3 = load i32, ptr addrspace(5) %0, align 4
  %4 = getelementptr i8, ptr addrspace(5) %0, i32 16
  %5 = load i64, ptr addrspace(5) %4, align 8
  %6 = getelementptr i8, ptr addrspace(5) %0, i32 24
  %7 = load i32, ptr addrspace(5) %6, align 4
  %8 = getelementptr i8, ptr addrspace(5) %0, i32 32
  %9 = load <3 x float>, ptr addrspace(5) %8, align 16
  %10 = getelementptr i8, ptr addrspace(5) %0, i32 48
  %11 = load <3 x float>, ptr addrspace(5) %10, align 16
  %12 = getelementptr i8, ptr addrspace(5) %0, i32 64
  %13 = load float, ptr addrspace(5) %12, align 4
  %14 = getelementptr i8, ptr addrspace(5) %0, i32 68
  %15 = load float, ptr addrspace(5) %14, align 4
  %16 = getelementptr i8, ptr addrspace(5) %0, i32 80
  %17 = load float, ptr addrspace(5) %16, align 4
  %18 = getelementptr i8, ptr addrspace(5) %0, i32 84
  %19 = load i32, ptr addrspace(5) %18, align 4
  %20 = getelementptr i8, ptr addrspace(5) %0, i32 88
  %21 = load i32, ptr addrspace(5) %20, align 4
  %22 = getelementptr i8, ptr addrspace(5) %0, i32 92
  %23 = load i32, ptr addrspace(5) %22, align 4
  %24 = getelementptr i8, ptr addrspace(5) %0, i32 96
  %25 = load i32, ptr addrspace(5) %24, align 4
  %26 = getelementptr i8, ptr addrspace(5) %0, i32 104
  %27 = load <2 x float>, ptr addrspace(5) %26, align 8
  %28 = getelementptr i8, ptr addrspace(5) %0, i32 112
  %29 = load i32, ptr addrspace(5) %28, align 4
  %30 = getelementptr i8, ptr addrspace(5) %0, i32 116
  %31 = load i32, ptr addrspace(5) %30, align 4
  %32 = getelementptr i8, ptr addrspace(5) %0, i32 120
  %33 = load i32, ptr addrspace(5) %32, align 4
  %34 = getelementptr i8, ptr addrspace(5) %0, i32 124
  %35 = load i32, ptr addrspace(5) %34, align 4
  %36 = getelementptr i8, ptr addrspace(5) %0, i32 128
  %37 = load i32, ptr addrspace(5) %36, align 4
  %38 = getelementptr i8, ptr addrspace(5) %0, i32 132
  %39 = load i32, ptr addrspace(5) %38, align 4
  %40 = getelementptr i8, ptr addrspace(5) %0, i32 136
  %41 = load i32, ptr addrspace(5) %40, align 4
  %42 = getelementptr i8, ptr addrspace(5) %0, i32 144
  %43 = load i64, ptr addrspace(5) %42, align 8
  %44 = and i64 %5, 281474976710655
  %45 = add nuw nsw i64 %44, 48
  %46 = inttoptr i64 %45 to ptr addrspace(1)
  %47 = load <4 x i32>, ptr addrspace(1) %46, align 16
  %.4.vec.extract = extractelement <4 x i32> %47, i64 1
  %48 = and i32 %.4.vec.extract, 16777215
  %49 = lshr i32 %7, 8
  %50 = and i32 %49, 15
  %51 = add nuw nsw i32 %50, %48
  %52 = getelementptr inbounds i8, ptr addrspace(7) %1, i32 36
  %53 = load i32, ptr addrspace(7) %52, align 4
  %54 = getelementptr inbounds i8, ptr addrspace(7) %1, i32 40
  %55 = load i32, ptr addrspace(7) %54, align 4
  %56 = zext i32 %55 to i64
  %57 = shl nuw i64 %56, 32
  %58 = zext i32 %53 to i64
  %59 = or i64 %57, %58
  %.fr = freeze i64 %59
  %.not = icmp eq i64 %.fr, 0
  br i1 %.not, label %.exit4, label %60

60:                                               ; preds = %.entry
  %61 = getelementptr inbounds i8, ptr addrspace(7) %1, i32 44
  %62 = load i32, ptr addrspace(7) %61, align 4
  %63 = mul i32 %62, %51
  %64 = zext i32 %63 to i64
  %65 = add i64 %.fr, %64
  %66 = inttoptr i64 %65 to ptr addrspace(1)
  %67 = load <4 x i32>, ptr addrspace(1) %66, align 16
  %68 = shufflevector <4 x i32> %67, <4 x i32> poison, <2 x i32> <i32 2, i32 3>
  br label %.exit4

.exit4:                                           ; preds = %.entry, %60
  %.sroa.5334.0 = phi <2 x i32> [ %68, %60 ], [ zeroinitializer, %.entry ]
  %.sroa.370.8.vec.extract = extractelement <2 x i32> %.sroa.5334.0, i64 0
  %69 = call spir_func i64 @_AmdGetCurrentFuncAddr()
  %.sroa.0112.0.extract.trunc = trunc i64 %69 to i32
  %.fca.0.0.0.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } poison, i32 %3, 0, 0, 0
  %.fca.0.0.1.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.0.0.insert, i32 %51, 0, 0, 1
  %.fca.0.1.0.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.0.1.insert, i64 %5, 0, 1, 0
  %.fca.0.1.1.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.1.0.insert, i32 %7, 0, 1, 1
  %.fca.0.1.2.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.1.1.insert, <3 x float> %9, 0, 1, 2
  %.fca.0.1.3.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.1.2.insert, <3 x float> %11, 0, 1, 3
  %.fca.0.1.4.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.1.3.insert, float %13, 0, 1, 4
  %.fca.0.1.5.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.1.4.insert, float %15, 0, 1, 5
  %.fca.0.2.0.0.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.1.5.insert, float %17, 0, 2, 0, 0
  %.fca.0.2.0.1.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.0.0.insert, i32 %19, 0, 2, 0, 1
  %.fca.0.2.0.2.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.0.1.insert, i32 %21, 0, 2, 0, 2
  %.fca.0.2.0.3.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.0.2.insert, i32 %23, 0, 2, 0, 3
  %.fca.0.2.0.4.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.0.3.insert, i32 %25, 0, 2, 0, 4
  %.fca.0.2.1.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.0.4.insert, <2 x float> %27, 0, 2, 1
  %.fca.0.2.2.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.1.insert, i32 %29, 0, 2, 2
  %.fca.0.2.3.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.2.insert, i32 %31, 0, 2, 3
  %.fca.0.2.4.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.3.insert, i32 %33, 0, 2, 4
  %.fca.0.2.5.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.4.insert, i32 %35, 0, 2, 5
  %.fca.0.2.6.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.5.insert, i32 %37, 0, 2, 6
  %.fca.0.2.7.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.6.insert, i32 %39, 0, 2, 7
  %.fca.0.2.8.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.7.insert, i32 %41, 0, 2, 8
  %.fca.0.2.9.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.8.insert, i64 %43, 0, 2, 9
  %.fca.1.0.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.0.2.9.insert, float 0.000000e+00, 1, 0
  %.fca.1.1.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.1.0.insert, i32 0, 1, 1
  %.fca.1.2.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.1.1.insert, i32 0, 1, 2
  %.fca.1.3.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.1.2.insert, i32 0, 1, 3
  %.fca.1.4.insert = insertvalue { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.1.3.insert, i32 0, 1, 4
  call void (...) @lgc.cps.jump(i32 %.sroa.370.8.vec.extract, i32 -1, {} poison, i32 %.sroa.0112.0.extract.trunc, i32 %51, { { { i32, i32 }, { i64, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i32, i64 } }, { float, i32, i32, i32, i32 } } %.fca.1.4.insert, <2 x float> zeroinitializer)
  unreachable
}

declare void @lgc.cps.jump(...) local_unnamed_addr
declare ptr addrspace(7) @lgc.load.buffer.desc(i64 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr
declare ptr @llvm.invariant.start.p7(i64 immarg %0, ptr addrspace(7) nocapture %1)

!continuation.preservedPayloadRegisterCount = !{!7}
!lgc.cps.module = !{}

!0 = !{i32 7}
!1 = !{!"function", { { float, i32, i32, i32, i32 }, <2 x float>, i32 } poison, !2}
!2 = !{i32 5, { { <3 x i32>, i32 }, { i64, i32, i32, <3 x float>, <3 x float>, float, float }, { { float, i32, i32, i32, i32 }, <2 x float>, i32, i32, i32, i32, i32, i32, i64 } } poison}
!3 = !{i32 6}
!4 = !{i32 16}
!5 = !{i32 0, %struct.AnyHitTraversalData poison}
!6 = !{!"function", i1 poison, !5, float poison, i32 poison}
!7 = !{i32 8}
!8 = !{i32 0}
!9 = !{i32 0, %struct.DispatchSystemData poison}
!10 = !{!"function", i32 poison, !9}
