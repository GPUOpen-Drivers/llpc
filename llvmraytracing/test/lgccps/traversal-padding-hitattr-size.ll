; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; We run this test file twice with different max hit attribute sizes to test that e.g. padding depends correctly on the max hit attribute size.
; RUN: grep -v HITATTR_SIZE_8  %s | opt --verify-each -passes='lower-raytracing-pipeline,lint<abort-on-error>' -S | FileCheck -check-prefix=CHECK-ATTRSIZE-16 %s
; RUN: grep -v HITATTR_SIZE_16 %s | opt --verify-each -passes='lower-raytracing-pipeline,lint<abort-on-error>' -S | FileCheck -check-prefix=CHECK-ATTRSIZE-8 %s
;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;  Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 ;
 ;  Permission is hereby granted, free of charge, to any person obtaining a copy
 ;  of this software and associated documentation files (the "Software"), to
 ;  deal in the Software without restriction, including without limitation the
 ;  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ;  sell copies of the Software, and to permit persons to whom the Software is
 ;  furnished to do so, subject to the following conditions:
 ;
 ;  The above copyright notice and this permission notice shall be included in all
 ;  copies or substantial portions of the Software.
 ;
 ;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ;  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ;  IN THE SOFTWARE.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%struct.AnyHitTraversalData = type { i32 }
%struct.DispatchSystemData = type { i32 }

; Need _cont_ReportHit to get system data type
declare !pointeetys !6 <3 x i32> @_cont_DispatchRaysIndex3(%struct.DispatchSystemData*)
declare !pointeetys !4 i1 @_cont_ReportHit(%struct.AnyHitTraversalData* %data, float %t, i32 %hitKind)

declare !pointeetys !6 void @_cont_ExitRayGen(%struct.DispatchSystemData*)

declare i32 @_AmdGetCurrentFuncAddr()

define dso_local spir_func { { float, i32, i32, i32, i32 }, <2 x float>, i32 } @_cont_Traversal({ i32 } %0) local_unnamed_addr !lgc.shaderstage !0 !pointeetys !1 !lgc.rt.shaderstage !2 {
; CHECK-ATTRSIZE-16-LABEL: define dso_local spir_func void @_cont_Traversal(
; CHECK-ATTRSIZE-16-SAME: i32 [[SHADERINDEX:%.*]], i32 [[RETURNADDR:%.*]], { i32 } [[SYSTEM_DATA:%.*]], {} [[HIT_ATTRS:%.*]], [4 x i32] [[PADDING:%.*]], [8 x i32] [[PAYLOAD:%.*]]) local_unnamed_addr !lgc.shaderstage [[META6:![0-9]+]] !lgc.rt.shaderstage [[META7:![0-9]+]] !lgc.cps [[META8:![0-9]+]] !continuation [[META9:![0-9]+]] {
; CHECK-ATTRSIZE-16-NEXT:  [[_ENTRY:.*:]]
; CHECK-ATTRSIZE-16-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca { i32 }, align 8
; CHECK-ATTRSIZE-16-NEXT:    [[PAYLOAD_SERIALIZATION_ALLOCA:%.*]] = alloca [8 x i32], align 4
; CHECK-ATTRSIZE-16-NEXT:    store [8 x i32] [[PAYLOAD]], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-16-NEXT:    store { i32 } [[SYSTEM_DATA]], ptr [[SYSTEM_DATA_ALLOCA]], align 4
; CHECK-ATTRSIZE-16-NEXT:    [[TMP0:%.*]] = extractvalue { i32 } [[SYSTEM_DATA]], 0
; CHECK-ATTRSIZE-16-NEXT:    [[TMP1:%.*]] = icmp ugt i32 [[TMP0]], -3
; CHECK-ATTRSIZE-16-NEXT:    br i1 [[TMP1]], label %[[BB2:.*]], label %[[BB4:.*]]
; CHECK-ATTRSIZE-16:       [[BB2]]:
; CHECK-ATTRSIZE-16-NEXT:    [[TMP3:%.*]] = load [8 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-16-NEXT:    call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 poison, i32 poison, { i32 } poison, [4 x i32] poison, [8 x i32] [[TMP3]]), !continuation.registercount [[META0:![0-9]+]]
; CHECK-ATTRSIZE-16-NEXT:    unreachable
; CHECK-ATTRSIZE-16:       [[BB4]]:
; CHECK-ATTRSIZE-16-NEXT:    [[TMP5:%.*]] = and i32 [[TMP0]], 8
; CHECK-ATTRSIZE-16-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[TMP5]], 0
; CHECK-ATTRSIZE-16-NEXT:    br i1 [[TMP6]], label %[[BB7:.*]], label %[[BB10:.*]]
; CHECK-ATTRSIZE-16:       [[BB7]]:
; CHECK-ATTRSIZE-16-NEXT:    [[TMP8:%.*]] = call i32 (...) @lgc.cps.as.continuation.reference(ptr @_cont_Traversal)
; CHECK-ATTRSIZE-16-NEXT:    [[TMP9:%.*]] = load [8 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-16-NEXT:    call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 [[TMP8]], i32 poison, { i32 } poison, [4 x i32] poison, [8 x i32] [[TMP9]]), !continuation.registercount [[META0]]
; CHECK-ATTRSIZE-16-NEXT:    unreachable
; CHECK-ATTRSIZE-16:       [[BB10]]:
; CHECK-ATTRSIZE-16-NEXT:    [[TMP11:%.*]] = load [8 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-16-NEXT:    call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 poison, i32 poison, {} poison, [5 x i32] poison, [8 x i32] [[TMP11]]), !continuation.registercount [[META0]]
; CHECK-ATTRSIZE-16-NEXT:    unreachable
;
; CHECK-ATTRSIZE-8-LABEL: define dso_local spir_func void @_cont_Traversal(
; CHECK-ATTRSIZE-8-SAME: i32 [[SHADERINDEX:%.*]], i32 [[RETURNADDR:%.*]], { i32 } [[SYSTEM_DATA:%.*]], {} [[HIT_ATTRS:%.*]], [2 x i32] [[PADDING:%.*]], [8 x i32] [[PAYLOAD:%.*]]) local_unnamed_addr !lgc.shaderstage [[META5:![0-9]+]] !lgc.rt.shaderstage [[META6:![0-9]+]] !lgc.cps [[META7:![0-9]+]] !continuation [[META8:![0-9]+]] {
; CHECK-ATTRSIZE-8-NEXT:  [[_ENTRY:.*:]]
; CHECK-ATTRSIZE-8-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca { i32 }, align 8
; CHECK-ATTRSIZE-8-NEXT:    [[PAYLOAD_SERIALIZATION_ALLOCA:%.*]] = alloca [8 x i32], align 4
; CHECK-ATTRSIZE-8-NEXT:    store [8 x i32] [[PAYLOAD]], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-8-NEXT:    store { i32 } [[SYSTEM_DATA]], ptr [[SYSTEM_DATA_ALLOCA]], align 4
; CHECK-ATTRSIZE-8-NEXT:    [[TMP0:%.*]] = extractvalue { i32 } [[SYSTEM_DATA]], 0
; CHECK-ATTRSIZE-8-NEXT:    [[TMP1:%.*]] = icmp ugt i32 [[TMP0]], -3
; CHECK-ATTRSIZE-8-NEXT:    br i1 [[TMP1]], label %[[BB2:.*]], label %[[BB4:.*]]
; CHECK-ATTRSIZE-8:       [[BB2]]:
; CHECK-ATTRSIZE-8-NEXT:    [[TMP3:%.*]] = load [8 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-8-NEXT:    call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 poison, i32 poison, { i32 } poison, [2 x i32] poison, [8 x i32] [[TMP3]]), !continuation.registercount [[META0:![0-9]+]]
; CHECK-ATTRSIZE-8-NEXT:    unreachable
; CHECK-ATTRSIZE-8:       [[BB4]]:
; CHECK-ATTRSIZE-8-NEXT:    [[TMP5:%.*]] = and i32 [[TMP0]], 8
; CHECK-ATTRSIZE-8-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[TMP5]], 0
; CHECK-ATTRSIZE-8-NEXT:    br i1 [[TMP6]], label %[[BB7:.*]], label %[[BB10:.*]]
; CHECK-ATTRSIZE-8:       [[BB7]]:
; CHECK-ATTRSIZE-8-NEXT:    [[TMP8:%.*]] = call i32 (...) @lgc.cps.as.continuation.reference(ptr @_cont_Traversal)
; CHECK-ATTRSIZE-8-NEXT:    [[TMP9:%.*]] = load [8 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-8-NEXT:    call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 [[TMP8]], i32 poison, { i32 } poison, [2 x i32] poison, [8 x i32] [[TMP9]]), !continuation.registercount [[META0]]
; CHECK-ATTRSIZE-8-NEXT:    unreachable
; CHECK-ATTRSIZE-8:       [[BB10]]:
; CHECK-ATTRSIZE-8-NEXT:    [[TMP11:%.*]] = load [8 x i32], ptr [[PAYLOAD_SERIALIZATION_ALLOCA]], align 4
; CHECK-ATTRSIZE-8-NEXT:    call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 poison, i32 poison, {} poison, [3 x i32] poison, [8 x i32] [[TMP11]]), !continuation.registercount [[META0]]
; CHECK-ATTRSIZE-8-NEXT:    unreachable
;
.entry:
  %1 = extractvalue { i32 } %0, 0
  %2 = icmp ugt i32 %1, -3
  br i1 %2, label %3, label %4

3:
  call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 poison, i32 poison, { i32 } poison)
  unreachable

4:
  %5 = and i32 %1, 8
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:
  %addr = call i32 @_AmdGetCurrentFuncAddr()
  call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 %addr, i32 poison, { i32 } poison)
  unreachable

8:
  call void (...) @lgc.cps.jump(i32 poison, i32 -1, i32 poison, i32 poison, i32 poison, { } poison)
  unreachable
}

declare void @lgc.cps.jump(...) local_unnamed_addr

!continuation.maxUsedPayloadRegisterCount = !{!5}
!lgc.rt.max.attribute.size = !{!3}

!0 = !{i32 7}
!1 = !{ { i32 } poison}
!2 = !{i32 6}
!3 = !{i32 16} ; HITATTR_SIZE_16
!3 = !{i32 8}  ; HITATTR_SIZE_8
!4 = !{%struct.AnyHitTraversalData poison}
!5 = !{i32 8}
!6 = !{%struct.DispatchSystemData poison}
;.
; CHECK-ATTRSIZE-16: [[META0]] = !{i32 8}
; CHECK-ATTRSIZE-16: [[META6]] = !{i32 7}
; CHECK-ATTRSIZE-16: [[META7]] = !{i32 6}
; CHECK-ATTRSIZE-16: [[META8]] = !{i32 3}
; CHECK-ATTRSIZE-16: [[META9]] = !{ptr @_cont_Traversal}
;.
; CHECK-ATTRSIZE-8: [[META0]] = !{i32 8}
; CHECK-ATTRSIZE-8: [[META5]] = !{i32 7}
; CHECK-ATTRSIZE-8: [[META6]] = !{i32 6}
; CHECK-ATTRSIZE-8: [[META7]] = !{i32 3}
; CHECK-ATTRSIZE-8: [[META8]] = !{ptr @_cont_Traversal}
;.
