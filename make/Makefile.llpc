
ifndef LLPC_VULKAN_INCLUDE
    LLPC_VULKAN_INCLUDE = $(VK_SDK_PATH)/Include/vulkan
endif

LCXXINCS += -I$(LLPC_VULKAN_INCLUDE)
LCXXINCS += -I$(LLPC_DEPTH)/imported/chip/gfx6
LCXXINCS += -I$(LLPC_DEPTH)/imported/chip/gfx9
LCXXINCS += -I$(LLPC_DEPTH)/include
LCXXINCS += -I$(LLPC_DEPTH)/patch
LCXXINCS += -I$(LLPC_DEPTH)/patch/gfx9
LCXXINCS += -I$(LLPC_DEPTH)/patch/gfx6/chip
LCXXINCS += -I$(LLPC_DEPTH)/patch/gfx9/chip
LCXXINCS += -I$(LLPC_DEPTH)/util
LCXXINCS += -I$(LLPC_DEPTH)/translator/lib/SPIRV/libSPIRV

ifeq ($(LLPC_BUILD_VEGA20), 1)
    LCXXDEFS += -DLLPC_BUILD_VEGA20=1 -DCHIP_HDR_VEGA20=1
endif

ifeq ($(LLPC_BUILD_RAVEN2), 1)
    LCXXDEFS += -DLLPC_BUILD_RAVEN2=1 -DCHIP_HDR_RAVEN2=1
endif

#if LLPC_BUILD_GFX10
ifeq ($(LLPC_BUILD_GFX10), 1)
    LCXXDEFS += -DLLPC_BUILD_GFX10=1 -DCHIP_HDR_GFX10=1
endif
#endif

ifeq ($(ICD_BUILD_LLPC), 1)
    LCXXINCS += -I$(LLVM_DEPTH)/include
    LCXXINCS += -I$(LLVM_BUILD_DIR)/include

    LLVM_BIN_DIR = $(LLVM_BUILD_DIR)/bin/

    ifeq ($(XGL_LLVM_UPSTREAM), 1)
        LCXXDEFS += -DXGL_LLVM_UPSTREAM
    endif

    ifeq ($(LLPC_ENABLE_SPIRV_OPT), 1)
        LCXXDEFS += -DLLPC_ENABLE_SPIRV_OPT
    endif

    LCXXINCS += -I$(LLPC_DEPTH)/context

    LCXXINCS += -I$(LLPC_DEPTH)/builder
    LCXXINCS += -I$(LLPC_DEPTH)/imported/spirv
    LCXXINCS += -I$(LLPC_DEPTH)/lower
    LCXXINCS += -I$(LLPC_DEPTH)/patch/generate
    LCXXINCS += -I$(LLPC_DEPTH)/translator/include
    LCXXINCS += -I$(LLPC_DEPTH)/translator/lib/SPIRV
    LCXXINCS += -I$(LLPC_DEPTH)/translator/lib/SPIRV/Mangler

    vpath %.cpp $(LLPC_DEPTH)/builder
    vpath %.cpp $(LLPC_DEPTH)/context
    vpath %.cpp $(LLPC_DEPTH)/lower
    vpath %.cpp $(LLPC_DEPTH)/patch
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx6
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx6/chip
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx9
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx9/chip
    vpath %.cpp $(LLPC_DEPTH)/translator/lib/SPIRV
    vpath %.cpp $(LLPC_DEPTH)/translator/lib/SPIRV/libSPIRV
    vpath %.cpp $(LLPC_DEPTH)/translator/lib/SPIRV/Mangler
    vpath %.cpp $(LLPC_DEPTH)/util

    # llpc/builder
    CPPFILES +=                             \
        llpcBuilder.cpp                     \
        llpcBuilderImpl.cpp                 \
        llpcBuilderImplArith.cpp            \
        llpcBuilderImplDesc.cpp             \
        llpcBuilderImplImage.cpp            \
        llpcBuilderImplInOut.cpp            \
        llpcBuilderImplMatrix.cpp           \
        llpcBuilderImplMisc.cpp             \
        llpcBuilderImplSubgroup.cpp         \
        llpcBuilderRecorder.cpp             \
        llpcBuilderReplayer.cpp             \
        llpcPipelineState.cpp

    # llpc/context
    CPPFILES +=                             \
        llpcCompiler.cpp                    \
        llpcContext.cpp                     \
        llpcComputeContext.cpp              \
        llpcGraphicsContext.cpp             \
        llpcPipelineContext.cpp             \
        llpcShaderCache.cpp                 \
        llpcShaderCacheManager.cpp

ifeq ($(VKI_RAY_TRACING), 1)
    CPPFILES += llpcRayTracingContext.cpp
endif

    # llpc/lower
    CPPFILES +=                                 \
        llpcSpirvLower.cpp                      \
        llpcSpirvLowerAccessChain.cpp           \
        llpcSpirvLowerAlgebraTransform.cpp      \
        llpcSpirvLowerConstImmediateStore.cpp   \
        llpcSpirvLowerGlobal.cpp                \
        llpcSpirvLowerInstMetaRemove.cpp        \
        llpcSpirvLowerLoopUnrollControl.cpp     \
        llpcSpirvLowerMemoryOp.cpp              \
        llpcSpirvLowerResourceCollect.cpp       \
        llpcSpirvLowerTranslator.cpp

ifeq ($(VKI_RAY_TRACING), 1)
    CPPFILES +=                                 \
        llpcSpirvLowerRayTracing.cpp            \
        llpcSpirvLowerRayTracingBuiltIn.cpp
endif

    # llpc/patch
    CPPFILES +=                             \
        llpcGfx6Chip.cpp                    \
        llpcGfx6ConfigBuilder.cpp           \
        llpcGfx9Chip.cpp                    \
        llpcGfx9ConfigBuilder.cpp           \
        llpcShaderMerger.cpp                \
        \
        llpcCodeGenManager.cpp              \
        llpcConfigBuilderBase.cpp           \
        llpcFragColorExport.cpp             \
        llpcPatch.cpp                       \
        llpcPatchBufferOp.cpp               \
        llpcPatchCheckShaderCache.cpp       \
        llpcPatchCopyShader.cpp             \
        llpcPatchDescriptorLoad.cpp         \
        llpcPatchEntryPointMutate.cpp       \
        llpcPatchInOutImportExport.cpp      \
        llpcPatchLlvmIrInclusion.cpp        \
        llpcPatchLoadScalarizer.cpp         \
        llpcPatchNullFragShader.cpp         \
        llpcPatchPeepholeOpt.cpp            \
        llpcPatchPreparePipelineAbi.cpp     \
        llpcPatchPushConstOp.cpp            \
        llpcPatchResourceCollect.cpp        \
        llpcPatchSetupTargetFeatures.cpp    \
        llpcSystemValues.cpp                \
        llpcVertexFetch.cpp

    # llpc/translator
    CPPFILES +=                             \
        SPIRVBasicBlock.cpp                 \
        SPIRVDebug.cpp                      \
        SPIRVDecorate.cpp                   \
        SPIRVEntry.cpp                      \
        SPIRVFunction.cpp                   \
        SPIRVInstruction.cpp                \
        SPIRVModule.cpp                     \
        SPIRVStream.cpp                     \
        SPIRVType.cpp                       \
        SPIRVValue.cpp                      \
        \
        FunctionDescriptor.cpp              \
        Mangler.cpp                         \
        ManglingUtils.cpp                   \
        ParameterType.cpp                   \
        \
        OCLUtil.cpp                         \
        SPIRVLowerBool.cpp                  \
        SPIRVLowerConstExpr.cpp             \
        SPIRVLowerMemmove.cpp               \
        SPIRVReader.cpp                     \
        SPIRVRegularizeLLVM.cpp             \
        SPIRVUtil.cpp

    # llpc/util
    CPPFILES +=                             \
        llpcDebug.cpp                       \
        llpcElfReader.cpp                   \
        llpcElfWriter.cpp                   \
        llpcEmuLib.cpp                      \
        llpcFile.cpp                        \
        llpcInternal.cpp                    \
        llpcPassDeadFuncRemove.cpp          \
        llpcPassManager.cpp                 \
        llpcPipelineDumper.cpp              \
        llpcPipelineShaders.cpp             \
        llpcShaderModuleHelper.cpp          \
        llpcStartStopTimer.cpp              \
        llpcTimerProfiler.cpp               \
        llpcUtil.cpp

    #if LLPC_BUILD_GFX10
    ifeq ($(LLPC_BUILD_GFX10), 1)
        # llpc/patch/gfx9
        CPPFILES +=                         \
            llpcNggLdsManager.cpp           \
            llpcNggPrimShader.cpp
    endif
    #endif

    ifeq ($(LLPC_PLATFORM), win)
        LCXXDEFS += -D_SCL_SECURE_NO_WARNINGS       \
                    -DNOMINMAX                      \
                    -DUNICODE                       \
                    -D_UNICODE
    endif

    ifeq ($(LLPC_ENABLE_EXCEPTION), 1)
        LCXXDEFS += -DLLPC_ENABLE_EXCEPTION=1

        ifneq ($(LLPC_PLATFORM), win)
            # Non-windows: gcc-style options.
            LCXXOPTS += -fexceptions
        endif
    endif

    LCXXDEFS += -D_SPIRV_LLVM_API       \
                -DLITTLEENDIAN_CPU

    ifeq ($(LLPC_PLATFORM), win)
        LCXXOPTS += /wd4267 \
                    /wd4800 \
                    /wd6246 \
                    /wd4389 \
                    /wd4141 \
                    /wd4146 \
                    /wd4244 \
                    /wd4245 \
                    /wd4250 \
                    /wd4291 \
                    /wd4296 \
                    /wd4503 \
                    /wd4624 \
                    /wd4706 \
                    /wd6001 \
                    /wd6102 \
                    /wd6239 \
                    /wd6244 \
                    /wd6246 \
                    /wd6269 \
                    /wd6294 \
                    /wd6295 \
                    /wd6297 \
                    /wd6323 \
                    /wd6326 \
                    /wd6330 \
                    /wd28183 \
                    /wd28196 \
                    /bigobj

        # Remove DEBUG macro definition as LLVM header files redefine it for a
        # different purpose.
        GCXXDEFS := $(filter-out /DDEBUG,$(GCXXDEFS))
    endif

    ifneq ($(LLPC_PLATFORM), win)
        # Non-windows: gcc-style options.
        # disable link time optimization in LLPC to fix build failure of standalone compiler.
        LCXXOPTS := $(filter-out -flto,$(LCXXOPTS))
        LCXXOPTS := $(filter-out -fuse-linker-plugin,$(LCXXOPTS))
        LCXXOPTS := $(filter-out -Wno-odr,$(LCXXOPTS))
        LCOPTS   := $(filter-out -flto,$(LCOPTS))
        LCOPTS   := $(filter-out -fuse-linker-plugin,$(LCOPTS))
        LCOPTS   := $(filter-out -Wno-odr,$(LCOPTS))
        # Remove DEBUG macro definition as LLVM header files redefine it for a
        # different purpose.
        GCXXDEFS := $(filter-out -DDEBUG,$(GCXXDEFS))

        LCXXOPTS += -Wno-error=switch                  \
                    -fno-strict-aliasing               \
                    -Wno-error=sign-compare            \
                    -Wno-error=parentheses             \
                    -Wno-delete-non-virtual-dtor       \
                    -Wno-invalid-offsetof              \
                    -Wno-sign-compare                  \
                    -Wno-delete-incomplete             \
                    -Wunused-variable
        ifeq ($(USING_CLANG),)
            LCXXOPTS += -Wno-maybe-uninitialized
        else
            LCXXOPTS += -Wno-conditional-uninitialized
            # Extra warning/error suppression when using clang.
            LCXXOPTS += -Wno-missing-braces                \
                        -Wno-parentheses-equality          \
                        -Wno-pessimizing-move              \
                        -Wno-inconsistent-missing-override \
                        -Wno-dynamic-class-memaccess
        endif

        # LLVM headers require C++14 language features.
        LCXXOPTS += -std=c++1y
    endif

    # Replace calling convention /Gr (__fastcall) with /Gd (__cdecl) to link LLVM.
    ifeq ($(LLPC_PLATFORM), win)
        LCXXOPTS := $(filter-out /Gr, $(LCXXOPTS))
        LCXXOPTS += /Gd
    endif

    # LLPC uses the __DATE__ and __TIME__ macros to generate a simple LLPC version identifier. This identifier is
    # stored with shader cache and verified on cache file load to ensure compatibility. The following rule
    # forces llpcShaderCache.cpp (the file that creates this identifier) to be re-compiled on every build, so that
    # an up-to-date time/date is always used regardless of which files were touched since the last build.
    ifeq ($(LLPC_PLATFORM), win)
        llpcShaderCache.obj: .FORCE
    else
        llpcShaderCache.o: .FORCE
    endif

else

    vpath %.cpp $(LLPC_DEPTH)/patch/gfx6
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx6/chip
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx9
    vpath %.cpp $(LLPC_DEPTH)/patch/gfx9/chip

    # llpc/patch
    CPPFILES +=                             \
        llpcGfx6Chip.cpp                    \
        llpcGfx9Chip.cpp

    vpath %.cpp $(LLPC_DEPTH)/util
    # llpc/util
    CPPFILES +=                             \
        llpcPipelineDumper.cpp              \
        llpcElfReader.cpp                   \
        llpcUtil.cpp

    ifneq ($(LLPC_PLATFORM), win)
        # Non-windows: gcc-style options.
        LCXXOPTS += -fno-strict-aliasing               \
                    -Wno-invalid-offsetof              \
                    -Wno-sign-compare
        ifeq ($(USING_CLANG),)
            LCXXOPTS += -Wno-maybe-uninitialized
        else
            LCXXOPTS += -Wno-conditional-uninitialized
        endif
    endif

endif

# MetroHash
# If define METROHASH_PATH, llpc use the external single Metrohash.
# Otherwise build the imported Metrohash copy.
ifdef METROHASH_PATH
    LCXXINCS += -I$(METROHASH_DEPTH)/src
    LCXXDEFS += -DSINGLE_EXTERNAL_METROHASH
else
    METROHASH_DEPTH = $(LLPC_DEPTH)/imported/metrohash
    include $(METROHASH_DEPTH)/make/Makefile.metrohash
endif

.FORCE:

