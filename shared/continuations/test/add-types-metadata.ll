; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-attributes --check-globals --version 2
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata' -S %s 2>%t.stderr | FileCheck -check-prefix=METADATA %s
; RUN: count 0 < %t.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%struct.HitData = type { <3 x float>, <3 x float>, float, i32 }
%struct.DispatchSystemData = type { <3 x i32> }
%struct.SystemData = type { %struct.DispatchSystemData }
%struct.TraversalData = type { %struct.SystemData, %struct.HitData, <3 x float>, <3 x float>, float, i64 }
%struct.AnyHitTraversalData = type { %struct.TraversalData, %struct.HitData }

declare i32 @_cont_GetContinuationStackAddr() #4
declare %struct.DispatchSystemData @_cont_SetupRayGen() #4
declare %struct.DispatchSystemData @_AmdAwaitTraversal(i64, %struct.TraversalData) #4
declare %struct.DispatchSystemData @_AmdAwaitShader(i64, %struct.DispatchSystemData) #4
declare %struct.AnyHitTraversalData @_AmdAwaitAnyHit(i64, %struct.AnyHitTraversalData, float, i32) #4
declare %struct.HitData @_cont_GetCandidateState(%struct.AnyHitTraversalData*) #4
declare %struct.HitData @_cont_GetCommittedState(%struct.SystemData*) #4
declare %struct.BuiltInTriangleIntersectionAttributes @_cont_GetTriangleHitAttributes(%struct.SystemData*) #4
declare void @_cont_SetTriangleHitAttributes(%struct.SystemData*, %struct.BuiltInTriangleIntersectionAttributes) #4
declare i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)
declare i1 @_cont_IsEndSearch(%struct.TraversalData*) #4
declare i32 @_cont_HitKind(%struct.SystemData*) #4
declare i64 @_AmdGetResumePointAddr() #1
declare void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data) #1
declare void @_AmdRestoreSystemDataAnyHit(%struct.AnyHitTraversalData* %data) #1
declare void @_cont_AcceptHitAndEndSearch(%struct.DispatchSystemData* nocapture readnone %data) #1
declare void @_cont_AcceptHit(%struct.AnyHitTraversalData* nocapture readnone %data) #1
declare void @_cont_IgnoreHit(%struct.DispatchSystemData* nocapture readnone %data) #1
declare void @_AmdAcceptHitAttributes(%struct.AnyHitTraversalData* nocapture readnone %data) #1

define void @_cont_TraceRay(%struct.DispatchSystemData* %data, i64, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float) #4 {
; METADATA-LABEL: define void @_cont_TraceRay
; METADATA-SAME: (%struct.DispatchSystemData* [[DATA:%.*]], i64 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]], i32 [[TMP3:%.*]], i32 [[TMP4:%.*]], i32 [[TMP5:%.*]], float [[TMP6:%.*]], float [[TMP7:%.*]], float [[TMP8:%.*]], float [[TMP9:%.*]], float [[TMP10:%.*]], float [[TMP11:%.*]], float [[TMP12:%.*]], float [[TMP13:%.*]]) #[[ATTR0:[0-9]+]] !types !44 {
; METADATA-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA]], align 4
; METADATA-NEXT:    [[SYS_DATA:%.*]] = insertvalue [[STRUCT_SYSTEMDATA:%.*]] undef, [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]], 0
; METADATA-NEXT:    [[TRAV_DATA:%.*]] = insertvalue [[STRUCT_TRAVERSALDATA:%.*]] undef, [[STRUCT_SYSTEMDATA]] [[SYS_DATA]], 0
; METADATA-NEXT:    [[ADDR:%.*]] = call i64 @_AmdGetResumePointAddr() #[[ATTR3:[0-9]+]]
; METADATA-NEXT:    [[TRAV_DATA2:%.*]] = insertvalue [[STRUCT_TRAVERSALDATA]] [[TRAV_DATA]], i64 [[ADDR]], 5
; METADATA-NEXT:    [[NEWDATA:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_AmdAwaitTraversal(i64 4, [[STRUCT_TRAVERSALDATA]] [[TRAV_DATA2]])
; METADATA-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[NEWDATA]], %struct.DispatchSystemData* [[DATA]], align 4
; METADATA-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; METADATA-NEXT:    ret void
;
  %dis_data = load %struct.DispatchSystemData, %struct.DispatchSystemData* %data
  %sys_data = insertvalue %struct.SystemData undef, %struct.DispatchSystemData %dis_data, 0
  %trav_data = insertvalue %struct.TraversalData undef, %struct.SystemData %sys_data, 0
  %addr = call i64 @_AmdGetResumePointAddr() #2
  %trav_data2 = insertvalue %struct.TraversalData %trav_data, i64 %addr, 5
  %newdata = call %struct.DispatchSystemData @_AmdAwaitTraversal(i64 4, %struct.TraversalData %trav_data2)
  store %struct.DispatchSystemData %newdata, %struct.DispatchSystemData* %data
  call void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data)
  ret void
}

define void @_cont_CallShader(%struct.DispatchSystemData* %data, i32) #4 {
; METADATA-LABEL: define void @_cont_CallShader
; METADATA-SAME: (%struct.DispatchSystemData* [[DATA:%.*]], i32 [[TMP0:%.*]]) #[[ATTR0]] !types !45 {
; METADATA-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA]], align 4
; METADATA-NEXT:    [[NEWDATA:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_AmdAwaitShader(i64 2, [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]])
; METADATA-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[NEWDATA]], %struct.DispatchSystemData* [[DATA]], align 4
; METADATA-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; METADATA-NEXT:    ret void
;
  %dis_data = load %struct.DispatchSystemData, %struct.DispatchSystemData* %data
  %newdata = call %struct.DispatchSystemData @_AmdAwaitShader(i64 2, %struct.DispatchSystemData %dis_data)
  store %struct.DispatchSystemData %newdata, %struct.DispatchSystemData* %data
  call void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data)
  ret void
}

define i1 @_cont_ReportHit(%struct.AnyHitTraversalData* %data, float %t, i32 %hitKind) #4 {
; METADATA-LABEL: define i1 @_cont_ReportHit
; METADATA-SAME: (%struct.AnyHitTraversalData* [[DATA:%.*]], float [[T:%.*]], i32 [[HITKIND:%.*]]) #[[ATTR0]] !types !46 {
; METADATA-NEXT:    [[ORIGTPTR:%.*]] = getelementptr inbounds [[STRUCT_ANYHITTRAVERSALDATA:%.*]], %struct.AnyHitTraversalData* [[DATA]], i32 0, i32 0, i32 4
; METADATA-NEXT:    [[ORIGT:%.*]] = load float, float* [[ORIGTPTR]], align 4
; METADATA-NEXT:    [[ISNOHIT:%.*]] = fcmp fast uge float [[T]], [[ORIGT]]
; METADATA-NEXT:    br i1 [[ISNOHIT]], label [[ISEND:%.*]], label [[CALLAHIT:%.*]]
; METADATA:       callAHit:
; METADATA-NEXT:    [[TRAV_DATA:%.*]] = load [[STRUCT_ANYHITTRAVERSALDATA]], %struct.AnyHitTraversalData* [[DATA]], align 4
; METADATA-NEXT:    [[NEWDATA:%.*]] = call [[STRUCT_ANYHITTRAVERSALDATA]] @_AmdAwaitAnyHit(i64 3, [[STRUCT_ANYHITTRAVERSALDATA]] [[TRAV_DATA]], float [[T]], i32 [[HITKIND]])
; METADATA-NEXT:    store [[STRUCT_ANYHITTRAVERSALDATA]] [[NEWDATA]], %struct.AnyHitTraversalData* [[DATA]], align 4
; METADATA-NEXT:    call void @_AmdRestoreSystemDataAnyHit(%struct.AnyHitTraversalData* [[DATA]])
; METADATA-NEXT:    ret i1 true
; METADATA:       isEnd:
; METADATA-NEXT:    call void @_AmdAcceptHitAttributes(%struct.AnyHitTraversalData* [[DATA]])
; METADATA-NEXT:    ret i1 false
;
  %origTPtr = getelementptr inbounds %struct.AnyHitTraversalData, %struct.AnyHitTraversalData* %data, i32 0, i32 0, i32 4
  %origT = load float, float* %origTPtr, align 4
  %isNoHit = fcmp fast uge float %t, %origT
  br i1 %isNoHit, label %isEnd, label %callAHit

callAHit:
  %trav_data = load %struct.AnyHitTraversalData, %struct.AnyHitTraversalData* %data
  %newdata = call %struct.AnyHitTraversalData @_AmdAwaitAnyHit(i64 3, %struct.AnyHitTraversalData %trav_data, float %t, i32 %hitKind)
  store %struct.AnyHitTraversalData %newdata, %struct.AnyHitTraversalData* %data
  call void @_AmdRestoreSystemDataAnyHit(%struct.AnyHitTraversalData* %data)
  ret i1 1

isEnd:
  ; Call AcceptHitAttributes, just to simulate it
  call void @_AmdAcceptHitAttributes(%struct.AnyHitTraversalData* %data)
  ret i1 0
}

define i32 @_cont_DispatchRaysIndex(%struct.DispatchSystemData* %data, i32 %i) {
; METADATA-LABEL: define i32 @_cont_DispatchRaysIndex
; METADATA-SAME: (%struct.DispatchSystemData* [[DATA:%.*]], i32 [[I:%.*]]) !types !47 {
; METADATA-NEXT:    [[RESPTR:%.*]] = getelementptr [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA]], i32 0, i32 0, i32 [[I]]
; METADATA-NEXT:    [[RES:%.*]] = load i32, i32* [[RESPTR]], align 4
; METADATA-NEXT:    ret i32 [[RES]]
;
  %resPtr = getelementptr %struct.DispatchSystemData, %struct.DispatchSystemData* %data, i32 0, i32 0, i32 %i
  %res = load i32, i32* %resPtr
  ret i32 %res
}

define float @_cont_ObjectRayOrigin(%struct.DispatchSystemData* nocapture readnone %data, %struct.HitData* %hitData, i32 %i) {
; METADATA-LABEL: define float @_cont_ObjectRayOrigin
; METADATA-SAME: (%struct.DispatchSystemData* nocapture readnone [[DATA:%.*]], %struct.HitData* [[HITDATA:%.*]], i32 [[I:%.*]]) !types !48 {
; METADATA-NEXT:    [[RESPTR:%.*]] = getelementptr [[STRUCT_HITDATA:%.*]], %struct.HitData* [[HITDATA]], i32 0, i32 0, i32 [[I]]
; METADATA-NEXT:    [[RES:%.*]] = load float, float* [[RESPTR]], align 4
; METADATA-NEXT:    ret float [[RES]]
;
  %resPtr = getelementptr %struct.HitData, %struct.HitData* %hitData, i32 0, i32 0, i32 %i
  %res = load float, float* %resPtr
  ret float %res
}
define float @_cont_ObjectRayDirection(%struct.DispatchSystemData* nocapture readnone %data, %struct.HitData* %hitData, i32 %i) {
; METADATA-LABEL: define float @_cont_ObjectRayDirection
; METADATA-SAME: (%struct.DispatchSystemData* nocapture readnone [[DATA:%.*]], %struct.HitData* [[HITDATA:%.*]], i32 [[I:%.*]]) !types !48 {
; METADATA-NEXT:    [[RESPTR:%.*]] = getelementptr [[STRUCT_HITDATA:%.*]], %struct.HitData* [[HITDATA]], i32 0, i32 1, i32 [[I]]
; METADATA-NEXT:    [[RES:%.*]] = load float, float* [[RESPTR]], align 4
; METADATA-NEXT:    ret float [[RES]]
;
  %resPtr = getelementptr %struct.HitData, %struct.HitData* %hitData, i32 0, i32 1, i32 %i
  %res = load float, float* %resPtr
  ret float %res
}

define float @_cont_RayTCurrent(%struct.DispatchSystemData* nocapture readnone %data, %struct.HitData* %hitData) {
; METADATA-LABEL: define float @_cont_RayTCurrent
; METADATA-SAME: (%struct.DispatchSystemData* nocapture readnone [[DATA:%.*]], %struct.HitData* [[HITDATA:%.*]]) !types !50 {
; METADATA-NEXT:    [[RESPTR:%.*]] = getelementptr [[STRUCT_HITDATA:%.*]], %struct.HitData* [[HITDATA]], i32 0, i32 2
; METADATA-NEXT:    [[RES:%.*]] = load float, float* [[RESPTR]], align 4
; METADATA-NEXT:    ret float [[RES]]
;
  %resPtr = getelementptr %struct.HitData, %struct.HitData* %hitData, i32 0, i32 2
  %res = load float, float* %resPtr
  ret float %res
}

%dx.types.Handle = type { i8* }
%struct.RayPayload = type { <4 x float> }
%dx.types.ResourceProperties = type { i32, i32 }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%struct.RaytracingAccelerationStructure = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }

@"\01?Scene@@3URaytracingAccelerationStructure@@A" = external constant %dx.types.Handle, align 4
@"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4

; Function Attrs: nounwind
define void @MyRayGen() #0 {
; METADATA: Function Attrs: nounwind
; METADATA-LABEL: define void @MyRayGen
; METADATA-SAME: () #[[ATTR2:[0-9]+]] {
; METADATA-NEXT:    [[TMP1:%.*]] = load [[DX_TYPES_HANDLE:%.*]], %dx.types.Handle* @"\01?Scene@@3URaytracingAccelerationStructure@@A", align 4
; METADATA-NEXT:    [[TMP2:%.*]] = load [[DX_TYPES_HANDLE]], %dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A", align 4
; METADATA-NEXT:    [[TMP3:%.*]] = alloca [[STRUCT_RAYPAYLOAD:%.*]], align 4
; METADATA-NEXT:    [[TMP4:%.*]] = bitcast %struct.RayPayload* [[TMP3]] to i8*
; METADATA-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]]) #[[ATTR1:[0-9]+]]
; METADATA-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_RAYPAYLOAD]], %struct.RayPayload* [[TMP3]], i32 0, i32 0
; METADATA-NEXT:    store <4 x float> zeroinitializer, <4 x float>* [[TMP5]], align 4, !tbaa [[TBAA51:![0-9]+]]
; METADATA-NEXT:    [[TMP6:%.*]] = call [[DX_TYPES_HANDLE]] @dx.op.createHandleForLib.dx.types.Handle(i32 160, [[DX_TYPES_HANDLE]] [[TMP1]])
; METADATA-NEXT:    [[TMP7:%.*]] = call [[DX_TYPES_HANDLE]] @dx.op.annotateHandle(i32 216, [[DX_TYPES_HANDLE]] [[TMP6]], [[DX_TYPES_RESOURCEPROPERTIES:%.*]] { i32 16, i32 0 })
; METADATA-NEXT:    call void @dx.op.traceRay.struct.RayPayload(i32 157, [[DX_TYPES_HANDLE]] [[TMP7]], i32 16, i32 -1, i32 0, i32 1, i32 0, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3F50624DE0000000, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+04, %struct.RayPayload* nonnull [[TMP3]])
; METADATA-NEXT:    [[TMP8:%.*]] = load <4 x float>, <4 x float>* [[TMP5]], align 4, !tbaa [[TBAA51]]
; METADATA-NEXT:    [[TMP9:%.*]] = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)
; METADATA-NEXT:    [[TMP10:%.*]] = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)
; METADATA-NEXT:    [[TMP11:%.*]] = call [[DX_TYPES_HANDLE]] @dx.op.createHandleForLib.dx.types.Handle(i32 160, [[DX_TYPES_HANDLE]] [[TMP2]])
; METADATA-NEXT:    [[TMP12:%.*]] = call [[DX_TYPES_HANDLE]] @dx.op.annotateHandle(i32 216, [[DX_TYPES_HANDLE]] [[TMP11]], [[DX_TYPES_RESOURCEPROPERTIES]] { i32 4098, i32 1033 })
; METADATA-NEXT:    [[TMP13:%.*]] = extractelement <4 x float> [[TMP8]], i64 0
; METADATA-NEXT:    [[TMP14:%.*]] = extractelement <4 x float> [[TMP8]], i64 1
; METADATA-NEXT:    [[TMP15:%.*]] = extractelement <4 x float> [[TMP8]], i64 2
; METADATA-NEXT:    [[TMP16:%.*]] = extractelement <4 x float> [[TMP8]], i64 3
; METADATA-NEXT:    call void @dx.op.textureStore.f32(i32 67, [[DX_TYPES_HANDLE]] [[TMP12]], i32 [[TMP9]], i32 [[TMP10]], i32 undef, float [[TMP13]], float [[TMP14]], float [[TMP15]], float [[TMP16]], i8 15)
; METADATA-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]]) #[[ATTR1]]
; METADATA-NEXT:    ret void
;
  %1 = load %dx.types.Handle, %dx.types.Handle* @"\01?Scene@@3URaytracingAccelerationStructure@@A", align 4
  %2 = load %dx.types.Handle, %dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A", align 4
  %3 = alloca %struct.RayPayload, align 4
  %4 = bitcast %struct.RayPayload* %3 to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #1
  %5 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %3, i32 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %5, align 4, !tbaa !31
  %6 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %7 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 16, i32 0 })  ; AnnotateHandle(res,props)  resource: RTAccelerationStructure
  call void @dx.op.traceRay.struct.RayPayload(i32 157, %dx.types.Handle %7, i32 16, i32 -1, i32 0, i32 1, i32 0, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3F50624DE0000000, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+04, %struct.RayPayload* nonnull %3)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %8 = load <4 x float>, <4 x float>* %5, align 4, !tbaa !31
  %9 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %10 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %11 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %2)  ; CreateHandleForLib(Resource)
  %12 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %13 = extractelement <4 x float> %8, i64 0
  %14 = extractelement <4 x float> %8, i64 1
  %15 = extractelement <4 x float> %8, i64 2
  %16 = extractelement <4 x float> %8, i64 3
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %12, i32 %9, i32 %10, i32 undef, float %13, float %14, float %15, float %16, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @llvm.lifetime.end(i64 16, i8* %4) #1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind
define void @MyClosestHitShader(%struct.RayPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) #0 {
; METADATA: Function Attrs: nounwind
; METADATA-LABEL: define void @MyClosestHitShader
; METADATA-SAME: (%struct.RayPayload* noalias nocapture [[PAYLOAD:%.*]], %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly [[ATTR:%.*]]) #[[ATTR2]] !types !54 {
; METADATA-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]], %struct.BuiltInTriangleIntersectionAttributes* [[ATTR]], i32 0, i32 0
; METADATA-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[TMP1]], align 4
; METADATA-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i32 0
; METADATA-NEXT:    [[TMP4:%.*]] = fsub fast float 1.000000e+00, [[TMP3]]
; METADATA-NEXT:    [[TMP5:%.*]] = extractelement <2 x float> [[TMP2]], i32 1
; METADATA-NEXT:    [[TMP6:%.*]] = fsub fast float [[TMP4]], [[TMP5]]
; METADATA-NEXT:    [[TMP7:%.*]] = insertelement <4 x float> undef, float [[TMP6]], i64 0
; METADATA-NEXT:    [[TMP8:%.*]] = insertelement <4 x float> [[TMP7]], float [[TMP3]], i64 1
; METADATA-NEXT:    [[TMP9:%.*]] = insertelement <4 x float> [[TMP8]], float [[TMP5]], i64 2
; METADATA-NEXT:    [[TMP10:%.*]] = insertelement <4 x float> [[TMP9]], float 1.000000e+00, i64 3
; METADATA-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_RAYPAYLOAD:%.*]], %struct.RayPayload* [[PAYLOAD]], i32 0, i32 0
; METADATA-NEXT:    store <4 x float> [[TMP10]], <4 x float>* [[TMP11]], align 4
; METADATA-NEXT:    ret void
;
  %1 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %2 = load <2 x float>, <2 x float>* %1, align 4
  %3 = extractelement <2 x float> %2, i32 0
  %4 = fsub fast float 1.000000e+00, %3
  %5 = extractelement <2 x float> %2, i32 1
  %6 = fsub fast float %4, %5
  %7 = insertelement <4 x float> undef, float %6, i64 0
  %8 = insertelement <4 x float> %7, float %3, i64 1
  %9 = insertelement <4 x float> %8, float %5, i64 2
  %10 = insertelement <4 x float> %9, float 1.000000e+00, i64 3
  %11 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %payload, i32 0, i32 0
  store <4 x float> %10, <4 x float>* %11, align 4
  ret void
}

; Function Attrs: nounwind
define void @MyAnyHitShader(%struct.RayPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readnone %attr) #0 {
; METADATA: Function Attrs: nounwind
; METADATA-LABEL: define void @MyAnyHitShader
; METADATA-SAME: (%struct.RayPayload* noalias nocapture [[PAYLOAD:%.*]], %struct.BuiltInTriangleIntersectionAttributes* nocapture readnone [[ATTR:%.*]]) #[[ATTR2]] !types !54 {
; METADATA-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_RAYPAYLOAD:%.*]], %struct.RayPayload* [[PAYLOAD]], i32 0, i32 0
; METADATA-NEXT:    [[TMP2:%.*]] = load <4 x float>, <4 x float>* [[TMP1]], align 4
; METADATA-NEXT:    [[TMP3:%.*]] = call float @dx.op.objectRayOrigin.f32(i32 149, i8 0)
; METADATA-NEXT:    [[TMP4:%.*]] = call float @dx.op.objectRayDirection.f32(i32 150, i8 0)
; METADATA-NEXT:    [[TMP5:%.*]] = call float @dx.op.rayTCurrent.f32(i32 154)
; METADATA-NEXT:    [[TMP6:%.*]] = fmul fast float [[TMP5]], [[TMP4]]
; METADATA-NEXT:    [[TMP7:%.*]] = fadd fast float [[TMP6]], [[TMP3]]
; METADATA-NEXT:    [[TMP8:%.*]] = fcmp fast ogt float [[TMP7]], 0.000000e+00
; METADATA-NEXT:    [[TMP9:%.*]] = fcmp fast ogt float [[TMP7]], 1.000000e+00
; METADATA-NEXT:    [[TMP10:%.*]] = fcmp fast ogt float [[TMP7]], -1.000000e+00
; METADATA-NEXT:    br i1 [[TMP8]], label [[TMP11:%.*]], label [[TMP14:%.*]]
; METADATA:       11:
; METADATA-NEXT:    store <4 x float> [[TMP2]], <4 x float>* [[TMP1]], align 4
; METADATA-NEXT:    br i1 [[TMP9]], label [[TMP12:%.*]], label [[TMP13:%.*]]
; METADATA:       12:
; METADATA-NEXT:    call void @dx.op.acceptHitAndEndSearch(i32 156)
; METADATA-NEXT:    unreachable
; METADATA:       13:
; METADATA-NEXT:    call void @dx.op.acceptHitAndEndSearch(i32 156)
; METADATA-NEXT:    ret void
; METADATA:       14:
; METADATA-NEXT:    br i1 [[TMP10]], label [[TMP15:%.*]], label [[TMP18:%.*]]
; METADATA:       15:
; METADATA-NEXT:    br i1 [[TMP9]], label [[TMP16:%.*]], label [[TMP17:%.*]]
; METADATA:       16:
; METADATA-NEXT:    call void @dx.op.ignoreHit(i32 155)
; METADATA-NEXT:    unreachable
; METADATA:       17:
; METADATA-NEXT:    call void @dx.op.ignoreHit(i32 155)
; METADATA-NEXT:    ret void
; METADATA:       18:
; METADATA-NEXT:    store <4 x float> [[TMP2]], <4 x float>* [[TMP1]], align 4
; METADATA-NEXT:    ret void
;
  %1 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %payload, i32 0, i32 0
  %2 = load <4 x float>, <4 x float>* %1, align 4
  %3 = call float @dx.op.objectRayOrigin.f32(i32 149, i8 0)  ; ObjectRayOrigin(col)
  %4 = call float @dx.op.objectRayDirection.f32(i32 150, i8 0)  ; ObjectRayDirection(col)
  %5 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %6 = fmul fast float %5, %4
  %7 = fadd fast float %6, %3
  %8 = fcmp fast ogt float %7, 0.000000e+00
  %9 = fcmp fast ogt float %7, 1.000000e+00
  %10 = fcmp fast ogt float %7, -1.000000e+00
  br i1 %8, label %11, label %14

; <label>:11                                        ; preds = %0
; acceptHitAndEndSearch
  store <4 x float> %2, <4 x float>* %1, align 4
  br i1 %9, label %12, label %13

; <label>:12                                        ; preds = %11
; acceptHitAndEndSearch with unreachable
  call void @dx.op.acceptHitAndEndSearch(i32 156)   ; AcceptHitAndEndSearch()
  unreachable

; <label>:13                                        ; preds = %11
; acceptHitAndEndSearch with ret void
  call void @dx.op.acceptHitAndEndSearch(i32 156)   ; AcceptHitAndEndSearch()
  ret void

; <label>:14                                        ; preds = %0
; IgnoreHit or AcceptHit
  br i1 %10, label %15, label %18

; <label>:15                                        ; preds = %14
; IgnoreHit
  br i1 %9, label %16, label %17

; <label>:16                                        ; preds = %15
; IgnoreHit with unreachable
  call void @dx.op.ignoreHit(i32 155)               ; IgnoreHit()
  unreachable

; <label>:17                                        ; preds = %15
; IgnoreHit with ret void (as emitted by debug mode dxc)
  call void @dx.op.ignoreHit(i32 155)               ; IgnoreHit()
  ret void

; <label>:18                                        ; preds = %14
; AcceptHit
  store <4 x float> %2, <4 x float>* %1, align 4
  ret void
}

; Function Attrs: nounwind
define void @MyIntersectionShader() #0 {
; METADATA: Function Attrs: nounwind
; METADATA-LABEL: define void @MyIntersectionShader
; METADATA-SAME: () #[[ATTR2]] {
; METADATA-NEXT:    [[TMP1:%.*]] = alloca [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]], align 4
; METADATA-NEXT:    [[TMP2:%.*]] = call float @dx.op.rayTCurrent.f32(i32 154)
; METADATA-NEXT:    [[TMP3:%.*]] = bitcast %struct.BuiltInTriangleIntersectionAttributes* [[TMP1]] to i8*
; METADATA-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP3]]) #[[ATTR1]]
; METADATA-NEXT:    [[TMP4:%.*]] = call i1 @dx.op.reportHit.struct.BuiltInTriangleIntersectionAttributes(i32 158, float [[TMP2]], i32 0, %struct.BuiltInTriangleIntersectionAttributes* nonnull [[TMP1]])
; METADATA-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP3]]) #[[ATTR1]]
; METADATA-NEXT:    ret void
;
  %1 = alloca %struct.BuiltInTriangleIntersectionAttributes, align 4
  %2 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %3 = bitcast %struct.BuiltInTriangleIntersectionAttributes* %1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = call i1 @dx.op.reportHit.struct.BuiltInTriangleIntersectionAttributes(i32 158, float %2, i32 0, %struct.BuiltInTriangleIntersectionAttributes* nonnull %1)  ; ReportHit(THit,HitKind,Attributes)
  call void @llvm.lifetime.end(i64 8, i8* %3) #1
  ret void
}

; Function Attrs: nounwind
; Note: manually added types metadata to validate that metadata is not added twice.
define void @MyMissShader(%struct.RayPayload* noalias nocapture %payload) #0 !types !35 {
; METADATA: Function Attrs: nounwind
; METADATA-LABEL: define void @MyMissShader
; METADATA-SAME: (%struct.RayPayload* noalias nocapture [[PAYLOAD:%.*]]) #[[ATTR2]] !types !57 {
; METADATA-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_RAYPAYLOAD:%.*]], %struct.RayPayload* [[PAYLOAD]], i32 0, i32 0
; METADATA-NEXT:    store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* [[TMP1]], align 4
; METADATA-NEXT:    ret void
;
  %1 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %payload, i32 0, i32 0
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %1, align 4
  ret void
}

; Function Attrs: nounwind
declare void @dx.op.traceRay.struct.RayPayload(i32, %dx.types.Handle, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, %struct.RayPayload*) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.dispatchRaysIndex.i32(i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.objectRayDirection.f32(i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.objectRayOrigin.f32(i32, i8) #2

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #3

; Function Attrs: noreturn nounwind
declare void @dx.op.acceptHitAndEndSearch(i32) #4

; Function Attrs: noreturn nounwind
declare void @dx.op.ignoreHit(i32) #4

; Function Attrs: nounwind
declare i1 @dx.op.reportHit.struct.BuiltInTriangleIntersectionAttributes(i32, float, i32, %struct.BuiltInTriangleIntersectionAttributes*) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32, %dx.types.Handle) #3

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!1}
!dx.shaderModel = !{!2}
!dx.resources = !{!3}
!dx.typeAnnotations = !{!10}
!dx.entryPoints = !{!18, !20, !23, !25, !27, !29}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{!"lib", i32 6, i32 6}
!3 = !{!4, !7, null, null}
!4 = !{!5}
!5 = !{i32 0, %struct.RaytracingAccelerationStructure* bitcast (%dx.types.Handle* @"\01?Scene@@3URaytracingAccelerationStructure@@A" to %struct.RaytracingAccelerationStructure*), !"Scene", i32 0, i32 0, i32 1, i32 16, i32 0, !6}
!6 = !{i32 0, i32 4}
!7 = !{!8}
!8 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" to %"class.RWTexture2D<vector<float, 4> >"*), !"RenderTarget", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 1, void ()* @MyRayGen, !11, void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyClosestHitShader, !14, void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyAnyHitShader, !14, void ()* @MyIntersectionShader, !11, void (%struct.RayPayload*)* @MyMissShader, !17}
!11 = !{!12}
!12 = !{i32 1, !13, !13}
!13 = !{}
!14 = !{!12, !15, !16}
!15 = !{i32 2, !13, !13}
!16 = !{i32 0, !13, !13}
!17 = !{!12, !15}
!18 = !{null, !"", null, !3, !19}
!19 = !{i32 0, i64 65536}
!20 = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyAnyHitShader, !"MyAnyHitShader", null, null, !21}
!21 = !{i32 8, i32 9, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
!22 = !{i32 0}
!23 = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyClosestHitShader, !"MyClosestHitShader", null, null, !24}
!24 = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
!25 = !{void ()* @MyIntersectionShader, !"MyIntersectionShader", null, null, !26}
!26 = !{i32 8, i32 8, i32 5, !22}
!27 = !{void (%struct.RayPayload*)* @MyMissShader, !"MyMissShader", null, null, !28}
!28 = !{i32 8, i32 11, i32 6, i32 16, i32 5, !22}
!29 = !{void ()* @MyRayGen, !"MyRayGen", null, null, !30}
!30 = !{i32 8, i32 7, i32 5, !22}
!31 = !{!32, !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
!34 = !{i32 0, %struct.RayPayload poison}
!35 = !{!"function", !"void", !34}

;.
; METADATA: attributes #[[ATTR0]] = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
; METADATA: attributes #[[ATTR1]] = { nounwind }
; METADATA: attributes #[[ATTR2]] = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
; METADATA: attributes #[[ATTR3]] = { nounwind memory(none) }
; METADATA: attributes #[[ATTR4:[0-9]+]] = { nounwind memory(read) }
; METADATA: attributes #[[ATTR5:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
;.
; METADATA: [[META0:![0-9]+]] = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
; METADATA: [[META1:![0-9]+]] = !{i32 1, i32 6}
; METADATA: [[META2:![0-9]+]] = !{!"lib", i32 6, i32 6}
; METADATA: [[META3:![0-9]+]] = !{!4, !7, null, null}
; METADATA: [[META4:![0-9]+]] = !{!5}
; METADATA: [[META5:![0-9]+]] = !{i32 0, %struct.RaytracingAccelerationStructure* bitcast (%dx.types.Handle* @"\01?Scene@@3URaytracingAccelerationStructure@@A" to %struct.RaytracingAccelerationStructure*), !"Scene", i32 0, i32 0, i32 1, i32 16, i32 0, !6}
; METADATA: [[META6:![0-9]+]] = !{i32 0, i32 4}
; METADATA: [[META7:![0-9]+]] = !{!8}
; METADATA: [[META8:![0-9]+]] = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" to %"class.RWTexture2D<vector<float, 4> >"*), !"RenderTarget", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
; METADATA: [[META9:![0-9]+]] = !{i32 0, i32 9}
; METADATA: [[META10:![0-9]+]] = !{i32 1, void ()* @MyRayGen, !11, void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyClosestHitShader, !14, void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyAnyHitShader, !14, void ()* @MyIntersectionShader, !11, void (%struct.RayPayload*)* @MyMissShader, !17}
; METADATA: [[META11:![0-9]+]] = !{!12}
; METADATA: [[META12:![0-9]+]] = !{i32 1, !13, !13}
; METADATA: [[META13:![0-9]+]] = !{}
; METADATA: [[META14:![0-9]+]] = !{!12, !15, !16}
; METADATA: [[META15:![0-9]+]] = !{i32 2, !13, !13}
; METADATA: [[META16:![0-9]+]] = !{i32 0, !13, !13}
; METADATA: [[META17:![0-9]+]] = !{!12, !15}
; METADATA: [[META18:![0-9]+]] = !{null, !"", null, !3, !19}
; METADATA: [[META19:![0-9]+]] = !{i32 0, i64 65536}
; METADATA: [[META20:![0-9]+]] = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyAnyHitShader, !"MyAnyHitShader", null, null, !21}
; METADATA: [[META21:![0-9]+]] = !{i32 8, i32 9, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
; METADATA: [[META22:![0-9]+]] = !{i32 0}
; METADATA: [[META23:![0-9]+]] = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyClosestHitShader, !"MyClosestHitShader", null, null, !24}
; METADATA: [[META24:![0-9]+]] = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
; METADATA: [[META25:![0-9]+]] = !{void ()* @MyIntersectionShader, !"MyIntersectionShader", null, null, !26}
; METADATA: [[META26:![0-9]+]] = !{i32 8, i32 8, i32 5, !22}
; METADATA: [[META27:![0-9]+]] = !{void (%struct.RayPayload*)* @MyMissShader, !"MyMissShader", null, null, !28}
; METADATA: [[META28:![0-9]+]] = !{i32 8, i32 11, i32 6, i32 16, i32 5, !22}
; METADATA: [[META29:![0-9]+]] = !{void ()* @MyRayGen, !"MyRayGen", null, null, !30}
; METADATA: [[META30:![0-9]+]] = !{i32 8, i32 7, i32 5, !22}
; METADATA: [[META31:![0-9]+]] = !{!"function", [[STRUCT_HITDATA:%.*]] poison, !32}
; METADATA: [[META32:![0-9]+]] = !{i32 0, [[STRUCT_ANYHITTRAVERSALDATA:%.*]] poison}
; METADATA: [[META33:![0-9]+]] = !{!"function", [[STRUCT_HITDATA:%.*]] poison, !34}
; METADATA: [[META34:![0-9]+]] = !{i32 0, [[STRUCT_SYSTEMDATA:%.*]] poison}
; METADATA: [[META35:![0-9]+]] = !{!"function", [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]] poison, !34}
; METADATA: [[META36:![0-9]+]] = !{!"function", !"void", !34, [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]] poison}
; METADATA: [[META37:![0-9]+]] = !{!"function", i32 poison, !38}
; METADATA: [[META38:![0-9]+]] = !{i32 0, [[STRUCT_DISPATCHSYSTEMDATA:%.*]] poison}
; METADATA: [[META39:![0-9]+]] = !{!"function", i1 poison, !40}
; METADATA: [[META40:![0-9]+]] = !{i32 0, [[STRUCT_TRAVERSALDATA:%.*]] poison}
; METADATA: [[META41:![0-9]+]] = !{!"function", i32 poison, !34}
; METADATA: [[META42:![0-9]+]] = !{!"function", !"void", !38}
; METADATA: [[META43:![0-9]+]] = !{!"function", !"void", !32}
; METADATA: [[META44:![0-9]+]] = !{!"function", !"void", !38, i64 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison}
; METADATA: [[META45:![0-9]+]] = !{!"function", !"void", !38, i32 poison}
; METADATA: [[META46:![0-9]+]] = !{!"function", i1 poison, !32, float poison, i32 poison}
; METADATA: [[META47:![0-9]+]] = !{!"function", i32 poison, !38, i32 poison}
; METADATA: [[META48:![0-9]+]] = !{!"function", float poison, !38, !49, i32 poison}
; METADATA: [[META49:![0-9]+]] = !{i32 0, [[STRUCT_HITDATA:%.*]] poison}
; METADATA: [[META50:![0-9]+]] = !{!"function", float poison, !38, !49}
; METADATA: [[TBAA51]] = !{!52, !52, i64 0}
; METADATA: [[META52:![0-9]+]] = !{!"omnipotent char", !53, i64 0}
; METADATA: [[META53:![0-9]+]] = !{!"Simple C/C++ TBAA"}
; METADATA: [[META54:![0-9]+]] = !{!"function", !"void", !55, !56}
; METADATA: [[META55:![0-9]+]] = !{i32 0, [[STRUCT_RAYPAYLOAD:%.*]] poison}
; METADATA: [[META56:![0-9]+]] = !{i32 0, [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]] poison}
; METADATA: [[META57:![0-9]+]] = !{!"function", !"void", !55}
; METADATA: [[META58:![0-9]+]] = !{!"function", !"void", i32 poison, [[DX_TYPES_HANDLE:%.*]] poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, !55}
; METADATA: [[META59:![0-9]+]] = !{!"function", i1 poison, i32 poison, float poison, i32 poison, !56}
; METADATA: [[META60:![0-9]+]] = !{!"function", !"void", i64 poison, !61}
; METADATA: [[META61:![0-9]+]] = !{i32 0, i8 poison}
;.
