; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,remove-types-metadata' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%continuation.token = type { }

declare void @await.void(%continuation.token*)
declare %continuation.token* @async_fun()

define <4 x i32> @simple_await(<4 x i32> %arg) !continuation.registercount !1 {
; CHECK-LABEL: @simple_await(
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CHECK-NEXT:    call void @continuation.save.continuation_state()
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to i8*
; CHECK-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP0]] to %simple_await.Frame*
; CHECK-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], %simple_await.Frame* [[FRAMEPTR]], i32 0, i32 0
; CHECK-NEXT:    store <4 x i32> [[ARG:%.*]], <4 x i32>* [[ARG_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], %simple_await.Frame* [[FRAMEPTR]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[RETURNADDR:%.*]], i64* [[RETURNADDR_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[TMP1]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 24
; CHECK-NEXT:    store i32 [[TMP3]], i32* [[TMP1]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CHECK-NEXT:    call void (...) @registerbuffer.setpointerbarrier([6 x i32]* @CONTINUATION_STATE, i32* [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4
; CHECK-NEXT:    store i32 [[TMP6]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP7]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP9]], align 4
; CHECK-NEXT:    store i32 [[TMP10]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 2), align 4
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[TMP11]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 3), align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[TMP13]], align 4
; CHECK-NEXT:    store i32 [[TMP14]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 4), align 4
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[TMP15]], align 4
; CHECK-NEXT:    store i32 [[TMP16]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 5), align 4
; CHECK-NEXT:    [[TMP17:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* [[TMP17]], align 4
; CHECK-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (%continuation.token* ()* @async_fun to i64), i32 [[TMP18]], i64 ptrtoint (void (i32)* @simple_await.resume.0 to i64)), !continuation.registercount !2, !continuation.returnedRegistercount !2
; CHECK-NEXT:    unreachable
;
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  ret <4 x i32> %arg, !continuation.registercount !1
}

define void @simple_await_entry(<4 x i32> %arg, <4 x i32> addrspace(1)* %mem) !continuation.entry !0 !continuation.registercount !1 {
; CHECK-LABEL: @simple_await_entry(
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to i8*
; CHECK-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP0]] to %simple_await_entry.Frame*
; CHECK-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], %simple_await_entry.Frame* [[FRAMEPTR]], i32 0, i32 1
; CHECK-NEXT:    store <4 x i32> addrspace(1)* [[MEM:%.*]], <4 x i32> addrspace(1)** [[MEM_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], %simple_await_entry.Frame* [[FRAMEPTR]], i32 0, i32 0
; CHECK-NEXT:    store <4 x i32> [[ARG:%.*]], <4 x i32>* [[ARG_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[TMP1]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 24
; CHECK-NEXT:    store i32 [[TMP3]], i32* [[TMP1]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CHECK-NEXT:    call void (...) @registerbuffer.setpointerbarrier([6 x i32]* @CONTINUATION_STATE, i32* [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4
; CHECK-NEXT:    store i32 [[TMP6]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP7]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP9]], align 4
; CHECK-NEXT:    store i32 [[TMP10]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 2), align 4
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[TMP11]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 3), align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[TMP13]], align 4
; CHECK-NEXT:    store i32 [[TMP14]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 4), align 4
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[TMP15]], align 4
; CHECK-NEXT:    store i32 [[TMP16]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 5), align 4
; CHECK-NEXT:    [[TMP17:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* [[TMP17]], align 4
; CHECK-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (%continuation.token* ()* @async_fun to i64), i32 [[TMP18]], i64 ptrtoint (void (i32)* @simple_await_entry.resume.0 to i64)), !continuation.registercount !2, !continuation.returnedRegistercount !2
; CHECK-NEXT:    unreachable
;
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  store <4 x i32> %arg, <4 x i32> addrspace(1)* %mem
  ret void, !continuation.registercount !1
}

!continuation.stackAddrspace = !{!2}

!0 = !{}
!1 = !{i32 0}
!2 = !{i32 21}
