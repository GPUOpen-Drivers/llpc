; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,remove-types-metadata' -S %s 2>%t0.stderr | FileCheck -check-prefix=CLEANUP %s
; RUN: count 0 < %t0.stderr
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,dxil-cont-post-process,lint,remove-types-metadata' \
; RUN:     -S %s 2>%t1.stderr | FileCheck -check-prefix=POST-PROCESS %s
; RUN: count 0 < %t1.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%continuation.token = type { }

declare void @await.void(%continuation.token*)
declare i32 @_cont_GetContinuationStackAddr()
declare %continuation.token* @async_fun()

@PAYLOAD = external addrspace(20) global [30 x i32]

define <4 x i32> @simple_await(<4 x i32> %arg) !continuation.registercount !1 {
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  ret <4 x i32> %arg, !continuation.registercount !1
}

define void @simple_await_entry(<4 x i32> %arg, <4 x i32> addrspace(1)* %mem) !continuation.entry !0 !continuation.registercount !1 {
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  store <4 x i32> %arg, <4 x i32> addrspace(1)* %mem
  ret void, !continuation.registercount !1
}

!continuation.maxPayloadRegisterCount = !{!2}
!continuation.stackAddrspace = !{!3}

!0 = !{}
!1 = !{i32 0}
!2 = !{i32 30}
!3 = !{i32 21}
; CLEANUP-LABEL: @simple_await(
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    call void @continuation.save.continuation_state()
; CLEANUP-NEXT:    [[TMP0:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP0]] to %simple_await.Frame*
; CLEANUP-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], %simple_await.Frame* [[FRAMEPTR]], i32 0, i32 0
; CLEANUP-NEXT:    store <4 x i32> [[ARG:%.*]], <4 x i32>* [[ARG_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], %simple_await.Frame* [[FRAMEPTR]], i32 0, i32 1
; CLEANUP-NEXT:    store i64 [[RETURNADDR:%.*]], i64* [[RETURNADDR_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP2:%.*]] = load i32, i32* [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 24
; CLEANUP-NEXT:    store i32 [[TMP3]], i32* [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([6 x i32]* @CONTINUATION_STATE, i32* [[TMP4]])
; CLEANUP-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4
; CLEANUP-NEXT:    store i32 [[TMP6]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP7]], align 4
; CLEANUP-NEXT:    store i32 [[TMP8]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP9]], align 4
; CLEANUP-NEXT:    store i32 [[TMP10]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP12:%.*]] = load i32, i32* [[TMP11]], align 4
; CLEANUP-NEXT:    store i32 [[TMP12]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP14:%.*]] = load i32, i32* [[TMP13]], align 4
; CLEANUP-NEXT:    store i32 [[TMP14]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP16:%.*]] = load i32, i32* [[TMP15]], align 4
; CLEANUP-NEXT:    store i32 [[TMP16]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    [[TMP17:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP18:%.*]] = load i32, i32* [[TMP17]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (%continuation.token* ()* @async_fun to i64), i32 [[TMP18]], i64 ptrtoint (void (i32)* @simple_await.resume.0 to i64)), !continuation.registercount !3, !continuation.returnedRegistercount !3
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: @simple_await.resume.0(
; CLEANUP-NEXT:  entryresume.0:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP2:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    store i32 [[TMP2]], i32* [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP4:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP4]], i32* [[TMP3]], align 4
; CLEANUP-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP6:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    store i32 [[TMP6]], i32* [[TMP5]], align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    store i32 [[TMP8]], i32* [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    store i32 [[TMP10]], i32* [[TMP9]], align 4
; CLEANUP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP12:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    store i32 [[TMP12]], i32* [[TMP11]], align 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([6 x i32]* @CONTINUATION_STATE, i32* [[TMP13]])
; CLEANUP-NEXT:    [[TMP14:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP15:%.*]] = load i32, i32* [[TMP14]], align 4
; CLEANUP-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], -24
; CLEANUP-NEXT:    store i32 [[TMP16]], i32* [[TMP14]], align 4
; CLEANUP-NEXT:    [[TMP17:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to %simple_await.Frame*
; CLEANUP-NEXT:    [[VFRAME:%.*]] = bitcast %simple_await.Frame* [[TMP17]] to i8*
; CLEANUP-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], %simple_await.Frame* [[TMP17]], i32 0, i32 0
; CLEANUP-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, <4 x i32>* [[ARG_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    [[RETURNADDR_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], %simple_await.Frame* [[TMP17]], i32 0, i32 1
; CLEANUP-NEXT:    [[RETURNADDR_RELOAD:%.*]] = load i64, i64* [[RETURNADDR_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    call void @continuation.restore.continuation_state()
; CLEANUP-NEXT:    [[TMP18:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP19:%.*]] = load i32, i32* [[TMP18]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR_RELOAD]], i32 [[TMP19]], <4 x i32> [[ARG_RELOAD]]), !continuation.registercount !3
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: @simple_await_entry(
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    [[TMP0:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP0]] to %simple_await_entry.Frame*
; CLEANUP-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], %simple_await_entry.Frame* [[FRAMEPTR]], i32 0, i32 1
; CLEANUP-NEXT:    store <4 x i32> addrspace(1)* [[MEM:%.*]], <4 x i32> addrspace(1)** [[MEM_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], %simple_await_entry.Frame* [[FRAMEPTR]], i32 0, i32 0
; CLEANUP-NEXT:    store <4 x i32> [[ARG:%.*]], <4 x i32>* [[ARG_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP2:%.*]] = load i32, i32* [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 24
; CLEANUP-NEXT:    store i32 [[TMP3]], i32* [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([6 x i32]* @CONTINUATION_STATE, i32* [[TMP4]])
; CLEANUP-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4
; CLEANUP-NEXT:    store i32 [[TMP6]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP7]], align 4
; CLEANUP-NEXT:    store i32 [[TMP8]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP9]], align 4
; CLEANUP-NEXT:    store i32 [[TMP10]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP12:%.*]] = load i32, i32* [[TMP11]], align 4
; CLEANUP-NEXT:    store i32 [[TMP12]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP14:%.*]] = load i32, i32* [[TMP13]], align 4
; CLEANUP-NEXT:    store i32 [[TMP14]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP16:%.*]] = load i32, i32* [[TMP15]], align 4
; CLEANUP-NEXT:    store i32 [[TMP16]], i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    [[TMP17:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP18:%.*]] = load i32, i32* [[TMP17]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (%continuation.token* ()* @async_fun to i64), i32 [[TMP18]], i64 ptrtoint (void (i32)* @simple_await_entry.resume.0 to i64)), !continuation.registercount !3, !continuation.returnedRegistercount !3
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: @simple_await_entry.resume.0(
; CLEANUP-NEXT:  entryresume.0:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP2:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    store i32 [[TMP2]], i32* [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP4:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP4]], i32* [[TMP3]], align 4
; CLEANUP-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP6:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    store i32 [[TMP6]], i32* [[TMP5]], align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    store i32 [[TMP8]], i32* [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    store i32 [[TMP10]], i32* [[TMP9]], align 4
; CLEANUP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP12:%.*]] = load i32, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    store i32 [[TMP12]], i32* [[TMP11]], align 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([6 x i32]* @CONTINUATION_STATE, i32* [[TMP13]])
; CLEANUP-NEXT:    [[TMP14:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP15:%.*]] = load i32, i32* [[TMP14]], align 4
; CLEANUP-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], -24
; CLEANUP-NEXT:    store i32 [[TMP16]], i32* [[TMP14]], align 4
; CLEANUP-NEXT:    [[TMP17:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to %simple_await_entry.Frame*
; CLEANUP-NEXT:    [[VFRAME:%.*]] = bitcast %simple_await_entry.Frame* [[TMP17]] to i8*
; CLEANUP-NEXT:    [[MEM_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], %simple_await_entry.Frame* [[TMP17]], i32 0, i32 1
; CLEANUP-NEXT:    [[MEM_RELOAD:%.*]] = load <4 x i32> addrspace(1)*, <4 x i32> addrspace(1)** [[MEM_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], %simple_await_entry.Frame* [[TMP17]], i32 0, i32 0
; CLEANUP-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, <4 x i32>* [[ARG_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    store <4 x i32> [[ARG_RELOAD]], <4 x i32> addrspace(1)* [[MEM_RELOAD]], align 4
; CLEANUP-NEXT:    call void @continuation.complete()
; CLEANUP-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: @simple_await(
; POST-PROCESS-NEXT:  AllocaSpillBB:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    store i32 [[CSPINIT:%.*]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP0:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], 0
; POST-PROCESS-NEXT:    store i32 [[TMP1]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = inttoptr i32 [[TMP0]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to i8*
; POST-PROCESS-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP3]] to %simple_await.Frame*
; POST-PROCESS-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], %simple_await.Frame* [[FRAMEPTR]], i32 0, i32 0
; POST-PROCESS-NEXT:    store <4 x i32> [[ARG:%.*]], <4 x i32>* [[ARG_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], %simple_await.Frame* [[FRAMEPTR]], i32 0, i32 1
; POST-PROCESS-NEXT:    store i64 [[RETURNADDR:%.*]], i64* [[RETURNADDR_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = add i32 [[TMP4]], 24
; POST-PROCESS-NEXT:    store i32 [[TMP5]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = load i32, i32* [[TMP6]], align 4
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[TMP8]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP9]], i64 -24
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = bitcast i8 addrspace(21)* [[TMP10]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP11]], i32 0
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = bitcast i32 addrspace(21)* [[TMP12]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP13]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP14]], i32 0, i32 0
; POST-PROCESS-NEXT:    store i32 [[TMP7]], i32 addrspace(21)* [[TMP15]], align 4
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = load i32, i32* [[TMP16]], align 4
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = inttoptr i32 [[TMP18]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP19]], i64 -24
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = bitcast i8 addrspace(21)* [[TMP20]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP21]], i32 0
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = bitcast i32 addrspace(21)* [[TMP22]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP23]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP24]], i32 0, i32 1
; POST-PROCESS-NEXT:    store i32 [[TMP17]], i32 addrspace(21)* [[TMP25]], align 4
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = load i32, i32* [[TMP26]], align 4
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = inttoptr i32 [[TMP28]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP29]], i64 -24
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = bitcast i8 addrspace(21)* [[TMP30]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP31]], i32 0
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = bitcast i32 addrspace(21)* [[TMP32]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP33]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP34]], i32 0, i32 2
; POST-PROCESS-NEXT:    store i32 [[TMP27]], i32 addrspace(21)* [[TMP35]], align 4
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = load i32, i32* [[TMP36]], align 4
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = inttoptr i32 [[TMP38]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP39]], i64 -24
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = bitcast i8 addrspace(21)* [[TMP40]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP41]], i32 0
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = bitcast i32 addrspace(21)* [[TMP42]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP43]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP44]], i32 0, i32 3
; POST-PROCESS-NEXT:    store i32 [[TMP37]], i32 addrspace(21)* [[TMP45]], align 4
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP47:%.*]] = load i32, i32* [[TMP46]], align 4
; POST-PROCESS-NEXT:    [[TMP48:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP49:%.*]] = inttoptr i32 [[TMP48]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP50:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP49]], i64 -24
; POST-PROCESS-NEXT:    [[TMP51:%.*]] = bitcast i8 addrspace(21)* [[TMP50]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP52:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP51]], i32 0
; POST-PROCESS-NEXT:    [[TMP53:%.*]] = bitcast i32 addrspace(21)* [[TMP52]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP54:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP53]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP55:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP54]], i32 0, i32 4
; POST-PROCESS-NEXT:    store i32 [[TMP47]], i32 addrspace(21)* [[TMP55]], align 4
; POST-PROCESS-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP57:%.*]] = load i32, i32* [[TMP56]], align 4
; POST-PROCESS-NEXT:    [[TMP58:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP59:%.*]] = inttoptr i32 [[TMP58]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP60:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP59]], i64 -24
; POST-PROCESS-NEXT:    [[TMP61:%.*]] = bitcast i8 addrspace(21)* [[TMP60]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP62:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP61]], i32 0
; POST-PROCESS-NEXT:    [[TMP63:%.*]] = bitcast i32 addrspace(21)* [[TMP62]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP64:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP63]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP65:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP64]], i32 0, i32 5
; POST-PROCESS-NEXT:    store i32 [[TMP57]], i32 addrspace(21)* [[TMP65]], align 4
; POST-PROCESS-NEXT:    [[TMP66:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP67:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (%continuation.token* ()* @async_fun to i64))
; POST-PROCESS-NEXT:    [[TMP68:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (void (i32)* @simple_await.resume.0 to i64))
; POST-PROCESS-NEXT:    call void (i64, ...) @continuation.continue(i64 [[TMP67]], i32 [[TMP66]], i64 [[TMP68]]), !continuation.registercount !2, !continuation.returnedRegistercount !2
; POST-PROCESS-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: @simple_await.resume.0(
; POST-PROCESS-NEXT:  entryresume.0:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    store i32 [[TMP0:%.*]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = inttoptr i32 [[TMP2]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP3]], i64 -24
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = bitcast i8 addrspace(21)* [[TMP4]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP5]], i32 0
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = bitcast i32 addrspace(21)* [[TMP6]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP7]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP8]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = load i32, i32 addrspace(21)* [[TMP9]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP10]], i32* [[TMP1]], align 4
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = inttoptr i32 [[TMP12]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP13]], i64 -24
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = bitcast i8 addrspace(21)* [[TMP14]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP15]], i32 0
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = bitcast i32 addrspace(21)* [[TMP16]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP17]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP18]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = load i32, i32 addrspace(21)* [[TMP19]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP20]], i32* [[TMP11]], align 4
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = inttoptr i32 [[TMP22]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP23]], i64 -24
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = bitcast i8 addrspace(21)* [[TMP24]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP25]], i32 0
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = bitcast i32 addrspace(21)* [[TMP26]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP27]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP28]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = load i32, i32 addrspace(21)* [[TMP29]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP30]], i32* [[TMP21]], align 4
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = inttoptr i32 [[TMP32]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP33]], i64 -24
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = bitcast i8 addrspace(21)* [[TMP34]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP35]], i32 0
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = bitcast i32 addrspace(21)* [[TMP36]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP37]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP38]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = load i32, i32 addrspace(21)* [[TMP39]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP40]], i32* [[TMP31]], align 4
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = inttoptr i32 [[TMP42]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP43]], i64 -24
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = bitcast i8 addrspace(21)* [[TMP44]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP45]], i32 0
; POST-PROCESS-NEXT:    [[TMP47:%.*]] = bitcast i32 addrspace(21)* [[TMP46]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP48:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP47]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP49:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP48]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP50:%.*]] = load i32, i32 addrspace(21)* [[TMP49]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP50]], i32* [[TMP41]], align 4
; POST-PROCESS-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP52:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP53:%.*]] = inttoptr i32 [[TMP52]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP54:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP53]], i64 -24
; POST-PROCESS-NEXT:    [[TMP55:%.*]] = bitcast i8 addrspace(21)* [[TMP54]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP56:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP55]], i32 0
; POST-PROCESS-NEXT:    [[TMP57:%.*]] = bitcast i32 addrspace(21)* [[TMP56]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP58:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP57]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP59:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP58]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP60:%.*]] = load i32, i32 addrspace(21)* [[TMP59]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP60]], i32* [[TMP51]], align 4
; POST-PROCESS-NEXT:    [[TMP61:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP62:%.*]] = add i32 [[TMP61]], -24
; POST-PROCESS-NEXT:    store i32 [[TMP62]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP63:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to %simple_await.Frame*
; POST-PROCESS-NEXT:    [[VFRAME:%.*]] = bitcast %simple_await.Frame* [[TMP63]] to i8*
; POST-PROCESS-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], %simple_await.Frame* [[TMP63]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, <4 x i32>* [[ARG_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    [[RETURNADDR_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], %simple_await.Frame* [[TMP63]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[RETURNADDR_RELOAD:%.*]] = load i64, i64* [[RETURNADDR_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    [[TMP64:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP65:%.*]] = add i32 [[TMP64]], 0
; POST-PROCESS-NEXT:    store i32 [[TMP65]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP66:%.*]] = inttoptr i32 [[TMP65]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP67:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR_RELOAD]], i32 [[TMP67]], <4 x i32> [[ARG_RELOAD]]), !continuation.registercount !2
; POST-PROCESS-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: @simple_await_entry(
; POST-PROCESS-NEXT:  AllocaSpillBB:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    [[TMP0:%.*]] = call i32 @_cont_GetContinuationStackAddr()
; POST-PROCESS-NEXT:    store i32 [[TMP0]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to i8*
; POST-PROCESS-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP1]] to %simple_await_entry.Frame*
; POST-PROCESS-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], %simple_await_entry.Frame* [[FRAMEPTR]], i32 0, i32 1
; POST-PROCESS-NEXT:    store <4 x i32> addrspace(1)* [[MEM:%.*]], <4 x i32> addrspace(1)** [[MEM_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], %simple_await_entry.Frame* [[FRAMEPTR]], i32 0, i32 0
; POST-PROCESS-NEXT:    store <4 x i32> [[ARG:%.*]], <4 x i32>* [[ARG_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 24
; POST-PROCESS-NEXT:    store i32 [[TMP3]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = load i32, i32* [[TMP4]], align 4
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = inttoptr i32 [[TMP6]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP7]], i64 -24
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = bitcast i8 addrspace(21)* [[TMP8]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP9]], i32 0
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = bitcast i32 addrspace(21)* [[TMP10]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP11]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP12]], i32 0, i32 0
; POST-PROCESS-NEXT:    store i32 [[TMP5]], i32 addrspace(21)* [[TMP13]], align 4
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = load i32, i32* [[TMP14]], align 4
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = inttoptr i32 [[TMP16]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP17]], i64 -24
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = bitcast i8 addrspace(21)* [[TMP18]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP19]], i32 0
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = bitcast i32 addrspace(21)* [[TMP20]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP21]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP22]], i32 0, i32 1
; POST-PROCESS-NEXT:    store i32 [[TMP15]], i32 addrspace(21)* [[TMP23]], align 4
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = load i32, i32* [[TMP24]], align 4
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = inttoptr i32 [[TMP26]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP27]], i64 -24
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = bitcast i8 addrspace(21)* [[TMP28]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP29]], i32 0
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = bitcast i32 addrspace(21)* [[TMP30]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP31]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP32]], i32 0, i32 2
; POST-PROCESS-NEXT:    store i32 [[TMP25]], i32 addrspace(21)* [[TMP33]], align 4
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = load i32, i32* [[TMP34]], align 4
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = inttoptr i32 [[TMP36]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP37]], i64 -24
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = bitcast i8 addrspace(21)* [[TMP38]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP39]], i32 0
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = bitcast i32 addrspace(21)* [[TMP40]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP41]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP42]], i32 0, i32 3
; POST-PROCESS-NEXT:    store i32 [[TMP35]], i32 addrspace(21)* [[TMP43]], align 4
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = load i32, i32* [[TMP44]], align 4
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP47:%.*]] = inttoptr i32 [[TMP46]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP48:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP47]], i64 -24
; POST-PROCESS-NEXT:    [[TMP49:%.*]] = bitcast i8 addrspace(21)* [[TMP48]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP50:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP49]], i32 0
; POST-PROCESS-NEXT:    [[TMP51:%.*]] = bitcast i32 addrspace(21)* [[TMP50]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP52:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP51]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP53:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP52]], i32 0, i32 4
; POST-PROCESS-NEXT:    store i32 [[TMP45]], i32 addrspace(21)* [[TMP53]], align 4
; POST-PROCESS-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP55:%.*]] = load i32, i32* [[TMP54]], align 4
; POST-PROCESS-NEXT:    [[TMP56:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP57:%.*]] = inttoptr i32 [[TMP56]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP58:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP57]], i64 -24
; POST-PROCESS-NEXT:    [[TMP59:%.*]] = bitcast i8 addrspace(21)* [[TMP58]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP60:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP59]], i32 0
; POST-PROCESS-NEXT:    [[TMP61:%.*]] = bitcast i32 addrspace(21)* [[TMP60]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP62:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP61]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP63:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP62]], i32 0, i32 5
; POST-PROCESS-NEXT:    store i32 [[TMP55]], i32 addrspace(21)* [[TMP63]], align 4
; POST-PROCESS-NEXT:    [[TMP64:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP65:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (%continuation.token* ()* @async_fun to i64))
; POST-PROCESS-NEXT:    [[TMP66:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (void (i32)* @simple_await_entry.resume.0 to i64))
; POST-PROCESS-NEXT:    call void (i64, ...) @continuation.continue(i64 [[TMP65]], i32 [[TMP64]], i64 [[TMP66]]), !continuation.registercount !2, !continuation.returnedRegistercount !2
; POST-PROCESS-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: @simple_await_entry.resume.0(
; POST-PROCESS-NEXT:  entryresume.0:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    store i32 [[TMP0:%.*]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = inttoptr i32 [[TMP2]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP3]], i64 -24
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = bitcast i8 addrspace(21)* [[TMP4]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP5]], i32 0
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = bitcast i32 addrspace(21)* [[TMP6]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP7]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP8]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = load i32, i32 addrspace(21)* [[TMP9]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP10]], i32* [[TMP1]], align 4
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = inttoptr i32 [[TMP12]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP13]], i64 -24
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = bitcast i8 addrspace(21)* [[TMP14]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP15]], i32 0
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = bitcast i32 addrspace(21)* [[TMP16]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP17]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP18]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = load i32, i32 addrspace(21)* [[TMP19]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP20]], i32* [[TMP11]], align 4
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = inttoptr i32 [[TMP22]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP23]], i64 -24
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = bitcast i8 addrspace(21)* [[TMP24]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP25]], i32 0
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = bitcast i32 addrspace(21)* [[TMP26]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP27]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP28]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = load i32, i32 addrspace(21)* [[TMP29]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP30]], i32* [[TMP21]], align 4
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = inttoptr i32 [[TMP32]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP33]], i64 -24
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = bitcast i8 addrspace(21)* [[TMP34]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP35]], i32 0
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = bitcast i32 addrspace(21)* [[TMP36]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP37]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP38]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = load i32, i32 addrspace(21)* [[TMP39]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP40]], i32* [[TMP31]], align 4
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = inttoptr i32 [[TMP42]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP43]], i64 -24
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = bitcast i8 addrspace(21)* [[TMP44]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP45]], i32 0
; POST-PROCESS-NEXT:    [[TMP47:%.*]] = bitcast i32 addrspace(21)* [[TMP46]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP48:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP47]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP49:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP48]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP50:%.*]] = load i32, i32 addrspace(21)* [[TMP49]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP50]], i32* [[TMP41]], align 4
; POST-PROCESS-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP52:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP53:%.*]] = inttoptr i32 [[TMP52]] to i8 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP54:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP53]], i64 -24
; POST-PROCESS-NEXT:    [[TMP55:%.*]] = bitcast i8 addrspace(21)* [[TMP54]] to i32 addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP56:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP55]], i32 0
; POST-PROCESS-NEXT:    [[TMP57:%.*]] = bitcast i32 addrspace(21)* [[TMP56]] to [0 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP58:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP57]] to [6 x i32] addrspace(21)*
; POST-PROCESS-NEXT:    [[TMP59:%.*]] = getelementptr [6 x i32], [6 x i32] addrspace(21)* [[TMP58]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP60:%.*]] = load i32, i32 addrspace(21)* [[TMP59]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP60]], i32* [[TMP51]], align 4
; POST-PROCESS-NEXT:    [[TMP61:%.*]] = load i32, i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP62:%.*]] = add i32 [[TMP61]], -24
; POST-PROCESS-NEXT:    store i32 [[TMP62]], i32* [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP63:%.*]] = bitcast [6 x i32]* [[CONT_STATE]] to %simple_await_entry.Frame*
; POST-PROCESS-NEXT:    [[VFRAME:%.*]] = bitcast %simple_await_entry.Frame* [[TMP63]] to i8*
; POST-PROCESS-NEXT:    [[MEM_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], %simple_await_entry.Frame* [[TMP63]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[MEM_RELOAD:%.*]] = load <4 x i32> addrspace(1)*, <4 x i32> addrspace(1)** [[MEM_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], %simple_await_entry.Frame* [[TMP63]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, <4 x i32>* [[ARG_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    store <4 x i32> [[ARG_RELOAD]], <4 x i32> addrspace(1)* [[MEM_RELOAD]], align 4
; POST-PROCESS-NEXT:    call void @continuation.complete()
; POST-PROCESS-NEXT:    unreachable
;
