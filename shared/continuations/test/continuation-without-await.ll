; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,remove-types-metadata' -S %s 2>%t0.stderr | FileCheck -check-prefix=LOWERRAYTRACINGPIPELINE %s
; RUN: count 0 < %t0.stderr
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,remove-types-metadata' \
; RUN:     -S %s 2>%t1.stderr | FileCheck -check-prefix=CLEANUP %s
; RUN: count 0 < %t1.stderr
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,remove-types-metadata' \
; RUN:     -S %s 2>%t2.stderr | FileCheck -check-prefix=SAVESTATE %s
; RUN: count 0 < %t2.stderr

; @called and @main_no_call must be marked as continuation and end with a continue call to the return address

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%struct.MyParams = type { [3 x i32] }
%struct.TheirParams = type { [1 x i32] }
%dx.types.Handle = type { i8* }
%dx.types.ResourceProperties = type { i32, i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }

@"\01?Scene@@3URaytracingAccelerationStructure@@A" = external constant %dx.types.Handle, align 4
@"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4

%struct.DispatchSystemData = type { i32 }
%struct.SystemData = type { %struct.DispatchSystemData }
%struct.TraversalData = type { %struct.SystemData }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }

declare i32 @_cont_GetContinuationStackAddr() #4
declare %struct.DispatchSystemData @_cont_SetupRayGen() #4
declare %struct.DispatchSystemData @_AmdAwaitTraversal(i64, %struct.TraversalData) #4
declare %struct.DispatchSystemData @_AmdAwaitShader(i64, %struct.DispatchSystemData) #4
declare %struct.BuiltInTriangleIntersectionAttributes @_cont_GetTriangleHitAttributes(%struct.SystemData*) #4
declare void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data) #1

define i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* %data) #4 {
  ret i32 5
}

define void @_cont_TraceRay(%struct.DispatchSystemData* %data, i64, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float) #4 {
  %dis_data = load %struct.DispatchSystemData, %struct.DispatchSystemData* %data
  %sys_data = insertvalue %struct.SystemData undef, %struct.DispatchSystemData %dis_data, 0
  %trav_data = insertvalue %struct.TraversalData undef, %struct.SystemData %sys_data, 0
  %newdata = call %struct.DispatchSystemData @_AmdAwaitTraversal(i64 4, %struct.TraversalData %trav_data)
  store %struct.DispatchSystemData %newdata, %struct.DispatchSystemData* %data
  call void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data)
  ret void
}

define void @_cont_CallShader(%struct.DispatchSystemData* %data, i32) #4 {
  %dis_data = load %struct.DispatchSystemData, %struct.DispatchSystemData* %data
  %newdata = call %struct.DispatchSystemData @_AmdAwaitShader(i64 2, %struct.DispatchSystemData %dis_data)
  store %struct.DispatchSystemData %newdata, %struct.DispatchSystemData* %data
  call void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data)
  ret void
}

define void @main() {
  %params = alloca %struct.TheirParams, align 4
  store %struct.TheirParams zeroinitializer, %struct.TheirParams* %params
  call void @dx.op.callShader.struct.TheirParams(i32 159, i32 1, %struct.TheirParams* nonnull %params)  ; CallShader(ShaderIndex,Parameter)
  ret void
}

define void @main_no_call() {
  ret void
}

define void @called(%struct.MyParams* %arg) {
  ret void
}

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32, %dx.types.Handle) #2

; Function Attrs: nounwind
declare void @dx.op.callShader.struct.TheirParams(i32, i32, %struct.TheirParams*) #0

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!1}
!dx.shaderModel = !{!2}
!dx.entryPoints = !{!18, !5, !10, !34}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{!"lib", i32 6, i32 6}
!3 = !{!4, !7, null, null}
!4 = !{!5}
!5 = !{void ()* @main, !"main", null, null, !21}
!6 = !{i32 0, i32 4}
!7 = !{!8}
!8 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" to %"class.RWTexture2D<vector<float, 4> >"*), !"RenderTarget", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
!9 = !{i32 0, i32 9}
!10 = !{void ()* @main_no_call, !"main_no_call", null, null, !21}
!11 = !{!12}
!12 = !{i32 1, !13, !13}
!13 = !{}
!14 = !{!12, !15, !16}
!15 = !{i32 2, !13, !13}
!16 = !{i32 0, !13, !13}
!17 = !{!12, !15}
!18 = !{null, !"", null, !3, !19}
!19 = !{i32 0, i64 65536}
!21 = !{i32 8, i32 7, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
!22 = !{i32 0}
!24 = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
!26 = !{i32 8, i32 8, i32 5, !22}
!28 = !{i32 8, i32 11, i32 6, i32 16, i32 5, !22}
!30 = !{i32 8, i32 7, i32 5, !22}
!31 = !{!32, !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
!34 = !{void (%struct.MyParams*)* @called, !"called", null, null, !35}
!35 = !{i32 8, i32 12}
; LOWERRAYTRACINGPIPELINE-LABEL: @_cont_GetLocalRootIndex(
; LOWERRAYTRACINGPIPELINE-NEXT:    ret i32 5
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: @_cont_TraceRay(
; LOWERRAYTRACINGPIPELINE-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA:%.*]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[SYS_DATA:%.*]] = insertvalue [[STRUCT_SYSTEMDATA:%.*]] undef, [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]], 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TRAV_DATA:%.*]] = insertvalue [[STRUCT_TRAVERSALDATA:%.*]] undef, [[STRUCT_SYSTEMDATA]] [[SYS_DATA]], 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[NEWDATA:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_AmdAwaitTraversal(i64 4, [[STRUCT_TRAVERSALDATA]] [[TRAV_DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[NEWDATA]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: @_cont_CallShader.struct.TheirParams(
; LOWERRAYTRACINGPIPELINE-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA:%.*]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_THEIRPARAMS:%.*]], %struct.TheirParams* [[TMP1:%.*]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP4:%.*]] = bitcast [1 x i32]* [[TMP3]] to i32*
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP5:%.*]] = getelementptr i32, i32* [[TMP4]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP6:%.*]] = getelementptr i32, i32* [[TMP5]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP7:%.*]] = load i32, i32* [[TMP6]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP7]], i32* getelementptr inbounds ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.TheirParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.TheirParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP8:%.*]] = call %continuation.token* inttoptr (i64 2 to %continuation.token* ([[STRUCT_DISPATCHSYSTEMDATA]])*)([[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]]), !continuation.registercount !19, !continuation.returnedRegistercount !19
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP9:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @await.struct.DispatchSystemData(%continuation.token* [[TMP8]])
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_THEIRPARAMS]], %struct.TheirParams* [[TMP1]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP11:%.*]] = bitcast [1 x i32]* [[TMP10]] to i32*
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP12:%.*]] = getelementptr i32, i32* [[TMP11]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP13:%.*]] = getelementptr i32, i32* [[TMP12]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP14:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER]], %struct.TheirParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.TheirParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP14]], i32* [[TMP13]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP9]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: @_cont_CallShader(
; LOWERRAYTRACINGPIPELINE-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA:%.*]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[NEWDATA:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_AmdAwaitShader(i64 2, [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[NEWDATA]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: @main(
; LOWERRAYTRACINGPIPELINE-NEXT:    [[PARAMS:%.*]] = alloca [[STRUCT_THEIRPARAMS:%.*]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP1:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_THEIRPARAMS]] zeroinitializer, %struct.TheirParams* [[PARAMS]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_cont_CallShader.struct.TheirParams(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], i32 1, %struct.TheirParams* [[PARAMS]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: @main_no_call(
; LOWERRAYTRACINGPIPELINE-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP1:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: @called(
; LOWERRAYTRACINGPIPELINE-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP2:%.*]] = alloca [[STRUCT_MYPARAMS:%.*]], align 8
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP3:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP3]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_MYPARAMS]], %struct.MyParams* [[TMP2]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP5:%.*]] = bitcast [3 x i32]* [[TMP4]] to i32*
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP6:%.*]] = getelementptr i32, i32* [[TMP5]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP7:%.*]] = getelementptr i32, i32* [[TMP6]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP8:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP8]], i32* [[TMP7]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP9:%.*]] = getelementptr i32, i32* [[TMP6]], i64 1
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP10:%.*]] = load i32, i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 1), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP10]], i32* [[TMP9]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP11:%.*]] = getelementptr i32, i32* [[TMP6]], i64 2
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP12:%.*]] = load i32, i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 2), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP12]], i32* [[TMP11]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; LOWERRAYTRACINGPIPELINE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_MYPARAMS]], %struct.MyParams* [[TMP2]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP14:%.*]] = bitcast [3 x i32]* [[TMP13]] to i32*
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP15:%.*]] = getelementptr i32, i32* [[TMP14]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP16:%.*]] = getelementptr i32, i32* [[TMP15]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP17:%.*]] = load i32, i32* [[TMP16]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP17]], i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP18:%.*]] = getelementptr i32, i32* [[TMP15]], i64 1
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP19:%.*]] = load i32, i32* [[TMP18]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP19]], i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 1), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP20:%.*]] = getelementptr i32, i32* [[TMP15]], i64 2
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP21:%.*]] = load i32, i32* [[TMP20]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP21]], i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 2), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP22:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    ret [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP22]], !continuation.registercount !23
;
;
; CLEANUP-LABEL: @_cont_GetLocalRootIndex(
; CLEANUP-NEXT:    ret i32 5
;
;
; CLEANUP-LABEL: @main(
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; CLEANUP-NEXT:    [[TMP0:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP0]] to %main.Frame*
; CLEANUP-NEXT:    [[TMP1:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA:%.*]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CLEANUP-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], 0
; CLEANUP-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CLEANUP-NEXT:    [[DIS_DATA_I_FCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT]], 0
; CLEANUP-NEXT:    store i32 0, i32* getelementptr inbounds ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.TheirParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.TheirParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP2:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP3:%.*]] = load i32, i32* [[TMP2]], align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 8
; CLEANUP-NEXT:    store i32 [[TMP4]], i32* [[TMP2]], align 4
; CLEANUP-NEXT:    [[TMP5:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([2 x i32]* @CONTINUATION_STATE, i32* [[TMP5]])
; CLEANUP-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP7:%.*]] = load i32, i32* [[TMP6]], align 4
; CLEANUP-NEXT:    store i32 [[TMP7]], i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP9:%.*]] = load i32, i32* [[TMP8]], align 4
; CLEANUP-NEXT:    store i32 [[TMP9]], i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP11:%.*]] = load i32, i32* [[TMP10]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 2, i32 [[TMP11]], i64 ptrtoint (void (i32, [[STRUCT_DISPATCHSYSTEMDATA]])* @main.resume.0 to i64), [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA_I_FCA_0_INSERT]]), !continuation.registercount !23, !continuation.returnedRegistercount !23
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: @main.resume.0(
; CLEANUP-NEXT:  entryresume.0:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; CLEANUP-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP3:%.*]] = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    store i32 [[TMP3]], i32* [[TMP2]], align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP5:%.*]] = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP5]], i32* [[TMP4]], align 4
; CLEANUP-NEXT:    [[TMP6:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([2 x i32]* @CONTINUATION_STATE, i32* [[TMP6]])
; CLEANUP-NEXT:    [[TMP7:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], -8
; CLEANUP-NEXT:    store i32 [[TMP9]], i32* [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP10]] to %main.Frame*
; CLEANUP-NEXT:    [[VFRAME:%.*]] = bitcast %main.Frame* [[FRAMEPTR]] to i8*
; CLEANUP-NEXT:    [[TMP11:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.TheirParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.TheirParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[DOTFCA_0_EXTRACT1:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP1:%.*]], 0
; CLEANUP-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CLEANUP-NEXT:    call void @continuation.complete()
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: @main_no_call(
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; CLEANUP-NEXT:    [[TMP0:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %main_no_call.Frame*
; CLEANUP-NEXT:    [[TMP1:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA:%.*]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CLEANUP-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], 0
; CLEANUP-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CLEANUP-NEXT:    call void @continuation.complete()
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: @called(
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %called.Frame*
; CLEANUP-NEXT:    [[TMP2:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA:%.*]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CLEANUP-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], 0
; CLEANUP-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CLEANUP-NEXT:    [[TMP3:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = load i32, i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 1), align 4
; CLEANUP-NEXT:    [[TMP5:%.*]] = load i32, i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 2), align 4
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; CLEANUP-NEXT:    store i32 [[TMP3]], i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    store i32 [[TMP4]], i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP5]], i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 2), align 4
; CLEANUP-NEXT:    [[DOTFCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT]], 0
; CLEANUP-NEXT:    [[TMP6:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP7:%.*]] = load i32, i32* [[TMP6]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR:%.*]], i32 [[TMP7]], [[STRUCT_DISPATCHSYSTEMDATA]] [[DOTFCA_0_INSERT]]), !continuation.registercount !25
; CLEANUP-NEXT:    unreachable
;
;
; SAVESTATE-LABEL: @_cont_GetLocalRootIndex(
; SAVESTATE-NEXT:    ret i32 5
;
;
; SAVESTATE-LABEL: @main(
; SAVESTATE-NEXT:  AllocaSpillBB:
; SAVESTATE-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; SAVESTATE-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; SAVESTATE-NEXT:    [[TMP0:%.*]] = call i32 @continuation.initialContinuationStackPtr()
; SAVESTATE-NEXT:    store i32 [[TMP0]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP1:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; SAVESTATE-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP1]] to %main.Frame*
; SAVESTATE-NEXT:    [[TMP2:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA:%.*]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; SAVESTATE-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], 0
; SAVESTATE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; SAVESTATE-NEXT:    [[DIS_DATA_I_FCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT]], 0
; SAVESTATE-NEXT:    store i32 0, i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.TheirParams.layout_callshader* addrspacecast ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.TheirParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[TMP3:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 8
; SAVESTATE-NEXT:    store i32 [[TMP4]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; SAVESTATE-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4
; SAVESTATE-NEXT:    [[TMP7:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP8:%.*]] = inttoptr i32 [[TMP7]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP9:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP8]], i64 -8
; SAVESTATE-NEXT:    [[TMP10:%.*]] = bitcast i8 addrspace(21)* [[TMP9]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP11:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP10]], i32 0
; SAVESTATE-NEXT:    [[TMP12:%.*]] = bitcast i32 addrspace(21)* [[TMP11]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP13:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP12]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP14:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP13]], i32 0, i32 0
; SAVESTATE-NEXT:    store i32 [[TMP6]], i32 addrspace(21)* [[TMP14]], align 4
; SAVESTATE-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; SAVESTATE-NEXT:    [[TMP16:%.*]] = load i32, i32* [[TMP15]], align 4
; SAVESTATE-NEXT:    [[TMP17:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP18:%.*]] = inttoptr i32 [[TMP17]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP19:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP18]], i64 -8
; SAVESTATE-NEXT:    [[TMP20:%.*]] = bitcast i8 addrspace(21)* [[TMP19]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP21:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP20]], i32 0
; SAVESTATE-NEXT:    [[TMP22:%.*]] = bitcast i32 addrspace(21)* [[TMP21]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP23:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP22]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP24:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP23]], i32 0, i32 1
; SAVESTATE-NEXT:    store i32 [[TMP16]], i32 addrspace(21)* [[TMP24]], align 4
; SAVESTATE-NEXT:    [[TMP25:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    call void (i64, ...) @continuation.continue(i64 2, i32 [[TMP25]], i64 ptrtoint (void (i32, [[STRUCT_DISPATCHSYSTEMDATA]])* @main.resume.0 to i64), [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA_I_FCA_0_INSERT]]), !continuation.registercount !21, !continuation.returnedRegistercount !21
; SAVESTATE-NEXT:    unreachable
;
;
; SAVESTATE-LABEL: @main.resume.0(
; SAVESTATE-NEXT:  entryresume.0:
; SAVESTATE-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; SAVESTATE-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; SAVESTATE-NEXT:    store i32 [[TMP0:%.*]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; SAVESTATE-NEXT:    [[TMP3:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP4:%.*]] = inttoptr i32 [[TMP3]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP5:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP4]], i64 -8
; SAVESTATE-NEXT:    [[TMP6:%.*]] = bitcast i8 addrspace(21)* [[TMP5]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP7:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP6]], i32 0
; SAVESTATE-NEXT:    [[TMP8:%.*]] = bitcast i32 addrspace(21)* [[TMP7]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP9:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP8]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP10:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP9]], i32 0, i32 0
; SAVESTATE-NEXT:    [[TMP11:%.*]] = load i32, i32 addrspace(21)* [[TMP10]], align 4
; SAVESTATE-NEXT:    store i32 [[TMP11]], i32* [[TMP2]], align 4
; SAVESTATE-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; SAVESTATE-NEXT:    [[TMP13:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP14:%.*]] = inttoptr i32 [[TMP13]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP15:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP14]], i64 -8
; SAVESTATE-NEXT:    [[TMP16:%.*]] = bitcast i8 addrspace(21)* [[TMP15]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP17:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP16]], i32 0
; SAVESTATE-NEXT:    [[TMP18:%.*]] = bitcast i32 addrspace(21)* [[TMP17]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP19:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP18]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP20:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP19]], i32 0, i32 1
; SAVESTATE-NEXT:    [[TMP21:%.*]] = load i32, i32 addrspace(21)* [[TMP20]], align 4
; SAVESTATE-NEXT:    store i32 [[TMP21]], i32* [[TMP12]], align 4
; SAVESTATE-NEXT:    [[TMP22:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP23:%.*]] = add i32 [[TMP22]], -8
; SAVESTATE-NEXT:    store i32 [[TMP23]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP24:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; SAVESTATE-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP24]] to %main.Frame*
; SAVESTATE-NEXT:    [[VFRAME:%.*]] = bitcast %main.Frame* [[FRAMEPTR]] to i8*
; SAVESTATE-NEXT:    [[TMP25:%.*]] = load i32, i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.TheirParams.layout_callshader* addrspacecast ([[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_THEIRPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.TheirParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[DOTFCA_0_EXTRACT1:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP1:%.*]], 0
; SAVESTATE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; SAVESTATE-NEXT:    call void @continuation.complete()
; SAVESTATE-NEXT:    unreachable
;
;
; SAVESTATE-LABEL: @main_no_call(
; SAVESTATE-NEXT:  AllocaSpillBB:
; SAVESTATE-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; SAVESTATE-NEXT:    [[TMP0:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; SAVESTATE-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %main_no_call.Frame*
; SAVESTATE-NEXT:    [[TMP1:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA:%.*]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; SAVESTATE-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], 0
; SAVESTATE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; SAVESTATE-NEXT:    call void @continuation.complete()
; SAVESTATE-NEXT:    unreachable
;
;
; SAVESTATE-LABEL: @called(
; SAVESTATE-NEXT:  AllocaSpillBB:
; SAVESTATE-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; SAVESTATE-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; SAVESTATE-NEXT:    store i32 [[CSPINIT:%.*]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP1:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; SAVESTATE-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %called.Frame*
; SAVESTATE-NEXT:    [[TMP2:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA:%.*]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; SAVESTATE-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], 0
; SAVESTATE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; SAVESTATE-NEXT:    [[TMP3:%.*]] = load i32, i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[TMP4:%.*]] = load i32, i32 addrspace(20)* addrspacecast (i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 1) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[TMP5:%.*]] = load i32, i32 addrspace(20)* addrspacecast (i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 2) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* addrspacecast ([30 x i32] addrspace(20)* @PAYLOAD to [30 x i32]*))
; SAVESTATE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* addrspacecast ([30 x i32] addrspace(20)* @PAYLOAD to [30 x i32]*))
; SAVESTATE-NEXT:    store i32 [[TMP3]], i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    store i32 [[TMP4]], i32 addrspace(20)* addrspacecast (i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 1) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    store i32 [[TMP5]], i32 addrspace(20)* addrspacecast (i32* getelementptr ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i64 2) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[DOTFCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT]], 0
; SAVESTATE-NEXT:    [[TMP6:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR:%.*]], i32 [[TMP6]], [[STRUCT_DISPATCHSYSTEMDATA]] [[DOTFCA_0_INSERT]]), !continuation.registercount !23
; SAVESTATE-NEXT:    unreachable
;
