; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt --verify-each -passes='lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,legacy-cleanup-continuations,lint' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%continuation.token = type { }

declare void @await.void(%continuation.token*)
declare %continuation.token* @async_fun()

define <4 x i32> @simple_await(<4 x i32> %arg) !continuation.registercount !1 {
; CHECK-LABEL: define void @simple_await(
; CHECK-SAME: i32 [[CSPINIT:%.*]], i64 [[RETURNADDR:%.*]], <4 x i32> [[ARG:%.*]]) !continuation.registercount !2 !continuation !3 !continuation.state !4 !continuation.stacksize !4 {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CHECK-NEXT:    call void @continuation.save.continuation_state()
; CHECK-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 0
; CHECK-NEXT:    store <4 x i32> [[ARG]], ptr [[ARG_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], ptr [[CONT_STATE]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[RETURNADDR]], ptr [[RETURNADDR_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 24
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CHECK-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @CONTINUATION_STATE, ptr [[TMP3]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
; CHECK-NEXT:    store i32 [[TMP5]], ptr @CONTINUATION_STATE, align 4
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP7]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 1), align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[TMP8]], align 4
; CHECK-NEXT:    store i32 [[TMP9]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 2), align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP11]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 3), align 4
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP12]], align 4
; CHECK-NEXT:    store i32 [[TMP13]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 4), align 4
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP14]], align 4
; CHECK-NEXT:    store i32 [[TMP15]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 5), align 4
; CHECK-NEXT:    [[TMP16:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4
; CHECK-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (ptr @async_fun to i64), i32 [[TMP17]], i64 ptrtoint (ptr @simple_await.resume.0 to i64)), !continuation.registercount !2, !continuation.returnedRegistercount !2
; CHECK-NEXT:    unreachable
;
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  ret <4 x i32> %arg, !continuation.registercount !1
}

define void @simple_await_entry(<4 x i32> %arg, <4 x i32> addrspace(1)* %mem) !continuation.entry !0 !continuation.registercount !1 {
; CHECK-LABEL: define void @simple_await_entry(
; CHECK-SAME: <4 x i32> [[ARG:%.*]], ptr addrspace(1) [[MEM:%.*]]) !continuation.registercount !2 !continuation.entry !5 !continuation !6 !continuation.state !4 !continuation.stacksize !4 {
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CHECK-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 1
; CHECK-NEXT:    store ptr addrspace(1) [[MEM]], ptr [[MEM_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], ptr [[CONT_STATE]], i32 0, i32 0
; CHECK-NEXT:    store <4 x i32> [[ARG]], ptr [[ARG_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 24
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CHECK-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @CONTINUATION_STATE, ptr [[TMP3]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
; CHECK-NEXT:    store i32 [[TMP5]], ptr @CONTINUATION_STATE, align 4
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP7]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 1), align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[TMP8]], align 4
; CHECK-NEXT:    store i32 [[TMP9]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 2), align 4
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP11]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 3), align 4
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP12]], align 4
; CHECK-NEXT:    store i32 [[TMP13]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 4), align 4
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP14]], align 4
; CHECK-NEXT:    store i32 [[TMP15]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 5), align 4
; CHECK-NEXT:    [[TMP16:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4
; CHECK-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (ptr @async_fun to i64), i32 [[TMP17]], i64 ptrtoint (ptr @simple_await_entry.resume.0 to i64)), !continuation.registercount !2, !continuation.returnedRegistercount !2
; CHECK-NEXT:    unreachable
;
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  store <4 x i32> %arg, <4 x i32> addrspace(1)* %mem
  ret void, !continuation.registercount !1
}

!continuation.stackAddrspace = !{!2}

!0 = !{}
!1 = !{i32 0}
!2 = !{i32 21}
