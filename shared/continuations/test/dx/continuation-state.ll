; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 3
; RUN: opt --verify-each -passes='lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,legacy-cleanup-continuations,lint' -S %s 2>%t0.stderr | FileCheck -check-prefix=CLEANUP %s
; RUN: count 0 < %t0.stderr
; RUN: opt --verify-each -passes='lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,legacy-cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,dxil-cont-post-process,lint' \
; RUN:     -S %s 2>%t1.stderr | FileCheck -check-prefix=POST-PROCESS %s
; RUN: count 0 < %t1.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%continuation.token = type { }

declare void @await.void(%continuation.token*)
declare i32 @_cont_GetContinuationStackAddr()
declare %continuation.token* @async_fun()

@PAYLOAD = external addrspace(20) global [30 x i32]

define <4 x i32> @simple_await(<4 x i32> %arg) !continuation.registercount !1 {
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  ret <4 x i32> %arg, !continuation.registercount !1
}

define void @simple_await_entry(<4 x i32> %arg, <4 x i32> addrspace(1)* %mem) !continuation.entry !0 !continuation.registercount !1 {
  %tok = call %continuation.token* @async_fun(), !continuation.registercount !1, !continuation.returnedRegistercount !1
  call void @await.void(%continuation.token* %tok)
  store <4 x i32> %arg, <4 x i32> addrspace(1)* %mem
  ret void, !continuation.registercount !1
}

!continuation.maxPayloadRegisterCount = !{!2}
!continuation.stackAddrspace = !{!3}

!0 = !{}
!1 = !{i32 0}
!2 = !{i32 30}
!3 = !{i32 21}
; CLEANUP-LABEL: define void @simple_await(
; CLEANUP-SAME: i32 [[CSPINIT:%.*]], i64 [[RETURNADDR:%.*]], <4 x i32> [[ARG:%.*]]) !continuation.registercount !3 !continuation !4 !continuation.state !5 !continuation.stacksize !5 {
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    call void @continuation.save.continuation_state()
; CLEANUP-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    store <4 x i32> [[ARG]], ptr [[ARG_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    store i64 [[RETURNADDR]], ptr [[RETURNADDR_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[TMP0:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; CLEANUP-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 24
; CLEANUP-NEXT:    store i32 [[TMP2]], ptr [[TMP0]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @CONTINUATION_STATE, ptr [[TMP3]])
; CLEANUP-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
; CLEANUP-NEXT:    store i32 [[TMP5]], ptr @CONTINUATION_STATE, align 4
; CLEANUP-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP6]], align 4
; CLEANUP-NEXT:    store i32 [[TMP7]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP9:%.*]] = load i32, ptr [[TMP8]], align 4
; CLEANUP-NEXT:    store i32 [[TMP9]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4
; CLEANUP-NEXT:    store i32 [[TMP11]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP12]], align 4
; CLEANUP-NEXT:    store i32 [[TMP13]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP14]], align 4
; CLEANUP-NEXT:    store i32 [[TMP15]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    [[TMP16:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (ptr @async_fun to i64), i32 [[TMP17]], i64 ptrtoint (ptr @simple_await.resume.0 to i64)), !continuation.registercount !3, !continuation.returnedRegistercount !3
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: define void @simple_await.resume.0(
; CLEANUP-SAME: i32 [[TMP0:%.*]]) !continuation.registercount !3 !continuation !4 {
; CLEANUP-NEXT:  entryresume.0:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP2:%.*]] = load i32, ptr @CONTINUATION_STATE, align 4
; CLEANUP-NEXT:    store i32 [[TMP2]], ptr [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP4:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CLEANUP-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP6:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    store i32 [[TMP6]], ptr [[TMP5]], align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    store i32 [[TMP10]], ptr [[TMP9]], align 4
; CLEANUP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP12:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @CONTINUATION_STATE, ptr [[TMP13]])
; CLEANUP-NEXT:    [[TMP14:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP14]], align 4
; CLEANUP-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], -24
; CLEANUP-NEXT:    store i32 [[TMP16]], ptr [[TMP14]], align 4
; CLEANUP-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, ptr [[ARG_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    [[RETURNADDR_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[RETURNADDR_RELOAD:%.*]] = load i64, ptr [[RETURNADDR_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    call void @continuation.restore.continuation_state()
; CLEANUP-NEXT:    [[TMP17:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP17]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR_RELOAD]], i32 [[TMP18]], <4 x i32> [[ARG_RELOAD]]), !continuation.registercount !3
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: define void @simple_await_entry(
; CLEANUP-SAME: <4 x i32> [[ARG:%.*]], ptr addrspace(1) [[MEM:%.*]]) !continuation.registercount !3 !continuation.entry !6 !continuation !7 !continuation.state !5 !continuation.stacksize !5 {
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    store ptr addrspace(1) [[MEM]], ptr [[MEM_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    store <4 x i32> [[ARG]], ptr [[ARG_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[TMP0:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; CLEANUP-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 24
; CLEANUP-NEXT:    store i32 [[TMP2]], ptr [[TMP0]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @CONTINUATION_STATE, ptr [[TMP3]])
; CLEANUP-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
; CLEANUP-NEXT:    store i32 [[TMP5]], ptr @CONTINUATION_STATE, align 4
; CLEANUP-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP6]], align 4
; CLEANUP-NEXT:    store i32 [[TMP7]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP9:%.*]] = load i32, ptr [[TMP8]], align 4
; CLEANUP-NEXT:    store i32 [[TMP9]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP10]], align 4
; CLEANUP-NEXT:    store i32 [[TMP11]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP12]], align 4
; CLEANUP-NEXT:    store i32 [[TMP13]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP14]], align 4
; CLEANUP-NEXT:    store i32 [[TMP15]], ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    [[TMP16:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 ptrtoint (ptr @async_fun to i64), i32 [[TMP17]], i64 ptrtoint (ptr @simple_await_entry.resume.0 to i64)), !continuation.registercount !3, !continuation.returnedRegistercount !3
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: define void @simple_await_entry.resume.0(
; CLEANUP-SAME: i32 [[TMP0:%.*]]) !continuation.registercount !3 !continuation !7 {
; CLEANUP-NEXT:  entryresume.0:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; CLEANUP-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP2:%.*]] = load i32, ptr @CONTINUATION_STATE, align 4
; CLEANUP-NEXT:    store i32 [[TMP2]], ptr [[TMP1]], align 4
; CLEANUP-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP4:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CLEANUP-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; CLEANUP-NEXT:    [[TMP6:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 2), align 4
; CLEANUP-NEXT:    store i32 [[TMP6]], ptr [[TMP5]], align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 3), align 4
; CLEANUP-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 4), align 4
; CLEANUP-NEXT:    store i32 [[TMP10]], ptr [[TMP9]], align 4
; CLEANUP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; CLEANUP-NEXT:    [[TMP12:%.*]] = load i32, ptr getelementptr inbounds ([6 x i32], ptr @CONTINUATION_STATE, i32 0, i32 5), align 4
; CLEANUP-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CLEANUP-NEXT:    [[TMP13:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @CONTINUATION_STATE, ptr [[TMP13]])
; CLEANUP-NEXT:    [[TMP14:%.*]] = call ptr @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP15:%.*]] = load i32, ptr [[TMP14]], align 4
; CLEANUP-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], -24
; CLEANUP-NEXT:    store i32 [[TMP16]], ptr [[TMP14]], align 4
; CLEANUP-NEXT:    [[MEM_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[MEM_RELOAD:%.*]] = load ptr addrspace(1), ptr [[MEM_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], ptr [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, ptr [[ARG_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    store <4 x i32> [[ARG_RELOAD]], ptr addrspace(1) [[MEM_RELOAD]], align 4
; CLEANUP-NEXT:    call void @continuation.complete()
; CLEANUP-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: define void @simple_await(
; POST-PROCESS-SAME: i32 [[CSPINIT:%.*]], i64 [[RETURNADDR:%.*]], <4 x i32> [[ARG:%.*]]) !continuation.registercount !2 !continuation !3 !continuation.state !4 !continuation.stacksize !4 {
; POST-PROCESS-NEXT:  AllocaSpillBB:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    store i32 [[CSPINIT]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP0:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], 0
; POST-PROCESS-NEXT:    store i32 [[TMP1]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = inttoptr i32 [[TMP0]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    store <4 x i32> [[ARG]], ptr [[ARG_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    store i64 [[RETURNADDR]], ptr [[RETURNADDR_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 24
; POST-PROCESS-NEXT:    store i32 [[TMP4]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP5]], align 4
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = inttoptr i32 [[TMP7]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP8]], i64 -24
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP9]], i32 0
; POST-PROCESS-NEXT:    store i32 [[TMP6]], ptr addrspace(21) [[TMP10]], align 4
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP11]], align 4
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = inttoptr i32 [[TMP13]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP14]], i64 -24
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP15]], i32 0
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP16]], i32 0, i32 1
; POST-PROCESS-NEXT:    store i32 [[TMP12]], ptr addrspace(21) [[TMP17]], align 4
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = load i32, ptr [[TMP18]], align 4
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = inttoptr i32 [[TMP20]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP21]], i64 -24
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP22]], i32 0
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP23]], i32 0, i32 2
; POST-PROCESS-NEXT:    store i32 [[TMP19]], ptr addrspace(21) [[TMP24]], align 4
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = load i32, ptr [[TMP25]], align 4
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = inttoptr i32 [[TMP27]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP28]], i64 -24
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP29]], i32 0
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP30]], i32 0, i32 3
; POST-PROCESS-NEXT:    store i32 [[TMP26]], ptr addrspace(21) [[TMP31]], align 4
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = load i32, ptr [[TMP32]], align 4
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = inttoptr i32 [[TMP34]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP35]], i64 -24
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP36]], i32 0
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP37]], i32 0, i32 4
; POST-PROCESS-NEXT:    store i32 [[TMP33]], ptr addrspace(21) [[TMP38]], align 4
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = load i32, ptr [[TMP39]], align 4
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = inttoptr i32 [[TMP41]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP42]], i64 -24
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP43]], i32 0
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP44]], i32 0, i32 5
; POST-PROCESS-NEXT:    store i32 [[TMP40]], ptr addrspace(21) [[TMP45]], align 4
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP47:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (ptr @async_fun to i64))
; POST-PROCESS-NEXT:    [[TMP48:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (ptr @simple_await.resume.0 to i64))
; POST-PROCESS-NEXT:    call void (i64, ...) @continuation.continue(i64 [[TMP47]], i32 [[TMP46]], i64 [[TMP48]]), !continuation.registercount !2, !continuation.returnedRegistercount !2
; POST-PROCESS-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: define void @simple_await.resume.0(
; POST-PROCESS-SAME: i32 [[TMP0:%.*]]) !continuation.registercount !2 !continuation !3 {
; POST-PROCESS-NEXT:  entryresume.0:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    store i32 [[TMP0]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = inttoptr i32 [[TMP2]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP3]], i64 -24
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP4]], i32 0
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(21) [[TMP5]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP6]], ptr [[TMP1]], align 4
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[TMP8]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP9]], i64 -24
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP10]], i32 0
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP11]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = load i32, ptr addrspace(21) [[TMP12]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP13]], ptr [[TMP7]], align 4
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = inttoptr i32 [[TMP15]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP16]], i64 -24
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP17]], i32 0
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP18]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = load i32, ptr addrspace(21) [[TMP19]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP20]], ptr [[TMP14]], align 4
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = inttoptr i32 [[TMP22]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP23]], i64 -24
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP24]], i32 0
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP25]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = load i32, ptr addrspace(21) [[TMP26]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP27]], ptr [[TMP21]], align 4
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = inttoptr i32 [[TMP29]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP30]], i64 -24
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP31]], i32 0
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP32]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = load i32, ptr addrspace(21) [[TMP33]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP34]], ptr [[TMP28]], align 4
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = inttoptr i32 [[TMP36]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP37]], i64 -24
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP38]], i32 0
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP39]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = load i32, ptr addrspace(21) [[TMP40]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP41]], ptr [[TMP35]], align 4
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = add i32 [[TMP42]], -24
; POST-PROCESS-NEXT:    store i32 [[TMP43]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, ptr [[ARG_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    [[RETURNADDR_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_FRAME]], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[RETURNADDR_RELOAD:%.*]] = load i64, ptr [[RETURNADDR_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = add i32 [[TMP44]], 0
; POST-PROCESS-NEXT:    store i32 [[TMP45]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = inttoptr i32 [[TMP45]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP47:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR_RELOAD]], i32 [[TMP47]], <4 x i32> [[ARG_RELOAD]]), !continuation.registercount !2
; POST-PROCESS-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: define void @simple_await_entry(
; POST-PROCESS-SAME: <4 x i32> [[ARG:%.*]], ptr addrspace(1) [[MEM:%.*]]) !continuation.registercount !2 !continuation.entry !5 !continuation !6 !continuation.state !4 !continuation.stacksize !4 {
; POST-PROCESS-NEXT:  AllocaSpillBB:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    [[TMP0:%.*]] = call i32 @_cont_GetContinuationStackAddr()
; POST-PROCESS-NEXT:    store i32 [[TMP0]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[MEM_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    store ptr addrspace(1) [[MEM]], ptr [[MEM_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[ARG_SPILL_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    store <4 x i32> [[ARG]], ptr [[ARG_SPILL_ADDR]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 24
; POST-PROCESS-NEXT:    store i32 [[TMP2]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 4
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = inttoptr i32 [[TMP5]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP6]], i64 -24
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP7]], i32 0
; POST-PROCESS-NEXT:    store i32 [[TMP4]], ptr addrspace(21) [[TMP8]], align 4
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP9]], align 4
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = inttoptr i32 [[TMP11]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP12]], i64 -24
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP13]], i32 0
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP14]], i32 0, i32 1
; POST-PROCESS-NEXT:    store i32 [[TMP10]], ptr addrspace(21) [[TMP15]], align 4
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP16]], align 4
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = inttoptr i32 [[TMP18]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP19]], i64 -24
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP20]], i32 0
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP21]], i32 0, i32 2
; POST-PROCESS-NEXT:    store i32 [[TMP17]], ptr addrspace(21) [[TMP22]], align 4
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP23]], align 4
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = inttoptr i32 [[TMP25]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP26]], i64 -24
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP27]], i32 0
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP28]], i32 0, i32 3
; POST-PROCESS-NEXT:    store i32 [[TMP24]], ptr addrspace(21) [[TMP29]], align 4
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = load i32, ptr [[TMP30]], align 4
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = inttoptr i32 [[TMP32]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP33]], i64 -24
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP34]], i32 0
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP35]], i32 0, i32 4
; POST-PROCESS-NEXT:    store i32 [[TMP31]], ptr addrspace(21) [[TMP36]], align 4
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = load i32, ptr [[TMP37]], align 4
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = inttoptr i32 [[TMP39]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP40]], i64 -24
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP41]], i32 0
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP42]], i32 0, i32 5
; POST-PROCESS-NEXT:    store i32 [[TMP38]], ptr addrspace(21) [[TMP43]], align 4
; POST-PROCESS-NEXT:    [[TMP44:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP45:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (ptr @async_fun to i64))
; POST-PROCESS-NEXT:    [[TMP46:%.*]] = call i64 @continuation.getAddrAndMD(i64 ptrtoint (ptr @simple_await_entry.resume.0 to i64))
; POST-PROCESS-NEXT:    call void (i64, ...) @continuation.continue(i64 [[TMP45]], i32 [[TMP44]], i64 [[TMP46]]), !continuation.registercount !2, !continuation.returnedRegistercount !2
; POST-PROCESS-NEXT:    unreachable
;
;
; POST-PROCESS-LABEL: define void @simple_await_entry.resume.0(
; POST-PROCESS-SAME: i32 [[TMP0:%.*]]) !continuation.registercount !2 !continuation !6 {
; POST-PROCESS-NEXT:  entryresume.0:
; POST-PROCESS-NEXT:    [[CONT_STATE:%.*]] = alloca [6 x i32], align 4
; POST-PROCESS-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; POST-PROCESS-NEXT:    store i32 [[TMP0]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[TMP2:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP3:%.*]] = inttoptr i32 [[TMP2]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP3]], i64 -24
; POST-PROCESS-NEXT:    [[TMP5:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP4]], i32 0
; POST-PROCESS-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(21) [[TMP5]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP6]], ptr [[TMP1]], align 4
; POST-PROCESS-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP8:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP9:%.*]] = inttoptr i32 [[TMP8]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP9]], i64 -24
; POST-PROCESS-NEXT:    [[TMP11:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP10]], i32 0
; POST-PROCESS-NEXT:    [[TMP12:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP11]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[TMP13:%.*]] = load i32, ptr addrspace(21) [[TMP12]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP13]], ptr [[TMP7]], align 4
; POST-PROCESS-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP15:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP16:%.*]] = inttoptr i32 [[TMP15]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP16]], i64 -24
; POST-PROCESS-NEXT:    [[TMP18:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP17]], i32 0
; POST-PROCESS-NEXT:    [[TMP19:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP18]], i32 0, i32 2
; POST-PROCESS-NEXT:    [[TMP20:%.*]] = load i32, ptr addrspace(21) [[TMP19]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP20]], ptr [[TMP14]], align 4
; POST-PROCESS-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP22:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP23:%.*]] = inttoptr i32 [[TMP22]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP23]], i64 -24
; POST-PROCESS-NEXT:    [[TMP25:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP24]], i32 0
; POST-PROCESS-NEXT:    [[TMP26:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP25]], i32 0, i32 3
; POST-PROCESS-NEXT:    [[TMP27:%.*]] = load i32, ptr addrspace(21) [[TMP26]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP27]], ptr [[TMP21]], align 4
; POST-PROCESS-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP29:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP30:%.*]] = inttoptr i32 [[TMP29]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP31:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP30]], i64 -24
; POST-PROCESS-NEXT:    [[TMP32:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP31]], i32 0
; POST-PROCESS-NEXT:    [[TMP33:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP32]], i32 0, i32 4
; POST-PROCESS-NEXT:    [[TMP34:%.*]] = load i32, ptr addrspace(21) [[TMP33]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP34]], ptr [[TMP28]], align 4
; POST-PROCESS-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [6 x i32], ptr [[CONT_STATE]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP36:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP37:%.*]] = inttoptr i32 [[TMP36]] to ptr addrspace(21)
; POST-PROCESS-NEXT:    [[TMP38:%.*]] = getelementptr i8, ptr addrspace(21) [[TMP37]], i64 -24
; POST-PROCESS-NEXT:    [[TMP39:%.*]] = getelementptr i32, ptr addrspace(21) [[TMP38]], i32 0
; POST-PROCESS-NEXT:    [[TMP40:%.*]] = getelementptr [6 x i32], ptr addrspace(21) [[TMP39]], i32 0, i32 5
; POST-PROCESS-NEXT:    [[TMP41:%.*]] = load i32, ptr addrspace(21) [[TMP40]], align 4
; POST-PROCESS-NEXT:    store i32 [[TMP41]], ptr [[TMP35]], align 4
; POST-PROCESS-NEXT:    [[TMP42:%.*]] = load i32, ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[TMP43:%.*]] = add i32 [[TMP42]], -24
; POST-PROCESS-NEXT:    store i32 [[TMP43]], ptr [[CSP]], align 4
; POST-PROCESS-NEXT:    [[MEM_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME:%.*]], ptr [[CONT_STATE]], i32 0, i32 1
; POST-PROCESS-NEXT:    [[MEM_RELOAD:%.*]] = load ptr addrspace(1), ptr [[MEM_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    [[ARG_RELOAD_ADDR:%.*]] = getelementptr inbounds [[SIMPLE_AWAIT_ENTRY_FRAME]], ptr [[CONT_STATE]], i32 0, i32 0
; POST-PROCESS-NEXT:    [[ARG_RELOAD:%.*]] = load <4 x i32>, ptr [[ARG_RELOAD_ADDR]], align 4
; POST-PROCESS-NEXT:    store <4 x i32> [[ARG_RELOAD]], ptr addrspace(1) [[MEM_RELOAD]], align 4
; POST-PROCESS-NEXT:    call void @continuation.complete()
; POST-PROCESS-NEXT:    unreachable
;
