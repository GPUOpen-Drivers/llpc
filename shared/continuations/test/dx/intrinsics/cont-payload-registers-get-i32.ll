; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function main --version 2
; RUN: opt --verify-each -passes='dxil-cont-intrinsic-prepare,lint,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,pre-coroutine-lowering,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,legacy-cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,dxil-cont-post-process,lint,remove-types-metadata' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

%struct.DispatchSystemData = type { i32 }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%struct.HitData = type { float, i32 }
%struct.Payload = type { [8 x i32] }

@debug_global = external global i32

declare i32 @_AmdContPayloadRegistersGetI32(i32)

declare %struct.DispatchSystemData @_cont_SetupRayGen()

declare !types !9 i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)

declare !types !11 %struct.BuiltInTriangleIntersectionAttributes @_cont_GetTriangleHitAttributes(%struct.DispatchSystemData*)

declare !types !12 i32 @_cont_HitKind(%struct.DispatchSystemData*, %struct.HitData*)

define void @main() {
; CHECK-LABEL: define void @main() !continuation !11 !lgc.rt.shaderstage !5 !continuation.entry !12 !continuation.registercount !5 !continuation.state !5 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SYSTEM_DATA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; CHECK-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA]], align 8
; CHECK-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_cont_SetupRayGen()
; CHECK-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP0]], ptr [[SYSTEM_DATA]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA]], ptr [[SYSTEM_DATA]], align 4
; CHECK-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], 0
; CHECK-NEXT:    [[DOTFCA_0_GEP:%.*]] = getelementptr inbounds [[STRUCT_DISPATCHSYSTEMDATA]], ptr [[SYSTEM_DATA_ALLOCA]], i32 0, i32 0
; CHECK-NEXT:    store i32 [[DOTFCA_0_EXTRACT]], ptr [[DOTFCA_0_GEP]], align 4
; CHECK-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(ptr [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr addrspace(20) getelementptr inbounds ([30 x i32], ptr addrspace(20) @REGISTERS, i32 0, i32 5), align 4
; CHECK-NEXT:    store i32 [[TMP2]], ptr @debug_global, align 4
; CHECK-NEXT:    call void @continuation.complete()
; CHECK-NEXT:    unreachable
;
entry:
  %val = call i32 @_AmdContPayloadRegistersGetI32(i32 5)
  store i32 %val, i32* @debug_global, align 4
  ret void
}

define void @chit(%struct.Payload* %pl, %struct.Payload* %attrs) !types !14 {
  ret void
}

!dx.entryPoints = !{!0, !3, !7}

!0 = !{null, !"", null, !1, !6}
!1 = !{!2, null, null, null}
!2 = !{!3}
!3 = !{void ()* @main, !"main", null, null, !4}
!4 = !{i32 8, i32 7, i32 6, i32 16, i32 7, i32 8, i32 5, !5}
!5 = !{i32 0}
!6 = !{i32 0, i64 65536}
!7 = !{void (%struct.Payload*, %struct.Payload*)* @chit, !"chit", null, null, !8}
!8 = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !5}
!9 = !{!"function", i32 poison, !10}
!10 = !{i32 0, %struct.DispatchSystemData poison}
!11 = !{!"function", %struct.BuiltInTriangleIntersectionAttributes poison, !10}
!12 = !{!"function", i32 poison, !10, !13}
!13 = !{i32 0, %struct.HitData poison}
!14 = !{!"function", !"void", !15, !15}
!15 = !{i32 0, %struct.Payload poison}
