; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt --verify-each -passes='dxil-cont-pre-coroutine,lint' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

%struct.Payload = type { i32 }

declare i32 @_AmdGetShaderKind()

; Check that GetShaderKind calls in non-shaders, like left-over intrinsics, are ignored.
define float @_cont_RayTCurrent() {
; CHECK-LABEL: define float @_cont_RayTCurrent() {
; CHECK-NEXT:    [[K:%.*]] = call i32 @_AmdGetShaderKind()
; CHECK-NEXT:    [[F:%.*]] = sitofp i32 [[K]] to float
; CHECK-NEXT:    ret float [[F]]
;
  %k = call i32 @_AmdGetShaderKind()
  %f = sitofp i32 %k to float
  ret float %f
}

; Note: DXILShaderKind::Miss has value 11
define void @MyMiss(%struct.Payload* %payload) {
; CHECK-LABEL: define void @MyMiss
; CHECK-SAME: (ptr [[PAYLOAD:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_PAYLOAD:%.*]], ptr [[PAYLOAD]], i32 0, i32 0
; CHECK-NEXT:    store i32 11, ptr [[TMP1]], align 4
; CHECK-NEXT:    ret void
;
  %1 = call i32 @_AmdGetShaderKind()
  %2 = getelementptr inbounds %struct.Payload, %struct.Payload* %payload, i32 0, i32 0
  store i32 %1, i32* %2, align 4
  ret void
}

!dx.entryPoints = !{!12, !13}

!12 = !{null, !"", null, null, null}
!13 = !{void (%struct.Payload*)* @MyMiss, !"MyMiss", null, null, !14}
; The metadata on this line identifies @MyMiss as miss shader
!14 = !{i32 8, i32 11, i32 6, i32 4, i32 5, !15}
!15 = !{i32 0}
