; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt --verify-each -passes='dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

%struct.DispatchSystemData = type { i32 }
%struct.Payload = type { i32 }

@debug_global = external global i32

declare i32 @lgc.rt.shader.index()

declare %struct.DispatchSystemData @_cont_SetupRayGen()

declare !types !8 i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)

define i1 @_cont_ReportHit(%struct.DispatchSystemData* %data, float %t, i32 %hitKind) #0 !types !20 {
; CHECK-LABEL: define i1 @_cont_ReportHit(
; CHECK-SAME: ptr [[DATA:%.*]], float [[T:%.*]], i32 [[HITKIND:%.*]]) !types !13 {
; CHECK-NEXT:    ret i1 true
;
  ret i1 true
}

define void @main() !lgc.rt.shaderstage !24 {
; CHECK-LABEL: define void @main(
; CHECK-SAME: {} [[CONT_STATE:%.*]], i32 [[RETURN_ADDR:%.*]], i32 [[SHADER_INDEX:%.*]]) !lgc.rt.shaderstage !14 !lgc.cps !14 !continuation !15 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CHECK-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP0]], ptr [[SYSTEM_DATA_ALLOCA]], align 4
; CHECK-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(ptr [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; CHECK-NEXT:    store i32 0, ptr @debug_global, align 4
; CHECK-NEXT:    ret void
;
entry:
  %val = call i32 @lgc.rt.shader.index()
  store i32 %val, ptr @debug_global
  ret void
}

define void @callable(%struct.Payload* %payload) !types !22 !lgc.rt.shaderstage !25 {
; CHECK-LABEL: define void @callable(
; CHECK-SAME: {} [[CONT_STATE:%.*]], i32 [[RETURN_ADDR:%.*]], i32 [[SHADER_INDEX:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP0:%.*]]) !types !16 !lgc.rt.shaderstage !18 !lgc.cps !19 !continuation !20 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = alloca [[STRUCT_PAYLOAD:%.*]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CHECK-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], ptr [[SYSTEM_DATA_ALLOCA]], align 4
; CHECK-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(ptr [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; CHECK-NEXT:    store i32 [[SHADER_INDEX]], ptr @debug_global, align 4
; CHECK-NEXT:    call void (...) @registerbuffer.setpointerbarrier(ptr @PAYLOAD)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_PAYLOAD]], ptr [[TMP1]], i32 0, i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr @PAYLOAD, align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA]], ptr [[SYSTEM_DATA_ALLOCA]], align 4
; CHECK-NEXT:    call void (...) @lgc.cps.jump(i32 [[RETURN_ADDR]], i32 2, {} poison, [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP5]])
; CHECK-NEXT:    unreachable
;
entry:
  %val = call i32 @lgc.rt.shader.index()
  store i32 %val, ptr @debug_global
  ret void
}

!dx.entryPoints = !{!0, !3, !10}
!continuation.stackAddrspace = !{!7}
!lgc.cps.module = !{}

!0 = !{null, !"", null, !1, !6}
!1 = !{!2, null, null, null}
!2 = !{!3}
!3 = !{i1 ()* @main, !"main", null, null, !4}
!4 = !{i32 8, i32 7}
!6 = !{i32 0, i64 65536}
!7 = !{i32 21}
!8 = !{!"function", i32 poison, !9}
!9 = !{i32 0, %struct.DispatchSystemData poison}
!10 = !{i1 ()* @callable, !"callable", null, null, !11}
!11 = !{i32 8, i32 12}
!20 = !{!"function", i1 poison, !21, float poison, i32 poison}
!21 = !{i32 0, %struct.DispatchSystemData poison}
!22 = !{!"function", i1 poison, !23}
!23 = !{i32 0, %struct.Payload poison}
!24 = !{i32 0}
!25 = !{i32 5}
