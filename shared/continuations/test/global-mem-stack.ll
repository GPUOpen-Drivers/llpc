; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,dxil-cont-post-process,lint,remove-types-metadata' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%struct.HitData = type { float, i32 }
%struct.DispatchSystemData = type { <3 x i32> }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%struct.SystemData = type { %struct.DispatchSystemData, %struct.BuiltInTriangleIntersectionAttributes }
%struct.TraversalData = type { %struct.SystemData, %struct.HitData, <3 x float>, <3 x float>, float, i64 }

declare i32 @_cont_GetContinuationStackAddr()
declare i64 @_cont_GetContinuationStackGlobalMemBase()
declare %struct.DispatchSystemData @_cont_SetupRayGen()
declare %struct.DispatchSystemData @_AmdAwaitTraversal(i64, %struct.TraversalData)
declare %struct.DispatchSystemData @_AmdAwaitShader(i64, %struct.DispatchSystemData)
declare %struct.TraversalData @_AmdAwaitAnyHit(i64, %struct.TraversalData, float, i32)
declare i32 @_cont_HitKind(%struct.SystemData*)
declare i64 @_AmdGetResumePointAddr()
declare %struct.HitData @_cont_GetCommittedState(%struct.SystemData*)
declare void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data)
declare void @_AmdRestoreSystemDataAnyHit(%struct.TraversalData* %data)
declare void @_cont_AcceptHit(%struct.TraversalData* nocapture readnone %data)
declare void @_AmdAcceptHitAttributes(%struct.TraversalData* %data)

declare i1 @opaqueIsEnd()
define i1 @_cont_IsEndSearch(%struct.TraversalData* %data) {
  %isEnd = call i1 @opaqueIsEnd()
  ret i1 %isEnd
}

define %struct.BuiltInTriangleIntersectionAttributes @_cont_GetTriangleHitAttributes(%struct.SystemData* %data) {
  %addr = getelementptr %struct.SystemData, %struct.SystemData* %data, i32 0, i32 1
  %val = load %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %addr
  ret %struct.BuiltInTriangleIntersectionAttributes %val
}

define void @_cont_SetTriangleHitAttributes(%struct.SystemData* %data, %struct.BuiltInTriangleIntersectionAttributes %val) {
  %addr = getelementptr %struct.SystemData, %struct.SystemData* %data, i32 0, i32 1
  store %struct.BuiltInTriangleIntersectionAttributes %val, %struct.BuiltInTriangleIntersectionAttributes* %addr
  ret void
}

define i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* %data) {
  ret i32 5
}

declare i32 @_cont_DispatchRaysIndex(%struct.DispatchSystemData* nocapture readnone %data, i32 %i)
declare float @_cont_ObjectRayOrigin(%struct.DispatchSystemData* nocapture readnone %data, %struct.HitData*, i32 %i)
declare float @_cont_ObjectRayDirection(%struct.DispatchSystemData* nocapture readnone %data, %struct.HitData*, i32 %i)
declare void @_cont_AcceptHitAndEndSearch(%struct.DispatchSystemData* nocapture readnone %data)

%struct.RayPayload = type { <4 x float> }

; Function Attrs: nounwind
define void @MyClosestHitShader(%struct.RayPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) {
  %1 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %2 = load <2 x float>, <2 x float>* %1, align 4
  %3 = extractelement <2 x float> %2, i32 0
  %4 = fsub fast float 1.000000e+00, %3
  %5 = extractelement <2 x float> %2, i32 1
  %6 = fsub fast float %4, %5
  %7 = insertelement <4 x float> undef, float %6, i64 0
  %8 = insertelement <4 x float> %7, float %3, i64 1
  %9 = insertelement <4 x float> %8, float %5, i64 2
  %10 = insertelement <4 x float> %9, float 1.000000e+00, i64 3
  %11 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %payload, i32 0, i32 0
  store <4 x float> %10, <4 x float>* %11, align 4
  ret void
}

!dx.shaderModel = !{!2}
!dx.resources = !{!3}
!dx.entryPoints = !{!18, !23}

!continuation.stackAddrspace = !{!0}
; Use a small payload so it spills to the stack.
; Because hit attributes need some space, all the payload is spilled.
!continuation.maxPayloadRegisterCount = !{!1}

!0 = !{i32 22}
!1 = !{i32 2}
!2 = !{!"lib", i32 6, i32 6}
!3 = !{null, null, null, null}
!18 = !{null, !"", null, !3, !19}
!19 = !{i32 0, i64 65536}
!22 = !{i32 0}
!23 = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @MyClosestHitShader, !"MyClosestHitShader", null, null, !24}
!24 = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
; CHECK-LABEL: @_cont_IsEndSearch(
; CHECK-NEXT:    [[ISEND:%.*]] = call i1 @opaqueIsEnd()
; CHECK-NEXT:    ret i1 [[ISEND]]
;
;
; CHECK-LABEL: @_cont_GetTriangleHitAttributes(
; CHECK-NEXT:    [[ADDR:%.*]] = getelementptr [[STRUCT_SYSTEMDATA:%.*]], %struct.SystemData* [[DATA:%.*]], i32 0, i32 1
; CHECK-NEXT:    [[VAL:%.*]] = load [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]], %struct.BuiltInTriangleIntersectionAttributes* [[ADDR]], align 4
; CHECK-NEXT:    ret [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES]] [[VAL]]
;
;
; CHECK-LABEL: @_cont_SetTriangleHitAttributes(
; CHECK-NEXT:    [[ADDR:%.*]] = getelementptr [[STRUCT_SYSTEMDATA:%.*]], %struct.SystemData* [[DATA:%.*]], i32 0, i32 1
; CHECK-NEXT:    store [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]] [[VAL:%.*]], %struct.BuiltInTriangleIntersectionAttributes* [[ADDR]], align 4
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @_cont_GetLocalRootIndex(
; CHECK-NEXT:    ret i32 5
;
;
; CHECK-LABEL: @MyClosestHitShader(
; CHECK-NEXT:  AllocaSpillBB:
; CHECK-NEXT:    [[SYSTEM_DATA:%.*]] = alloca [[STRUCT_SYSTEMDATA:%.*]], align 8
; CHECK-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; CHECK-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store [[STRUCT_SYSTEMDATA]] [[TMP0:%.*]], %struct.SystemData* [[SYSTEM_DATA]], align 4
; CHECK-NEXT:    store i32 [[CSPINIT:%.*]], i32* [[CSP]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; CHECK-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %MyClosestHitShader.Frame*
; CHECK-NEXT:    [[TMP2:%.*]] = load [[STRUCT_SYSTEMDATA]], %struct.SystemData* [[SYSTEM_DATA]], align 4
; CHECK-NEXT:    [[DOTFCA_0_0_EXTRACT:%.*]] = extractvalue [[STRUCT_SYSTEMDATA]] [[TMP2]], 0, 0
; CHECK-NEXT:    [[DOTFCA_1_0_EXTRACT:%.*]] = extractvalue [[STRUCT_SYSTEMDATA]] [[TMP2]], 1, 0
; CHECK-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP5:%.*]] = inttoptr i64 [[TMP4]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP5]], i32 [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i8 addrspace(22)* [[TMP6]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP7]], i32 -2
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i32 addrspace(22)* [[TMP8]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP9]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S:%.*]] addrspace(22)*
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)* [[TMP10]], i32 0, i32 0, i32 7
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32 addrspace(22)* [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast i32 [[TMP12]] to float
; CHECK-NEXT:    [[DOTSROA_0_0_VEC_INSERT:%.*]] = insertelement <4 x float> undef, float [[TMP13]], i32 0
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP15:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP16:%.*]] = inttoptr i64 [[TMP15]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP16]], i32 [[TMP14]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i8 addrspace(22)* [[TMP17]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP18]], i32 -2
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32 addrspace(22)* [[TMP19]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP20]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)*
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)* [[TMP21]], i32 0, i32 0, i64 8
; CHECK-NEXT:    [[TMP23:%.*]] = load i32, i32 addrspace(22)* [[TMP22]], align 4
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast i32 [[TMP23]] to float
; CHECK-NEXT:    [[DOTSROA_0_4_VEC_INSERT:%.*]] = insertelement <4 x float> [[DOTSROA_0_0_VEC_INSERT]], float [[TMP24]], i32 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP26:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP27:%.*]] = inttoptr i64 [[TMP26]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP27]], i32 [[TMP25]]
; CHECK-NEXT:    [[TMP29:%.*]] = bitcast i8 addrspace(22)* [[TMP28]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP29]], i32 -2
; CHECK-NEXT:    [[TMP31:%.*]] = bitcast i32 addrspace(22)* [[TMP30]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP32:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP31]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)*
; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)* [[TMP32]], i32 0, i32 0, i64 9
; CHECK-NEXT:    [[TMP34:%.*]] = load i32, i32 addrspace(22)* [[TMP33]], align 4
; CHECK-NEXT:    [[TMP35:%.*]] = bitcast i32 [[TMP34]] to float
; CHECK-NEXT:    [[DOTSROA_0_8_VEC_INSERT:%.*]] = insertelement <4 x float> [[DOTSROA_0_4_VEC_INSERT]], float [[TMP35]], i32 2
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP37:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP38:%.*]] = inttoptr i64 [[TMP37]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP38]], i32 [[TMP36]]
; CHECK-NEXT:    [[TMP40:%.*]] = bitcast i8 addrspace(22)* [[TMP39]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP41:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP40]], i32 -2
; CHECK-NEXT:    [[TMP42:%.*]] = bitcast i32 addrspace(22)* [[TMP41]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP43:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP42]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)*
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_3_CLOSESTHIT_IN_PAYLOAD_ATTR_0_I32S]] addrspace(22)* [[TMP43]], i32 0, i32 0, i64 10
; CHECK-NEXT:    [[TMP45:%.*]] = load i32, i32 addrspace(22)* [[TMP44]], align 4
; CHECK-NEXT:    [[TMP46:%.*]] = bitcast i32 [[TMP45]] to float
; CHECK-NEXT:    [[DOTSROA_0_12_VEC_INSERT:%.*]] = insertelement <4 x float> [[DOTSROA_0_8_VEC_INSERT]], float [[TMP46]], i32 3
; CHECK-NEXT:    [[VAL_I_FCA_0_INSERT:%.*]] = insertvalue [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES:%.*]] poison, <2 x float> [[DOTFCA_1_0_EXTRACT]], 0
; CHECK-NEXT:    [[VAL_I_FCA_0_INSERT_FCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_BUILTINTRIANGLEINTERSECTIONATTRIBUTES]] [[VAL_I_FCA_0_INSERT]], 0
; CHECK-NEXT:    [[DOTSROA_06_0_VEC_EXTRACT:%.*]] = extractelement <2 x float> [[VAL_I_FCA_0_INSERT_FCA_0_EXTRACT]], i32 0
; CHECK-NEXT:    [[TMP47:%.*]] = bitcast float [[DOTSROA_06_0_VEC_EXTRACT]] to i32
; CHECK-NEXT:    [[TMP48:%.*]] = bitcast i32 [[TMP47]] to float
; CHECK-NEXT:    [[HITATTRS_SROA_0_0_VEC_INSERT:%.*]] = insertelement <2 x float> undef, float [[TMP48]], i32 0
; CHECK-NEXT:    [[DOTSROA_06_4_VEC_EXTRACT:%.*]] = extractelement <2 x float> [[VAL_I_FCA_0_INSERT_FCA_0_EXTRACT]], i32 1
; CHECK-NEXT:    [[TMP49:%.*]] = bitcast float [[DOTSROA_06_4_VEC_EXTRACT]] to i32
; CHECK-NEXT:    [[TMP50:%.*]] = bitcast i32 [[TMP49]] to float
; CHECK-NEXT:    [[HITATTRS_SROA_0_4_VEC_INSERT:%.*]] = insertelement <2 x float> [[HITATTRS_SROA_0_0_VEC_INSERT]], float [[TMP50]], i32 1
; CHECK-NEXT:    [[TMP51:%.*]] = extractelement <2 x float> [[HITATTRS_SROA_0_4_VEC_INSERT]], i32 0
; CHECK-NEXT:    [[TMP52:%.*]] = fsub fast float 1.000000e+00, [[TMP51]]
; CHECK-NEXT:    [[TMP53:%.*]] = extractelement <2 x float> [[HITATTRS_SROA_0_4_VEC_INSERT]], i32 1
; CHECK-NEXT:    [[TMP54:%.*]] = fsub fast float [[TMP52]], [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <4 x float> undef, float [[TMP54]], i64 0
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <4 x float> [[TMP55]], float [[TMP51]], i64 1
; CHECK-NEXT:    [[TMP57:%.*]] = insertelement <4 x float> [[TMP56]], float [[TMP53]], i64 2
; CHECK-NEXT:    [[TMP58:%.*]] = insertelement <4 x float> [[TMP57]], float 1.000000e+00, i64 3
; CHECK-NEXT:    [[DOTSROA_0_0_VEC_EXTRACT:%.*]] = extractelement <4 x float> [[TMP58]], i32 0
; CHECK-NEXT:    [[TMP59:%.*]] = bitcast float [[DOTSROA_0_0_VEC_EXTRACT]] to i32
; CHECK-NEXT:    [[TMP60:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP61:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP62:%.*]] = inttoptr i64 [[TMP61]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP63:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP62]], i32 [[TMP60]]
; CHECK-NEXT:    [[TMP64:%.*]] = bitcast i8 addrspace(22)* [[TMP63]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP65:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP64]], i32 -2
; CHECK-NEXT:    [[TMP66:%.*]] = bitcast i32 addrspace(22)* [[TMP65]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP67:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP66]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT:%.*]] addrspace(22)*
; CHECK-NEXT:    [[TMP68:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)* [[TMP67]], i32 0, i32 0, i32 7
; CHECK-NEXT:    store i32 [[TMP59]], i32 addrspace(22)* [[TMP68]], align 4
; CHECK-NEXT:    [[DOTSROA_0_4_VEC_EXTRACT:%.*]] = extractelement <4 x float> [[TMP58]], i32 1
; CHECK-NEXT:    [[TMP69:%.*]] = bitcast float [[DOTSROA_0_4_VEC_EXTRACT]] to i32
; CHECK-NEXT:    [[TMP70:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP71:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP72:%.*]] = inttoptr i64 [[TMP71]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP73:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP72]], i32 [[TMP70]]
; CHECK-NEXT:    [[TMP74:%.*]] = bitcast i8 addrspace(22)* [[TMP73]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP75:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP74]], i32 -2
; CHECK-NEXT:    [[TMP76:%.*]] = bitcast i32 addrspace(22)* [[TMP75]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP77:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP76]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)*
; CHECK-NEXT:    [[TMP78:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)* [[TMP77]], i32 0, i32 0, i64 8
; CHECK-NEXT:    store i32 [[TMP69]], i32 addrspace(22)* [[TMP78]], align 4
; CHECK-NEXT:    [[DOTSROA_0_8_VEC_EXTRACT:%.*]] = extractelement <4 x float> [[TMP58]], i32 2
; CHECK-NEXT:    [[TMP79:%.*]] = bitcast float [[DOTSROA_0_8_VEC_EXTRACT]] to i32
; CHECK-NEXT:    [[TMP80:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP81:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP82:%.*]] = inttoptr i64 [[TMP81]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP83:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP82]], i32 [[TMP80]]
; CHECK-NEXT:    [[TMP84:%.*]] = bitcast i8 addrspace(22)* [[TMP83]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP85:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP84]], i32 -2
; CHECK-NEXT:    [[TMP86:%.*]] = bitcast i32 addrspace(22)* [[TMP85]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP87:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP86]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)*
; CHECK-NEXT:    [[TMP88:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)* [[TMP87]], i32 0, i32 0, i64 9
; CHECK-NEXT:    store i32 [[TMP79]], i32 addrspace(22)* [[TMP88]], align 4
; CHECK-NEXT:    [[DOTSROA_0_12_VEC_EXTRACT:%.*]] = extractelement <4 x float> [[TMP58]], i32 3
; CHECK-NEXT:    [[TMP89:%.*]] = bitcast float [[DOTSROA_0_12_VEC_EXTRACT]] to i32
; CHECK-NEXT:    [[TMP90:%.*]] = load i32, i32 addrspace(20)* getelementptr inbounds ([2 x i32], [2 x i32] addrspace(20)* @REGISTERS, i32 0, i32 0), align 4
; CHECK-NEXT:    [[TMP91:%.*]] = call i64 @_cont_GetContinuationStackGlobalMemBase()
; CHECK-NEXT:    [[TMP92:%.*]] = inttoptr i64 [[TMP91]] to i8 addrspace(22)*
; CHECK-NEXT:    [[TMP93:%.*]] = getelementptr i8, i8 addrspace(22)* [[TMP92]], i32 [[TMP90]]
; CHECK-NEXT:    [[TMP94:%.*]] = bitcast i8 addrspace(22)* [[TMP93]] to i32 addrspace(22)*
; CHECK-NEXT:    [[TMP95:%.*]] = getelementptr i32, i32 addrspace(22)* [[TMP94]], i32 -2
; CHECK-NEXT:    [[TMP96:%.*]] = bitcast i32 addrspace(22)* [[TMP95]] to [2 x i32] addrspace(22)*
; CHECK-NEXT:    [[TMP97:%.*]] = bitcast [2 x i32] addrspace(22)* [[TMP96]] to [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)*
; CHECK-NEXT:    [[TMP98:%.*]] = getelementptr [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]], [[STRUCT_RAYPAYLOAD_ATTR_MAX_8_I32S_LAYOUT_5_CLOSESTHIT_OUT]] addrspace(22)* [[TMP97]], i32 0, i32 0, i64 10
; CHECK-NEXT:    store i32 [[TMP89]], i32 addrspace(22)* [[TMP98]], align 4
; CHECK-NEXT:    [[DOTFCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA:%.*]] poison, <3 x i32> [[DOTFCA_0_0_EXTRACT]], 0
; CHECK-NEXT:    [[TMP99:%.*]] = load i32, i32* [[CSP]], align 4
; CHECK-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR:%.*]], i32 [[TMP99]], [[STRUCT_DISPATCHSYSTEMDATA]] [[DOTFCA_0_INSERT]]), !continuation.registercount !8
; CHECK-NEXT:    unreachable
;
