; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: grep -v continuation.minPayloadRegisterCount %s | opt --opaque-pointers=0 --verify-each -passes='add-types-metadata,dxil-cont-intrinsic-prepare,lint,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,dxil-cont-post-process,lint,remove-types-metadata' -S 2>%t0.stderr | FileCheck -check-prefix=NOMINCOUNT %s
; RUN: count 0 < %t0.stderr
; RUN: cat                                          %s | opt --opaque-pointers=0 --verify-each -passes='add-types-metadata,dxil-cont-intrinsic-prepare,lint,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,dxil-cont-post-process,lint,remove-types-metadata' -S 2>%t1.stderr | FileCheck -check-prefix=MINCOUNT %s
; RUN: count 0 < %t1.stderr

declare i32 @_AmdContPayloadRegistersI32Count()

%struct.DispatchSystemData = type { i32 }
declare %struct.DispatchSystemData @_cont_SetupRayGen()
declare i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)

@debug_global = external global i32

define void @main() {
; NOMINCOUNT-LABEL: define void @main() !continuation !9 !continuation.entry !10 !continuation.registercount !5 !continuation.state !5 {
; NOMINCOUNT-NEXT:  entry:
; NOMINCOUNT-NEXT:    [[SYSTEM_DATA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; NOMINCOUNT-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA]], align 8
; NOMINCOUNT-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; NOMINCOUNT-NEXT:    [[TMP0:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_cont_SetupRayGen()
; NOMINCOUNT-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP0]], %struct.DispatchSystemData* [[SYSTEM_DATA]], align 4
; NOMINCOUNT-NEXT:    [[TMP1:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; NOMINCOUNT-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %main.Frame*
; NOMINCOUNT-NEXT:    [[TMP2:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA]], %struct.DispatchSystemData* [[SYSTEM_DATA]], align 4
; NOMINCOUNT-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], 0
; NOMINCOUNT-NEXT:    [[DOTFCA_0_GEP:%.*]] = getelementptr inbounds [[STRUCT_DISPATCHSYSTEMDATA]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], i32 0, i32 0
; NOMINCOUNT-NEXT:    store i32 [[DOTFCA_0_EXTRACT]], i32* [[DOTFCA_0_GEP]], align 4
; NOMINCOUNT-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; NOMINCOUNT-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; NOMINCOUNT-NEXT:    store i32 15, i32* @debug_global, align 4
; NOMINCOUNT-NEXT:    call void @continuation.complete()
; NOMINCOUNT-NEXT:    unreachable
;
; MINCOUNT-LABEL: define void @main() !continuation !10 !continuation.entry !11 !continuation.registercount !5 !continuation.state !5 {
; MINCOUNT-NEXT:  entry:
; MINCOUNT-NEXT:    [[SYSTEM_DATA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; MINCOUNT-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA]], align 8
; MINCOUNT-NEXT:    [[CONT_STATE:%.*]] = alloca [0 x i32], align 4
; MINCOUNT-NEXT:    [[TMP0:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_cont_SetupRayGen()
; MINCOUNT-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP0]], %struct.DispatchSystemData* [[SYSTEM_DATA]], align 4
; MINCOUNT-NEXT:    [[TMP1:%.*]] = bitcast [0 x i32]* [[CONT_STATE]] to i8*
; MINCOUNT-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* undef to %main.Frame*
; MINCOUNT-NEXT:    [[TMP2:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA]], %struct.DispatchSystemData* [[SYSTEM_DATA]], align 4
; MINCOUNT-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], 0
; MINCOUNT-NEXT:    [[DOTFCA_0_GEP:%.*]] = getelementptr inbounds [[STRUCT_DISPATCHSYSTEMDATA]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], i32 0, i32 0
; MINCOUNT-NEXT:    store i32 [[DOTFCA_0_EXTRACT]], i32* [[DOTFCA_0_GEP]], align 4
; MINCOUNT-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; MINCOUNT-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; MINCOUNT-NEXT:    store i32 11, i32* @debug_global, align 4
; MINCOUNT-NEXT:    call void @continuation.complete()
; MINCOUNT-NEXT:    unreachable
;
entry:
  %val = call i32 @_AmdContPayloadRegistersI32Count()
  store i32 %val, i32* @debug_global
  ret void
}

!dx.entryPoints = !{!1, !5}
!continuation.maxPayloadRegisterCount = !{!0}
!continuation.minPayloadRegisterCount = !{!8}

!0 = !{i32 15}
!1 = !{null, !"", null, !3, !2}
!2 = !{i32 0, i64 65536}
!3 = !{!4, null, null, null}
!4 = !{!5}
!5 = !{void ()* @main, !"main", null, null, !6}
!6 = !{i32 8, i32 7, i32 6, i32 16, i32 7, i32 8, i32 5, !7}
!7 = !{i32 0}
!8 = !{i32 11}
