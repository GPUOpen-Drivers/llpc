; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt --opaque-pointers=0 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint' -S %s 2>%t.stderr | FileCheck %s
; RUN: count 0 < %t.stderr

declare i1 @_AmdContinuationStackIsGlobal()

%struct.DispatchSystemData = type { i32 }
declare %struct.DispatchSystemData @_cont_SetupRayGen()
declare i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData*)

define i1 @main() {
; CHECK-LABEL: define i1 @main() !continuation.entry !12 !continuation.registercount !6 !continuation !13 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CHECK-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP0]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; CHECK-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; CHECK-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; CHECK-NEXT:    ret i1 true
;
entry:
  %val = call i1 @_AmdContinuationStackIsGlobal()
  ret i1 %val
}

!dx.entryPoints = !{!1, !5}
!continuation.stackAddrspace = !{!0}

!0 = !{i32 22}
!1 = !{null, !"", null, !3, !2}
!2 = !{i32 0, i64 65536}
!3 = !{!4, null, null, null}
!4 = !{!5}
!5 = !{i1 ()* @main, !"main", null, null, !6}
!6 = !{i32 8, i32 7, i32 6, i32 16, i32 7, i32 8, i32 5, !7}
!7 = !{i32 0}
