; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,remove-types-metadata' -S %s 2>%t0.stderr | FileCheck -check-prefix=LOWERRAYTRACINGPIPELINE %s
; RUN: count 0 < %t0.stderr
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,remove-types-metadata' \
; RUN:     -S %s 2>%t1.stderr | FileCheck -check-prefix=CLEANUP %s
; RUN: count 0 < %t1.stderr
; RUN: opt --opaque-pointers=0 --enforce-pointer-metadata=1 --verify-each -passes='add-types-metadata,dxil-cont-lgc-rt-op-converter,lint,lower-raytracing-pipeline,lint,inline,lint,dxil-cont-pre-coroutine,lint,sroa,lint,lower-await,lint,coro-early,dxil-coro-split,coro-cleanup,lint,cleanup-continuations,lint,register-buffer,lint,save-continuation-state,lint,remove-types-metadata' \
; RUN:     -S %s 2>%t2.stderr | FileCheck -check-prefix=SAVESTATE %s
; RUN: count 0 < %t2.stderr

target datalayout = "e-m:e-p:64:32-p20:32:32-p21:32:32-i1:32-i8:8-i16:32-i32:32-i64:32-f16:32-f32:32-f64:32-v16:32-v32:32-v48:32-v64:32-v80:32-v96:32-v112:32-v128:32-v144:32-v160:32-v176:32-v192:32-v208:32-v224:32-v240:32-v256:32-n8:16:32"

%struct.MyParams = type { i32 }
%dx.types.Handle = type { i8* }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }

@"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4

%struct.DispatchSystemData = type { i32 }
%struct.SystemData = type { %struct.DispatchSystemData }
%struct.TraversalData = type { %struct.SystemData }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }

declare i32 @_cont_GetContinuationStackAddr() #4
declare %struct.DispatchSystemData @_cont_SetupRayGen() #4
declare %struct.DispatchSystemData @_AmdAwaitTraversal(i64, %struct.TraversalData) #4
declare %struct.DispatchSystemData @_AmdAwaitShader(i64, %struct.DispatchSystemData) #4
declare %struct.BuiltInTriangleIntersectionAttributes @_cont_GetTriangleHitAttributes(%struct.SystemData*) #4
declare void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data) #1

define i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* %data) #4 {
  ret i32 5
}

define void @_cont_CallShader(%struct.DispatchSystemData* %data, i32) #4 {
  %dis_data = load %struct.DispatchSystemData, %struct.DispatchSystemData* %data
  %newdata = call %struct.DispatchSystemData @_AmdAwaitShader(i64 2, %struct.DispatchSystemData %dis_data)
  store %struct.DispatchSystemData %newdata, %struct.DispatchSystemData* %data
  call void @_AmdRestoreSystemData(%struct.DispatchSystemData* %data)
  ret void
}

define void @called(%struct.MyParams* %params) {
  call void @dx.op.callShader.struct.MyParams(i32 159, i32 2, %struct.MyParams* nonnull %params)  ; CallShader(ShaderIndex,Parameter)
  ret void
}

; Function Attrs: nounwind
declare void @dx.op.callShader.struct.MyParams(i32, i32, %struct.MyParams*) #0

attributes #0 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!1}
!dx.shaderModel = !{!2}
!dx.entryPoints = !{!18, !5}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{!"lib", i32 6, i32 6}
!3 = !{!4, !7, null, null}
!4 = !{!5}
!5 = !{void (%struct.MyParams*)* @called, !"called", null, null, !21}
!6 = !{i32 0, i32 4}
!7 = !{!8}
!8 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" to %"class.RWTexture2D<vector<float, 4> >"*), !"RenderTarget", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
!9 = !{i32 0, i32 9}
!11 = !{!12}
!12 = !{i32 1, !13, !13}
!13 = !{}
!14 = !{!12, !15, !16}
!15 = !{i32 2, !13, !13}
!16 = !{i32 0, !13, !13}
!17 = !{!12, !15}
!18 = !{null, !"", null, !3, !19}
!19 = !{i32 0, i64 65536}
!21 = !{i32 8, i32 12, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
!22 = !{i32 0}
!24 = !{i32 8, i32 10, i32 6, i32 16, i32 7, i32 8, i32 5, !22}
!26 = !{i32 8, i32 8, i32 5, !22}
!28 = !{i32 8, i32 11, i32 6, i32 16, i32 5, !22}
!30 = !{i32 8, i32 7, i32 5, !22}
!31 = !{!32, !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
; LOWERRAYTRACINGPIPELINE-LABEL: define {{[^@]+}}@_cont_GetLocalRootIndex
; LOWERRAYTRACINGPIPELINE-SAME: (%struct.DispatchSystemData* [[DATA:%.*]]) {
; LOWERRAYTRACINGPIPELINE-NEXT:    ret i32 5
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: define {{[^@]+}}@_cont_CallShader.struct.MyParams
; LOWERRAYTRACINGPIPELINE-SAME: (%struct.DispatchSystemData* [[DATA:%.*]], i32 [[TMP0:%.*]], %struct.MyParams* [[TMP1:%.*]]) {
; LOWERRAYTRACINGPIPELINE-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_MYPARAMS:%.*]], %struct.MyParams* [[TMP1]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP4:%.*]] = getelementptr i32, i32* [[TMP3]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP5:%.*]] = getelementptr i32, i32* [[TMP4]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP6]], i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP7:%.*]] = call %continuation.token* inttoptr (i64 2 to %continuation.token* ([[STRUCT_DISPATCHSYSTEMDATA]])*)([[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]]), !continuation.registercount !16, !continuation.returnedRegistercount !16
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP8:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @await.struct.DispatchSystemData(%continuation.token* [[TMP7]])
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT_MYPARAMS]], %struct.MyParams* [[TMP1]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP10:%.*]] = getelementptr i32, i32* [[TMP9]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP11:%.*]] = getelementptr i32, i32* [[TMP10]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP12:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP12]], i32* [[TMP11]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP8]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: define {{[^@]+}}@_cont_CallShader
; LOWERRAYTRACINGPIPELINE-SAME: (%struct.DispatchSystemData* [[DATA:%.*]], i32 [[TMP0:%.*]]) {
; LOWERRAYTRACINGPIPELINE-NEXT:    [[DIS_DATA:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA:%.*]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[NEWDATA:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @_AmdAwaitShader(i64 2, [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[NEWDATA]], %struct.DispatchSystemData* [[DATA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_AmdRestoreSystemData(%struct.DispatchSystemData* [[DATA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    ret void
;
;
; LOWERRAYTRACINGPIPELINE-LABEL: define {{[^@]+}}@called
; LOWERRAYTRACINGPIPELINE-SAME: ([[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP0:%.*]]) !continuation.registercount !16 !continuation !17 {
; LOWERRAYTRACINGPIPELINE-NEXT:    [[SYSTEM_DATA_ALLOCA:%.*]] = alloca [[STRUCT_DISPATCHSYSTEMDATA]], align 8
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP2:%.*]] = alloca [[STRUCT_MYPARAMS:%.*]], align 8
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP3:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; LOWERRAYTRACINGPIPELINE-NEXT:    store [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP3]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[LOCAL_ROOT_INDEX:%.*]] = call i32 @_cont_GetLocalRootIndex(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 [[LOCAL_ROOT_INDEX]])
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_MYPARAMS]], %struct.MyParams* [[TMP2]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP5:%.*]] = getelementptr i32, i32* [[TMP4]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP6:%.*]] = getelementptr i32, i32* [[TMP5]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP7:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP7]], i32* [[TMP6]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; LOWERRAYTRACINGPIPELINE-NEXT:    call void @_cont_CallShader.struct.MyParams(%struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], i32 2, %struct.MyParams* [[TMP2]])
; LOWERRAYTRACINGPIPELINE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_MYPARAMS]], %struct.MyParams* [[TMP2]], i32 0, i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP9:%.*]] = getelementptr i32, i32* [[TMP8]], i32 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP10:%.*]] = getelementptr i32, i32* [[TMP9]], i64 0
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP11:%.*]] = load i32, i32* [[TMP10]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    store i32 [[TMP11]], i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    [[TMP12:%.*]] = load [[STRUCT_DISPATCHSYSTEMDATA]], %struct.DispatchSystemData* [[SYSTEM_DATA_ALLOCA]], align 4
; LOWERRAYTRACINGPIPELINE-NEXT:    ret [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP12]], !continuation.registercount !16
;
;
; CLEANUP-LABEL: define {{[^@]+}}@_cont_GetLocalRootIndex
; CLEANUP-SAME: (%struct.DispatchSystemData* [[DATA:%.*]]) {
; CLEANUP-NEXT:    ret i32 5
;
;
; CLEANUP-LABEL: define {{[^@]+}}@called
; CLEANUP-SAME: (i32 [[CSPINIT:%.*]], i64 [[RETURNADDR:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP0:%.*]]) !continuation.registercount !17 !continuation !18 !continuation.state !19 !continuation.stacksize !19 {
; CLEANUP-NEXT:  AllocaSpillBB:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; CLEANUP-NEXT:    call void @continuation.save.continuation_state()
; CLEANUP-NEXT:    [[TMP1:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP1]] to %called.Frame*
; CLEANUP-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[CALLED_FRAME:%.*]], %called.Frame* [[FRAMEPTR]], i32 0, i32 0
; CLEANUP-NEXT:    store i64 [[RETURNADDR]], i64* [[RETURNADDR_SPILL_ADDR]], align 4
; CLEANUP-NEXT:    [[TMP2:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; CLEANUP-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP2]], 0
; CLEANUP-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CLEANUP-NEXT:    [[TMP3:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; CLEANUP-NEXT:    [[DIS_DATA_I_FCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT]], 0
; CLEANUP-NEXT:    store i32 [[TMP3]], i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP5:%.*]] = load i32, i32* [[TMP4]], align 4
; CLEANUP-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], 8
; CLEANUP-NEXT:    store i32 [[TMP6]], i32* [[TMP4]], align 4
; CLEANUP-NEXT:    [[TMP7:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([2 x i32]* @CONTINUATION_STATE, i32* [[TMP7]])
; CLEANUP-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP9:%.*]] = load i32, i32* [[TMP8]], align 4
; CLEANUP-NEXT:    store i32 [[TMP9]], i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP11:%.*]] = load i32, i32* [[TMP10]], align 4
; CLEANUP-NEXT:    store i32 [[TMP11]], i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    [[TMP12:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP13:%.*]] = load i32, i32* [[TMP12]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 2, i32 [[TMP13]], i64 ptrtoint (void (i32, [[STRUCT_DISPATCHSYSTEMDATA]])* @called.resume.0 to i64), [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA_I_FCA_0_INSERT]]), !continuation.registercount !17, !continuation.returnedRegistercount !17
; CLEANUP-NEXT:    unreachable
;
;
; CLEANUP-LABEL: define {{[^@]+}}@called.resume.0
; CLEANUP-SAME: (i32 [[TMP0:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP1:%.*]]) !continuation.registercount !17 !continuation !18 {
; CLEANUP-NEXT:  entryresume.0:
; CLEANUP-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; CLEANUP-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; CLEANUP-NEXT:    [[TMP3:%.*]] = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 0), align 4
; CLEANUP-NEXT:    store i32 [[TMP3]], i32* [[TMP2]], align 4
; CLEANUP-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; CLEANUP-NEXT:    [[TMP5:%.*]] = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @CONTINUATION_STATE, i32 0, i32 1), align 4
; CLEANUP-NEXT:    store i32 [[TMP5]], i32* [[TMP4]], align 4
; CLEANUP-NEXT:    [[TMP6:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([2 x i32]* @CONTINUATION_STATE, i32* [[TMP6]])
; CLEANUP-NEXT:    [[TMP7:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], -8
; CLEANUP-NEXT:    store i32 [[TMP9]], i32* [[TMP7]], align 4
; CLEANUP-NEXT:    [[TMP10:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; CLEANUP-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP10]] to %called.Frame*
; CLEANUP-NEXT:    [[VFRAME:%.*]] = bitcast %called.Frame* [[FRAMEPTR]] to i8*
; CLEANUP-NEXT:    [[TMP11:%.*]] = load i32, i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[DOTFCA_0_EXTRACT3:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], 0
; CLEANUP-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; CLEANUP-NEXT:    [[RETURNADDR_RELOAD_ADDR:%.*]] = getelementptr inbounds [[CALLED_FRAME:%.*]], %called.Frame* [[FRAMEPTR]], i32 0, i32 0
; CLEANUP-NEXT:    [[RETURNADDR_RELOAD:%.*]] = load i64, i64* [[RETURNADDR_RELOAD_ADDR]], align 4
; CLEANUP-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* @PAYLOAD)
; CLEANUP-NEXT:    store i32 [[TMP11]], i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* bitcast ([30 x i32]* @PAYLOAD to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0), align 4
; CLEANUP-NEXT:    [[DOTFCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT3]], 0
; CLEANUP-NEXT:    call void @continuation.restore.continuation_state()
; CLEANUP-NEXT:    [[TMP12:%.*]] = call i32* @continuation.getContinuationStackOffset()
; CLEANUP-NEXT:    [[TMP13:%.*]] = load i32, i32* [[TMP12]], align 4
; CLEANUP-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR_RELOAD]], i32 [[TMP13]], [[STRUCT_DISPATCHSYSTEMDATA]] [[DOTFCA_0_INSERT]]), !continuation.registercount !17
; CLEANUP-NEXT:    unreachable
;
;
; SAVESTATE-LABEL: define {{[^@]+}}@_cont_GetLocalRootIndex
; SAVESTATE-SAME: (%struct.DispatchSystemData* [[DATA:%.*]]) {
; SAVESTATE-NEXT:    ret i32 5
;
;
; SAVESTATE-LABEL: define {{[^@]+}}@called
; SAVESTATE-SAME: (i32 [[CSPINIT:%.*]], i64 [[RETURNADDR:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP0:%.*]]) !continuation.registercount !15 !continuation !16 !continuation.state !17 !continuation.stacksize !17 {
; SAVESTATE-NEXT:  AllocaSpillBB:
; SAVESTATE-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; SAVESTATE-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; SAVESTATE-NEXT:    store i32 [[CSPINIT]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP1:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 0
; SAVESTATE-NEXT:    store i32 [[TMP2]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP3:%.*]] = inttoptr i32 [[TMP1]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP4:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; SAVESTATE-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP4]] to %called.Frame*
; SAVESTATE-NEXT:    [[RETURNADDR_SPILL_ADDR:%.*]] = getelementptr inbounds [[CALLED_FRAME:%.*]], %called.Frame* [[FRAMEPTR]], i32 0, i32 0
; SAVESTATE-NEXT:    store i64 [[RETURNADDR]], i64* [[RETURNADDR_SPILL_ADDR]], align 4
; SAVESTATE-NEXT:    [[TMP5:%.*]] = call [[STRUCT_DISPATCHSYSTEMDATA]] @continuations.getSystemData.s_struct.DispatchSystemDatas()
; SAVESTATE-NEXT:    [[DOTFCA_0_EXTRACT:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP5]], 0
; SAVESTATE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; SAVESTATE-NEXT:    [[TMP6:%.*]] = load i32, i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* addrspacecast ([30 x i32] addrspace(20)* @PAYLOAD to [30 x i32]*))
; SAVESTATE-NEXT:    [[DIS_DATA_I_FCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT]], 0
; SAVESTATE-NEXT:    store i32 [[TMP6]], i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[TMP7:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 8
; SAVESTATE-NEXT:    store i32 [[TMP8]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; SAVESTATE-NEXT:    [[TMP10:%.*]] = load i32, i32* [[TMP9]], align 4
; SAVESTATE-NEXT:    [[TMP11:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP12:%.*]] = inttoptr i32 [[TMP11]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP13:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP12]], i64 -8
; SAVESTATE-NEXT:    [[TMP14:%.*]] = bitcast i8 addrspace(21)* [[TMP13]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP15:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP14]], i32 0
; SAVESTATE-NEXT:    [[TMP16:%.*]] = bitcast i32 addrspace(21)* [[TMP15]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP17:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP16]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP18:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP17]], i32 0, i32 0
; SAVESTATE-NEXT:    store i32 [[TMP10]], i32 addrspace(21)* [[TMP18]], align 4
; SAVESTATE-NEXT:    [[TMP19:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; SAVESTATE-NEXT:    [[TMP20:%.*]] = load i32, i32* [[TMP19]], align 4
; SAVESTATE-NEXT:    [[TMP21:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP22:%.*]] = inttoptr i32 [[TMP21]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP23:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP22]], i64 -8
; SAVESTATE-NEXT:    [[TMP24:%.*]] = bitcast i8 addrspace(21)* [[TMP23]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP25:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP24]], i32 0
; SAVESTATE-NEXT:    [[TMP26:%.*]] = bitcast i32 addrspace(21)* [[TMP25]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP27:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP26]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP28:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP27]], i32 0, i32 1
; SAVESTATE-NEXT:    store i32 [[TMP20]], i32 addrspace(21)* [[TMP28]], align 4
; SAVESTATE-NEXT:    [[TMP29:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    call void (i64, ...) @continuation.continue(i64 2, i32 [[TMP29]], i64 ptrtoint (void (i32, [[STRUCT_DISPATCHSYSTEMDATA]])* @called.resume.0 to i64), [[STRUCT_DISPATCHSYSTEMDATA]] [[DIS_DATA_I_FCA_0_INSERT]]), !continuation.registercount !15, !continuation.returnedRegistercount !15
; SAVESTATE-NEXT:    unreachable
;
;
; SAVESTATE-LABEL: define {{[^@]+}}@called.resume.0
; SAVESTATE-SAME: (i32 [[TMP0:%.*]], [[STRUCT_DISPATCHSYSTEMDATA:%.*]] [[TMP1:%.*]]) !continuation.registercount !15 !continuation !16 {
; SAVESTATE-NEXT:  entryresume.0:
; SAVESTATE-NEXT:    [[CONT_STATE:%.*]] = alloca [2 x i32], align 4
; SAVESTATE-NEXT:    [[CSP:%.*]] = alloca i32, align 4
; SAVESTATE-NEXT:    store i32 [[TMP0]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 0
; SAVESTATE-NEXT:    [[TMP3:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP4:%.*]] = inttoptr i32 [[TMP3]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP5:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP4]], i64 -8
; SAVESTATE-NEXT:    [[TMP6:%.*]] = bitcast i8 addrspace(21)* [[TMP5]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP7:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP6]], i32 0
; SAVESTATE-NEXT:    [[TMP8:%.*]] = bitcast i32 addrspace(21)* [[TMP7]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP9:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP8]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP10:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP9]], i32 0, i32 0
; SAVESTATE-NEXT:    [[TMP11:%.*]] = load i32, i32 addrspace(21)* [[TMP10]], align 4
; SAVESTATE-NEXT:    store i32 [[TMP11]], i32* [[TMP2]], align 4
; SAVESTATE-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [2 x i32], [2 x i32]* [[CONT_STATE]], i32 0, i32 1
; SAVESTATE-NEXT:    [[TMP13:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP14:%.*]] = inttoptr i32 [[TMP13]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP15:%.*]] = getelementptr i8, i8 addrspace(21)* [[TMP14]], i64 -8
; SAVESTATE-NEXT:    [[TMP16:%.*]] = bitcast i8 addrspace(21)* [[TMP15]] to i32 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP17:%.*]] = getelementptr i32, i32 addrspace(21)* [[TMP16]], i32 0
; SAVESTATE-NEXT:    [[TMP18:%.*]] = bitcast i32 addrspace(21)* [[TMP17]] to [0 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP19:%.*]] = bitcast [0 x i32] addrspace(21)* [[TMP18]] to [2 x i32] addrspace(21)*
; SAVESTATE-NEXT:    [[TMP20:%.*]] = getelementptr [2 x i32], [2 x i32] addrspace(21)* [[TMP19]], i32 0, i32 1
; SAVESTATE-NEXT:    [[TMP21:%.*]] = load i32, i32 addrspace(21)* [[TMP20]], align 4
; SAVESTATE-NEXT:    store i32 [[TMP21]], i32* [[TMP12]], align 4
; SAVESTATE-NEXT:    [[TMP22:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP23:%.*]] = add i32 [[TMP22]], -8
; SAVESTATE-NEXT:    store i32 [[TMP23]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP24:%.*]] = bitcast [2 x i32]* [[CONT_STATE]] to i8*
; SAVESTATE-NEXT:    [[FRAMEPTR:%.*]] = bitcast i8* [[TMP24]] to %called.Frame*
; SAVESTATE-NEXT:    [[VFRAME:%.*]] = bitcast %called.Frame* [[FRAMEPTR]] to i8*
; SAVESTATE-NEXT:    [[TMP25:%.*]] = load i32, i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER:%.*]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[DOTFCA_0_EXTRACT3:%.*]] = extractvalue [[STRUCT_DISPATCHSYSTEMDATA]] [[TMP1]], 0
; SAVESTATE-NEXT:    call void @amd.dx.setLocalRootIndex(i32 5)
; SAVESTATE-NEXT:    [[RETURNADDR_RELOAD_ADDR:%.*]] = getelementptr inbounds [[CALLED_FRAME:%.*]], %called.Frame* [[FRAMEPTR]], i32 0, i32 0
; SAVESTATE-NEXT:    [[RETURNADDR_RELOAD:%.*]] = load i64, i64* [[RETURNADDR_RELOAD_ADDR]], align 4
; SAVESTATE-NEXT:    call void (...) @registerbuffer.setpointerbarrier([30 x i32]* addrspacecast ([30 x i32] addrspace(20)* @PAYLOAD to [30 x i32]*))
; SAVESTATE-NEXT:    store i32 [[TMP25]], i32 addrspace(20)* addrspacecast (i32* getelementptr inbounds ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]], %struct.MyParams.layout_callshader* addrspacecast ([[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)* bitcast ([30 x i32] addrspace(20)* @PAYLOAD to [[STRUCT_MYPARAMS_LAYOUT_CALLSHADER]] addrspace(20)*) to %struct.MyParams.layout_callshader*), i32 0, i32 0, i32 0) to i32 addrspace(20)*), align 4
; SAVESTATE-NEXT:    [[DOTFCA_0_INSERT:%.*]] = insertvalue [[STRUCT_DISPATCHSYSTEMDATA]] poison, i32 [[DOTFCA_0_EXTRACT3]], 0
; SAVESTATE-NEXT:    [[TMP26:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], 0
; SAVESTATE-NEXT:    store i32 [[TMP27]], i32* [[CSP]], align 4
; SAVESTATE-NEXT:    [[TMP28:%.*]] = inttoptr i32 [[TMP27]] to i8 addrspace(21)*
; SAVESTATE-NEXT:    [[TMP29:%.*]] = load i32, i32* [[CSP]], align 4
; SAVESTATE-NEXT:    call void (i64, ...) @continuation.continue(i64 [[RETURNADDR_RELOAD]], i32 [[TMP29]], [[STRUCT_DISPATCHSYSTEMDATA]] [[DOTFCA_0_INSERT]]), !continuation.registercount !15
; SAVESTATE-NEXT:    unreachable
;
