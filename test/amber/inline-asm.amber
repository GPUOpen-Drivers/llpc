#!amber

# RUN: run_amber_test.py --icd %icd %s | FileCheck %s
# REQUIRES: gfx10.1.0

# Test that inline assembly from printf strings is executed.

SHADER vertex vert_shader GLSL
#version 430

layout(location = 0) in vec3 position_in;
layout(location = 0) out vec2 position_out;

void main() {
  gl_Position = vec4(position_in, 1.0);
  position_out = gl_Position.xy;
}
END

SHADER fragment frag_shader GLSL
#version 430
#extension GL_EXT_debug_printf : enable

layout(location = 0) in vec2 position_in;
layout(location = 0) out vec4 color_out;

void main() {
// FIXME Inline assembly doesn't appear in pipeline dumps, so we can't check for it here
// CHECK-NOT: v_mul_f32 {{.*}}, 2.0
  vec2 pos = (position_in + vec2(1.0)) / 2.0;
  color_out = vec4(pos, 0.0, 1.0);
  float x = color_out.x;
  debugPrintfEXT("%ra", "v_mul_f32 $0, $1, 2.0", "=v,r", x, x);
  color_out.x = x;
}
END

BUFFER framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics pipeline
  ATTACH vert_shader
  ATTACH frag_shader
  BIND BUFFER framebuffer AS color LOCATION 0
  FRAMEBUFFER_SIZE 32 32
END

CLEAR_COLOR pipeline 0 0 0 255
CLEAR pipeline
RUN pipeline DRAW_RECT POS 0 0 SIZE 32 32

EXPECT framebuffer IDX 16 16 SIZE 1 1 EQ_RGB 255 131 0
