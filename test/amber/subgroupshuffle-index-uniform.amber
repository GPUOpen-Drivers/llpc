#!amber -v 1.3
##
 #######################################################################################################################
 #
 #  Copyright (c) 2025 Advanced Micro Devices, Inc. All Rights Reserved.
 #
 #  Permission is hereby granted, free of charge, to any person obtaining a copy
 #  of this software and associated documentation files (the "Software"), to
 #  deal in the Software without restriction, including without limitation the
 #  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 #  sell copies of the Software, and to permit persons to whom the Software is
 #  furnished to do so, subject to the following conditions:
 #
 #  The above copyright notice and this permission notice shall be included in all
 #  copies or substantial portions of the Software.
 #
 #  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 #  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 #  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 #  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 #  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 #  IN THE SOFTWARE.
 #
 #######################################################################################################################


# RUN: run_amber_test.py --icd %icd %s
#
# Test vec2 shuffles.

DEVICE_FEATURE SubgroupSupportedOperations.shuffle

SHADER compute compute_shader GLSL TARGET_ENV spv1.3
#version 450
#extension GL_KHR_shader_subgroup_shuffle : enable

layout(local_size_x = 64) in;

layout(push_constant) uniform constants {
    uint lane;
};

layout(set = 0, binding = 0, std430) buffer InBuffer {
    ivec2 a[64];
} inbuf;

layout(set = 0, binding = 1, std430) buffer OutBuffer {
    ivec2 b[64];
} outbuf;

void main() {
    uint id = gl_SubgroupID * gl_SubgroupSize + gl_SubgroupInvocationID;
    ivec2 x = inbuf.a[id];
    x = subgroupShuffle(x, lane);
    outbuf.b[id] = x;
}
END

# Buffer pattern guarantees same result for both wave32 and wave64
BUFFER inbuf DATA_TYPE int32 STD430 DATA
      0   1   2   3   4   5   6   7   8   9
     10  11  12  13  14  15  16  17  18  19
     20  21  22  23  24  25  26  27  28  29
     30  31  32  33  34  35  36  37  38  39
     40  41  42  43  44  45  46  47  48  49
     50  51  52  53  54  55  56  57  58  59
     60  61  62  63
      0   1   2   3   4   5   6   7   8   9
     10  11  12  13  14  15  16  17  18  19
     20  21  22  23  24  25  26  27  28  29
     30  31  32  33  34  35  36  37  38  39
     40  41  42  43  44  45  46  47  48  49
     50  51  52  53  54  55  56  57  58  59
     60  61  62  63
END

BUFFER outbuf DATA_TYPE int32 STD430 SIZE 128 FILL 9999

BUFFER constants DATA_TYPE int32 STD430 DATA
    5
END

BUFFER expected DATA_TYPE int32 STD430 DATA
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
    10 11 10 11 10 11 10 11 10 11 10 11 10 11 10 11
END

PIPELINE compute pipeline
    ATTACH compute_shader
    BIND BUFFER inbuf AS storage DESCRIPTOR_SET 0 BINDING 0
    BIND BUFFER outbuf AS storage DESCRIPTOR_SET 0 BINDING 1
    BIND BUFFER constants AS push_constant
END

RUN pipeline 1 1 1

EXPECT outbuf EQ_BUFFER expected
