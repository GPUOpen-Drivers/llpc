#version 450 core

layout(set = 0, binding = 0, rgba8) uniform image2DMS img2DMS;
layout(set = 0, binding = 1, rgba8) uniform image2DMSArray img2DMSArray;

layout(set = 1, binding = 0) buffer BO
{
    vec4 mOut;
};

void main()
{
    vec4 temp1 = imageLoad(img2DMS, ivec2(0, 0), 1);
    vec4 temp2 = imageLoad(img2DMSArray, ivec3(0, 0, 0), 1);
    mOut = temp1 + temp2;
}

// BEGIN_SHADERTEST
/*
; RUN: amdllpc -spvgen-dir=%spvgendir% -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST-LABEL: {{^// LLPC}}  SPIR-V lowering results
; SHADERTEST: call <8 x i32> {{.*}} @llpc.call.load.resource.desc.v8i32(i32 0, i32 0, i32 0, i1 false)
; SHADERTEST: call <4 x float> @llpc.image.read.f32.2D.sample{{.*}}({{.*}}, <2 x i32> zeroinitializer, i32 1, i32 0,{{.*}})
; SHADERTEST: call <8 x i32> {{.*}} @llpc.call.load.resource.desc.v8i32(i32 0, i32 1, i32 0, i1 false)
; SHADERTEST: call <4 x float> @llpc.image.read.f32.2DArray.sample{{.*}}({{.*}}, <3 x i32> zeroinitializer, i32 1, i32 0,{{.*}})

; SHADERTEST-LABEL: {{^// LLPC}}  pipeline patching results
; SHADERTEST: call <4 x float> @llvm.amdgcn.image.load.2dmsaa.v4f32.i32(i32 15, i32 0, i32 0, i32 1,{{.*}}, i32 0, i32 0)
; SHADERTEST: call <4 x float> @llvm.amdgcn.image.load.2darraymsaa.v4f32.i32(i32 15, i32 0, i32 0, i32 0, i32 1,{{.*}}, i32 0, i32 0)
; SHADERTEST: AMDLLPC SUCCESS
*/
// END_SHADERTEST
