
; BEGIN_SHADERTEST
; RUN: amdllpc -spvgen-dir=%spvgendir% -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC}} SPIRV-to-LLVM translation results
; SHADERTEST-LABEL: {{^// LLPC}} SPIR-V lowering results
; SHADERTEST: %{{.*}} = call <4 x i32> {{.*}}@llpc.call.desc.load.buffer.{{[0-9a-z.]*}}(i32 0, i32 1, i32 0, i1 false)
; SHADERTEST: %{{.*}} = call <16 x i8> @llpc.buffer.load.v16i8(<4 x i32> %{{.*}}, i32 0, i1 false, i32 0, i1 false)
; SHADERTEST-LABEL: {{^// LLPC}} pipeline patching results
; SHADERTEST: %{{.*}} = getelementptr inbounds [512 x i8], [512 x i8] {{.*}} %{{.*}}, i64 0, i64 16
; SHADERTEST: %{{.*}} = bitcast i8 addrspace(4)* %{{.*}} to <16 x i32> {{.*}}
; SHADERTEST: %{{.*}} = load <16 x i32>, <16 x i32> {{.*}} %{{.*}}, align 64
; SHADERTEST: %{{.*}} = shufflevector <16 x i32> %{{.*}}, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; SHADERTEST: %{{.*}} = call <4 x float> @llvm.amdgcn.raw.buffer.load.v4f32(<4 x i32> %{{.*}}, i32 0, i32 0, i32 0)
; END_SHADERTEST

[CsGlsl]
#version 450

layout(binding = 0, std430) buffer OUT
{
    uvec4 o;
} O;
layout(binding = 1, std430) buffer IN
{
    uvec4 i;
} I[4];

layout(binding = 2, std430) buffer IN2
{
    uvec4 i;
} II;

layout(local_size_x = 2, local_size_y = 3) in;
void main()
{
    O.o = I[0].i + I[1].i + I[2].i + I[3].i + II.i;
}


[CsInfo]
entryPoint = main
userDataNode[0].type = DescriptorBuffer
userDataNode[0].offsetInDwords = 0
userDataNode[0].sizeInDwords = 4
userDataNode[0].set = 0
userDataNode[0].binding = 0
userDataNode[1].type = DescriptorBuffer
userDataNode[1].offsetInDwords = 4
userDataNode[1].sizeInDwords = 16
userDataNode[1].set = 0
userDataNode[1].binding = 1
userDataNode[2].type = DescriptorTableVaPtr
userDataNode[2].offsetInDwords = 20
userDataNode[2].sizeInDwords = 1
userDataNode[2].next[0].type = DescriptorBuffer
userDataNode[2].next[0].offsetInDwords = 0
userDataNode[2].next[0].sizeInDwords = 4
userDataNode[2].next[0].set = 0
userDataNode[2].next[0].binding = 2


