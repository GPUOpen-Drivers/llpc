; BEGIN_SHADERTEST
; RUN: amdllpc -verify-ir -spvgen-dir=%spvgendir% -v %gfxip %s | FileCheck -check-prefix=SHADERTEST %s
; SHADERTEST-LABEL: {{^// LLPC.*}} SPIRV-to-LLVM translation results
; SHADERTEST: AMDLLPC SUCCESS
; END_SHADERTEST
;
; Based on https://github.com/GPUOpen-Drivers/llpc/issues/203.

; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 111
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %59
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %18 "data"
               OpName %40 "buf0"
               OpMemberName %40 0 "injectionSwitch"
               OpName %42 ""
               OpName %59 "_GLF_color"
               OpDecorate %18 RelaxedPrecision
               OpMemberDecorate %40 0 Offset 0
               OpDecorate %40 Block
               OpDecorate %42 DescriptorSet 0
               OpDecorate %42 Binding 0
               OpDecorate %59 Location 0
               OpDecorate %71 RelaxedPrecision
               OpDecorate %85 RelaxedPrecision
               OpDecorate %95 RelaxedPrecision
               OpDecorate %110 RelaxedPrecision
               OpDecorate %99 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
         %13 = OpConstant %6 1
         %14 = OpTypeInt 32 0
         %15 = OpConstant %14 10
         %16 = OpTypeArray %6 %15
         %22 = OpTypeBool
         %34 = OpConstant %6 3
         %38 = OpTypeFloat 32
         %39 = OpTypeVector %38 2
         %40 = OpTypeStruct %39
         %41 = OpTypePointer Uniform %40
         %42 = OpVariable %41 Uniform
         %43 = OpConstant %6 0
         %44 = OpConstant %14 0
         %45 = OpTypePointer Uniform %38
         %57 = OpTypeVector %38 4
         %58 = OpTypePointer Output %57
         %59 = OpVariable %58 Output
         %60 = OpConstant %38 1
         %61 = OpConstantComposite %57 %60 %60 %60 %60
         %67 = OpConstant %38 0
         %68 = OpConstantComposite %57 %60 %67 %67 %60
         %98 = OpTypePointer Function %16
        %109 = OpConstant %6 2
          %4 = OpFunction %2 None %3
          %5 = OpLabel
         %18 = OpVariable %98 Function
         %70 = OpAccessChain %7 %18 %13
         %71 = OpLoad %6 %70
         %72 = OpSLessThan %22 %13 %71
        %110 = OpSelect %6 %72 %109 %13
               OpBranch %77
         %77 = OpLabel
        %101 = OpPhi %6 %13 %5 %106 %89
         %99 = OpPhi %6 %110 %5 %85 %89
         %82 = OpSLessThan %22 %99 %34
               OpLoopMerge %78 %89 None
               OpBranchConditional %82 %83 %78
         %83 = OpLabel
         %85 = OpIAdd %6 %99 %13
         %86 = OpAccessChain %45 %42 %43 %44
         %87 = OpLoad %38 %86
         %88 = OpConvertFToS %6 %87
               OpSelectionMerge %89 None
               OpSwitch %88 %90 19 %91 38 %92 23 %92 78 %93
         %90 = OpLabel
               OpBranch %89
         %91 = OpLabel
         %95 = OpIAdd %6 %101 %13
               OpBranch %92
         %92 = OpLabel
        %108 = OpPhi %6 %101 %83 %95 %91
               OpBranch %89
         %93 = OpLabel
               OpStore %59 %61
               OpBranch %90
         %89 = OpLabel
        %106 = OpPhi %6 %101 %90 %108 %92
               OpBranch %77
         %78 = OpLabel
         %97 = OpAccessChain %7 %18 %101
               OpStore %97 %13
               OpStore %59 %68
               OpReturn
               OpFunctionEnd
